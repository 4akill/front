/**
 * Smart Network Activity Analytics Module
 * 
 * @version 1.0.0
 * @author AI Assistant
 * @date 2025-07-03
 * @purpose –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É–º–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * 
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ (–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π)
 * - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
 * - –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
 * - –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–µ—Ç–µ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ
 */

class SmartNetworkActivityManager {
    constructor() {
        this.apiBaseUrl = '/api/public/activity/network';
        this.data = [];
        this.currentFilters = {
            startDate: null,
            endDate: null,
            deviceId: null
        };
        this.chartInstances = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Smart Network Activity Manager v1.0.0');
        this.setupEventListeners();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            this.loadTodayData();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.addEventListener('filterChanged', (event) => {
            this.applyFilters(event.detail);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    async loadTodayData() {
        const today = new Date().toISOString().split('T')[0];
        await this.loadNetworkData(today, today);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @param {string} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
     * @param {string} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
     * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async loadNetworkData(startDate, endDate, deviceId = null) {
        try {
            console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${startDate} - ${endDate}`);
            
            const params = new URLSearchParams({
                start_date: startDate,
                end_date: endDate
            });

            if (deviceId) {
                params.append('device_id', deviceId);
            }

            const response = await fetch(`${this.apiBaseUrl}?${params}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            this.data = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.data.length} –∑–∞–ø–∏—Å–µ–π —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.currentFilters = { startDate, endDate, deviceId };

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.analyzeNetworkData();
            this.renderNetworkCharts();
            this.updateNetworkMetrics();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
            this.handleError(error);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    analyzeNetworkData() {
        if (!this.data || this.data.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        this.deviceGroups = this.groupByDevice(this.data);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        this.timeSeriesData = this.prepareTimeSeriesData(this.data);
        
        // –†–∞—Å—á–µ—Ç –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
        this.peakAnalysis = this.calculatePeakLoads(this.data);

        // –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        this.anomalies = this.detectAnomalies(this.data);

        console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω:', {
            devices: Object.keys(this.deviceGroups).length,
            timePoints: this.timeSeriesData.length,
            peaks: this.peakAnalysis.length,
            anomalies: this.anomalies.length
        });
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
     */
    groupByDevice(data) {
        const groups = {};
        
        data.forEach(item => {
            const deviceKey = item.device_id || 'Unknown';
            if (!groups[deviceKey]) {
                groups[deviceKey] = {
                    device_id: deviceKey,
                    computer_name: item.computer_name || 'Unknown',
                    records: [],
                    totalSent: 0,
                    totalReceived: 0
                };
            }
            
            groups[deviceKey].records.push(item);
            groups[deviceKey].totalSent += item.bytes_sent || 0;
            groups[deviceKey].totalReceived += item.bytes_received || 0;
        });

        return groups;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
     */
    prepareTimeSeriesData(data) {
        const timeSeries = {};

        data.forEach(item => {
            const timestamp = new Date(item.timestamp);
            const hourKey = timestamp.toISOString().substring(0, 13) + ':00:00Z';
            
            if (!timeSeries[hourKey]) {
                timeSeries[hourKey] = {
                    timestamp: hourKey,
                    totalSent: 0,
                    totalReceived: 0,
                    packetsCount: 0,
                    deviceCount: new Set()
                };
            }

            timeSeries[hourKey].totalSent += item.bytes_sent || 0;
            timeSeries[hourKey].totalReceived += item.bytes_received || 0;
            timeSeries[hourKey].packetsCount += (item.packets_sent || 0) + (item.packets_received || 0);
            timeSeries[hourKey].deviceCount.add(item.device_id);
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ count
        Object.values(timeSeries).forEach(item => {
            item.deviceCount = item.deviceCount.size;
        });

        return Object.values(timeSeries).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
     */
    calculatePeakLoads(data) {
        const peaks = [];
        const threshold = this.calculateThreshold(data);

        data.forEach(item => {
            const totalTraffic = (item.bytes_sent || 0) + (item.bytes_received || 0);
            if (totalTraffic > threshold) {
                peaks.push({
                    ...item,
                    totalTraffic,
                    severity: this.classifyPeakSeverity(totalTraffic, threshold)
                });
            }
        });

        return peaks.sort((a, b) => b.totalTraffic - a.totalTraffic);
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø–æ—Ä–æ–≥–∞ –¥–ª—è –ø–∏–∫–æ–≤
     */
    calculateThreshold(data) {
        const trafficValues = data.map(item => (item.bytes_sent || 0) + (item.bytes_received || 0));
        const average = trafficValues.reduce((sum, val) => sum + val, 0) / trafficValues.length;
        const stdDev = Math.sqrt(trafficValues.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / trafficValues.length);
        
        return average + (2 * stdDev); // 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    }

    /**
     * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –ø–∏–∫–∞
     */
    classifyPeakSeverity(traffic, threshold) {
        const ratio = traffic / threshold;
        if (ratio > 3) return 'critical';
        if (ratio > 2) return 'high';
        if (ratio > 1.5) return 'medium';
        return 'low';
    }

    /**
     * –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
     */
    detectAnomalies(data) {
        const anomalies = [];
        
        // –ü–æ–∏—Å–∫ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
        for (let i = 1; i < data.length; i++) {
            const current = data[i];
            const previous = data[i - 1];
            
            const currentTraffic = (current.bytes_sent || 0) + (current.bytes_received || 0);
            const previousTraffic = (previous.bytes_sent || 0) + (previous.bytes_received || 0);
            
            if (previousTraffic > 0) {
                const ratio = currentTraffic / previousTraffic;
                if (ratio > 10 || ratio < 0.1) { // –°–∫–∞—á–æ–∫ –≤ 10 —Ä–∞–∑ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑
                    anomalies.push({
                        type: ratio > 10 ? 'traffic_spike' : 'traffic_drop',
                        timestamp: current.timestamp,
                        device_id: current.device_id,
                        ratio,
                        current: currentTraffic,
                        previous: previousTraffic
                    });
                }
            }
        }

        return anomalies;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    renderNetworkCharts() {
        this.renderTrafficOverTimeChart();
        this.renderDeviceComparisonChart();
        this.renderPacketAnalysisChart();
    }

    /**
     * –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    renderTrafficOverTimeChart() {
        const container = document.getElementById('network-traffic-chart');
        if (!container) return;

        const trace1 = {
            x: this.timeSeriesData.map(d => d.timestamp),
            y: this.timeSeriesData.map(d => d.totalSent / 1024 / 1024), // –ú–ë
            type: 'scatter',
            mode: 'lines+markers',
            name: '–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫',
            line: { color: '#3498db', width: 2 },
            marker: { size: 6 }
        };

        const trace2 = {
            x: this.timeSeriesData.map(d => d.timestamp),
            y: this.timeSeriesData.map(d => d.totalReceived / 1024 / 1024), // –ú–ë
            type: 'scatter',
            mode: 'lines+markers',
            name: '–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫',
            line: { color: '#e74c3c', width: 2 },
            marker: { size: 6 }
        };

        const layout = {
            title: 'üìà –°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
            xaxis: { title: '–í—Ä–µ–º—è' },
            yaxis: { title: '–¢—Ä–∞—Ñ–∏–∫ (–ú–ë)' },
            hovermode: 'x unified',
            showlegend: true
        };

        Plotly.newPlot(container, [trace1, trace2], layout, { responsive: true });
        this.chartInstances.set('traffic-time', container);
    }

    /**
     * –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    renderDeviceComparisonChart() {
        const container = document.getElementById('network-devices-chart');
        if (!container) return;

        const devices = Object.values(this.deviceGroups);
        
        const trace = {
            x: devices.map(d => d.computer_name || d.device_id),
            y: devices.map(d => (d.totalSent + d.totalReceived) / 1024 / 1024), // –ú–ë
            type: 'bar',
            name: '–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫',
            marker: {
                color: devices.map(d => this.getDeviceColor(d.device_id)),
                opacity: 0.8
            }
        };

        const layout = {
            title: 'üíª –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º',
            xaxis: { title: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' },
            yaxis: { title: '–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (–ú–ë)' },
            showlegend: false
        };

        Plotly.newPlot(container, [trace], layout, { responsive: true });
        this.chartInstances.set('devices-comparison', container);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–æ–≤
     */
    renderPacketAnalysisChart() {
        const container = document.getElementById('network-packets-chart');
        if (!container) return;

        const trace = {
            x: this.timeSeriesData.map(d => d.timestamp),
            y: this.timeSeriesData.map(d => d.packetsCount),
            type: 'scatter',
            mode: 'lines+markers',
            name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤',
            line: { color: '#9b59b6', width: 2 },
            marker: { size: 6 }
        };

        const layout = {
            title: 'üì¶ –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤',
            xaxis: { title: '–í—Ä–µ–º—è' },
            yaxis: { title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤' },
            showlegend: false
        };

        Plotly.newPlot(container, [trace], layout, { responsive: true });
        this.chartInstances.set('packets-analysis', container);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
     */
    updateNetworkMetrics() {
        const metrics = this.calculateNetworkMetrics();
        this.displayMetrics(metrics);
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    calculateNetworkMetrics() {
        if (!this.data || this.data.length === 0) {
            return null;
        }

        const totalSent = this.data.reduce((sum, item) => sum + (item.bytes_sent || 0), 0);
        const totalReceived = this.data.reduce((sum, item) => sum + (item.bytes_received || 0), 0);
        const totalPackets = this.data.reduce((sum, item) => sum + (item.packets_sent || 0) + (item.packets_received || 0), 0);

        const devicesCount = new Set(this.data.map(item => item.device_id)).size;
        const avgSentPerDevice = totalSent / devicesCount;
        const avgReceivedPerDevice = totalReceived / devicesCount;

        return {
            totalTraffic: totalSent + totalReceived,
            totalSent,
            totalReceived,
            totalPackets,
            devicesCount,
            avgSentPerDevice,
            avgReceivedPerDevice,
            peaksCount: this.peakAnalysis ? this.peakAnalysis.length : 0,
            anomaliesCount: this.anomalies ? this.anomalies.length : 0
        };
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
     */
    displayMetrics(metrics) {
        if (!metrics) return;

        // –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
        this.updateMetricElement('total-traffic', this.formatBytes(metrics.totalTraffic));
        
        // –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
        this.updateMetricElement('total-sent', this.formatBytes(metrics.totalSent));
        
        // –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
        this.updateMetricElement('total-received', this.formatBytes(metrics.totalReceived));
        
        // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.updateMetricElement('devices-count', metrics.devicesCount);
        
        // –ü–∏–∫–∏
        this.updateMetricElement('peaks-count', metrics.peaksCount);
        
        // –ê–Ω–æ–º–∞–ª–∏–∏
        this.updateMetricElement('anomalies-count', metrics.anomaliesCount);

        console.log('üìä –°–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', metrics);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏
     */
    updateMetricElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤
     */
    formatBytes(bytes) {
        if (bytes === 0) return '0 –ë';
        
        const units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë'];
        const k = 1024;
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + units[i];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    getDeviceColor(deviceId) {
        const colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c'];
        const hash = this.simpleHash(deviceId);
        return colors[hash % colors.length];
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è
     */
    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
        }
        return Math.abs(hash);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applyFilters(filters) {
        console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters);
        this.loadNetworkData(filters.startDate, filters.endDate, filters.deviceId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    handleError(error) {
        console.error('‚ùå Network Activity Error:', error);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorContainer = document.getElementById('network-error-message');
        if (errorContainer) {
            errorContainer.textContent = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
            errorContainer.style.display = 'block';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    getExportData() {
        return {
            raw: this.data,
            metrics: this.calculateNetworkMetrics(),
            peaks: this.peakAnalysis,
            anomalies: this.anomalies,
            deviceGroups: this.deviceGroups,
            timeSeries: this.timeSeriesData
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        this.chartInstances.forEach(chart => {
            if (chart && typeof Plotly !== 'undefined') {
                Plotly.purge(chart);
            }
        });
        this.chartInstances.clear();
        console.log('üßπ Network Activity Manager –æ—á–∏—â–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.NetworkActivityManager = new SmartNetworkActivityManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SmartNetworkActivityManager;
} 