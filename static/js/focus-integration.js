/**
 * –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –§–û–ö–£–°–ê
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2025-01-22
 * –í–µ—Ä—Å–∏—è: 1.0
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
 * 
 * –°–≤—è–∑—ã–≤–∞–µ—Ç:
 * - window-focus-analyzer.js (—Å–æ–±—ã—Ç–∏—è —Ñ–æ–∫—É—Å–∞ –æ–∫–æ–Ω)
 * - smart-spoiler-analyzer.js (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
 * - human-focus-analyzer.js (–∞–Ω–∞–ª–∏–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è)
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const FOCUS_INTEGRATION_CONSTANTS = {
    // –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    FOCUS_WINDOW_SIZE_MINUTES: 5,
    
    // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    WINDOW_OVERLAP_MINUTES: 1,
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    MIN_DATA_POINTS: 3,
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    UPDATE_INTERVAL_SECONDS: 30,
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞
    FOCUS_THRESHOLDS: {
        HIGH: 80,
        MODERATE: 60,
        LOW: 40,
        VERY_LOW: 20
    }
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–æ–∫—É—Å–∞
 * @param {Object} focusAnalyzerData - –î–∞–Ω–Ω—ã–µ –∏–∑ window-focus-analyzer.js
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 */
function analyzeHumanFocusFromFocusAnalyzer(focusAnalyzerData) {
    console.log('üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ê–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–æ–∫—É—Å–∞');
    console.log('üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', focusAnalyzerData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    if (typeof computeHumanFocusScore !== 'function') {
        console.error('‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return createEmptyHumanFocusResult('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!focusAnalyzerData || !focusAnalyzerData.windowActivities) {
        console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω');
        return createEmptyHumanFocusResult('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    const focusWindows = createFocusWindowsFromAnalyzerData(focusAnalyzerData);
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–æ –æ–∫–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', focusWindows.length);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –æ–∫–Ω–æ
    const focusResults = [];
    
    focusWindows.forEach((window, index) => {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –æ–∫–Ω–∞ ${index + 1}/${focusWindows.length}:`, {
            timeRange: `${window.startTime.toLocaleTimeString()} - ${window.endTime.toLocaleTimeString()}`,
            dataPoints: {
                mouse: window.mouseEvents?.length || 0,
                keyboard: window.keyEvents?.length || 0,
                cpu: window.cpuLoad?.length || 0,
                gpu: window.gpuLoad?.length || 0,
                ram: window.ramUsage?.length || 0,
                visibility: window.visibilityEvents?.length || 0
            }
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –¥–ª—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
        const focusScore = computeHumanFocusScore(window);
        
        focusResults.push({
            window: window,
            focusScore: focusScore,
            timeRange: {
                start: window.startTime,
                end: window.endTime
            },
            index: index
        });
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const summaryResult = createFocusSummary(focusResults);
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:', summaryResult);
    return summaryResult;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–æ–∫—É—Å–∞
 * @param {Object} focusAnalyzerData - –î–∞–Ω–Ω—ã–µ –∏–∑ window-focus-analyzer.js
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –æ–∫–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */
function createFocusWindowsFromAnalyzerData(focusAnalyzerData) {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞...');
    
    const {
        windowActivities = [],
        mouseActivities = [],
        resourceData = [],
        browserActivities = [],
        websiteVisits = []
    } = focusAnalyzerData;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    const allTimestamps = [];
    
    [windowActivities, mouseActivities, resourceData].forEach(dataArray => {
        dataArray.forEach(item => {
            if (item.timestamp) {
                allTimestamps.push(new Date(item.timestamp));
            }
        });
    });
    
    if (allTimestamps.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö');
        return [];
    }
    
    const startTime = new Date(Math.min(...allTimestamps));
    const endTime = new Date(Math.max(...allTimestamps));
    
    console.log('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã:', {
        start: startTime.toLocaleTimeString(),
        end: endTime.toLocaleTimeString(),
        duration: Math.round((endTime - startTime) / (1000 * 60)) + ' –º–∏–Ω—É—Ç'
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –æ–∫–Ω–∞
    const windows = [];
    const windowSizeMs = FOCUS_INTEGRATION_CONSTANTS.FOCUS_WINDOW_SIZE_MINUTES * 60 * 1000;
    const overlapMs = FOCUS_INTEGRATION_CONSTANTS.WINDOW_OVERLAP_MINUTES * 60 * 1000;
    const stepMs = windowSizeMs - overlapMs;
    
    let currentStart = new Date(startTime);
    
    while (currentStart < endTime) {
        const currentEnd = new Date(Math.min(currentStart.getTime() + windowSizeMs, endTime.getTime()));
        
        // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        const focusWindow = {
            startTime: new Date(currentStart),
            endTime: new Date(currentEnd),
            mouseEvents: filterDataByTimeRange(mouseActivities, currentStart, currentEnd),
            keyEvents: [], // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ focusAnalyzerData
            cpuLoad: filterDataByTimeRange(resourceData, currentStart, currentEnd, 'cpu'),
            gpuLoad: filterDataByTimeRange(resourceData, currentStart, currentEnd, 'gpu'),
            ramUsage: filterDataByTimeRange(resourceData, currentStart, currentEnd, 'ram'),
            visibilityEvents: createVisibilityEventsFromWindowActivities(
                filterDataByTimeRange(windowActivities, currentStart, currentEnd)
            ),
            windowContext: extractWindowContext(
                filterDataByTimeRange(windowActivities, currentStart, currentEnd)
            )
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if (hasEnoughDataForAnalysis(focusWindow)) {
            windows.push(focusWindow);
        }
        
        currentStart = new Date(currentStart.getTime() + stepMs);
    }
    
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${windows.length} –æ–∫–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    return windows;
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
 * @param {Array} data - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
 * @param {Date} startTime - –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
 * @param {Date} endTime - –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
 * @param {string} type - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @returns {Array} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function filterDataByTimeRange(data, startTime, endTime, type = null) {
    if (!data || !Array.isArray(data)) {
        return [];
    }
    
    const filtered = data.filter(item => {
        if (!item.timestamp) return false;
        
        const itemTime = new Date(item.timestamp);
        return itemTime >= startTime && itemTime <= endTime;
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (type === 'cpu') {
        return filtered.map(item => ({
            timestamp: item.timestamp,
            cpu: item.cpu_percent || item.cpu || 0,
            cpu_percent: item.cpu_percent || item.cpu || 0
        }));
    } else if (type === 'gpu') {
        return filtered.map(item => ({
            timestamp: item.timestamp,
            gpu: item.gpu_percent || item.gpu || 0,
            gpu_percent: item.gpu_percent || item.gpu || 0
        }));
    } else if (type === 'ram') {
        return filtered.map(item => ({
            timestamp: item.timestamp,
            ram: item.ram_percent || item.memory || item.ram || 0,
            memory: item.ram_percent || item.memory || item.ram || 0,
            ram_percent: item.ram_percent || item.memory || item.ram || 0
        }));
    }
    
    return filtered;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –æ–∫–æ–Ω
 * @param {Array} windowActivities - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
 * @returns {Array} - –°–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
 */
function createVisibilityEventsFromWindowActivities(windowActivities) {
    if (!windowActivities || windowActivities.length === 0) {
        return [];
    }
    
    const visibilityEvents = [];
    let lastApp = null;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedActivities = windowActivities.sort((a, b) => 
        new Date(a.timestamp) - new Date(b.timestamp)
    );
    
    sortedActivities.forEach(activity => {
        const appName = activity.app_name || activity.application;
        
        if (appName !== lastApp) {
            // Blur –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if (lastApp) {
                visibilityEvents.push({
                    timestamp: activity.timestamp,
                    type: 'blur',
                    application: lastApp
                });
            }
            
            // Focus –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            visibilityEvents.push({
                timestamp: activity.timestamp,
                type: 'focus',
                application: appName
            });
            
            lastApp = appName;
        }
    });
    
    return visibilityEvents;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∫–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} windowActivities - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
 * @returns {Object} - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–∫–Ω–∞
 */
function extractWindowContext(windowActivities) {
    if (!windowActivities || windowActivities.length === 0) {
        return {};
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const appCounts = {};
    let mostFrequentApp = null;
    let maxCount = 0;
    
    windowActivities.forEach(activity => {
        const appName = activity.app_name || activity.application;
        if (appName) {
            appCounts[appName] = (appCounts[appName] || 0) + 1;
            if (appCounts[appName] > maxCount) {
                maxCount = appCounts[appName];
                mostFrequentApp = appName;
            }
        }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appActivity = windowActivities.find(activity => 
        (activity.app_name || activity.application) === mostFrequentApp
    );
    
    return {
        application: mostFrequentApp,
        title: appActivity?.window_title || appActivity?.title || '',
        totalActivities: windowActivities.length,
        uniqueApps: Object.keys(appCounts).length
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {boolean} - true –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 */
function hasEnoughDataForAnalysis(focusWindow) {
    const mouseCount = focusWindow.mouseEvents?.length || 0;
    const cpuCount = focusWindow.cpuLoad?.length || 0;
    const visibilityCount = focusWindow.visibilityEvents?.length || 0;
    
    const totalDataPoints = mouseCount + cpuCount + visibilityCount;
    
    return totalDataPoints >= FOCUS_INTEGRATION_CONSTANTS.MIN_DATA_POINTS;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞
 * @param {Array} focusResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
 * @returns {Object} - –°–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
function createFocusSummary(focusResults) {
    if (!focusResults || focusResults.length === 0) {
        return createEmptyHumanFocusResult('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const scores = focusResults.map(result => result.focusScore.score);
    const averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    const maxScore = Math.max(...scores);
    const minScore = Math.min(...scores);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const confidences = focusResults.map(result => result.focusScore.confidence);
    const averageConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
    const focusDistribution = analyzeFocusDistribution(focusResults);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Å–∞–π—Ç—ã
    const allInsights = [];
    const allRecommendations = [];
    
    focusResults.forEach(result => {
        allInsights.push(...result.focusScore.insights);
        allRecommendations.push(...result.focusScore.recommendations);
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueInsights = [...new Set(allInsights)];
    const uniqueRecommendations = [...new Set(allRecommendations)];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ñ–æ–∫—É—Å–∞
    const focusTimeline = createFocusTimeline(focusResults);
    
    return {
        summary: {
            averageScore: Math.round(averageScore),
            maxScore: maxScore,
            minScore: minScore,
            averageConfidence: averageConfidence,
            tag: getFocusTag(averageScore),
            windowsAnalyzed: focusResults.length
        },
        distribution: focusDistribution,
        timeline: focusTimeline,
        insights: uniqueInsights,
        recommendations: uniqueRecommendations,
        detailedResults: focusResults,
        metadata: {
            analysisTime: new Date().toISOString(),
            totalDataPoints: focusResults.reduce((sum, result) => {
                return sum + 
                    (result.window.mouseEvents?.length || 0) +
                    (result.window.cpuLoad?.length || 0) +
                    (result.window.visibilityEvents?.length || 0);
            }, 0)
        }
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
 * @param {Array} focusResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 * @returns {Object} - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
 */
function analyzeFocusDistribution(focusResults) {
    const distribution = {
        high: 0,
        moderate: 0,
        low: 0,
        very_low: 0,
        no_focus: 0
    };
    
    focusResults.forEach(result => {
        const score = result.focusScore.score;
        const tag = result.focusScore.tag;
        
        if (tag in distribution) {
            distribution[tag]++;
        }
    });
    
    const total = focusResults.length;
    
    return {
        counts: distribution,
        percentages: {
            high: Math.round((distribution.high / total) * 100),
            moderate: Math.round((distribution.moderate / total) * 100),
            low: Math.round((distribution.low / total) * 100),
            very_low: Math.round((distribution.very_low / total) * 100),
            no_focus: Math.round((distribution.no_focus / total) * 100)
        },
        totalWindows: total
    };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ñ–æ–∫—É—Å–∞
 * @param {Array} focusResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 * @returns {Array} - –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
 */
function createFocusTimeline(focusResults) {
    return focusResults.map(result => ({
        time: result.timeRange.start.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        }),
        score: result.focusScore.score,
        tag: result.focusScore.tag,
        confidence: result.focusScore.confidence,
        duration: Math.round((result.timeRange.end - result.timeRange.start) / (1000 * 60)), // –≤ –º–∏–Ω—É—Ç–∞—Ö
        primaryApp: result.window.windowContext?.application || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }));
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @returns {Object} - –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
function createEmptyHumanFocusResult(reason) {
    return {
        summary: {
            averageScore: 0,
            maxScore: 0,
            minScore: 0,
            averageConfidence: 0,
            tag: 'no_data',
            windowsAnalyzed: 0
        },
        distribution: {
            counts: { high: 0, moderate: 0, low: 0, very_low: 0, no_focus: 0 },
            percentages: { high: 0, moderate: 0, low: 0, very_low: 0, no_focus: 0 },
            totalWindows: 0
        },
        timeline: [],
        insights: [`–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: ${reason}`],
        recommendations: ['–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'],
        detailedResults: [],
        metadata: {
            analysisTime: new Date().toISOString(),
            totalDataPoints: 0
        }
    };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–≥ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
 * @param {number} score - –û—Ü–µ–Ω–∫–∞ —Ñ–æ–∫—É—Å–∞ (0-100)
 * @returns {string} - –¢–µ–≥ —Ñ–æ–∫—É—Å–∞
 */
function getFocusTag(score) {
    if (score >= FOCUS_INTEGRATION_CONSTANTS.FOCUS_THRESHOLDS.HIGH) return 'high';
    if (score >= FOCUS_INTEGRATION_CONSTANTS.FOCUS_THRESHOLDS.MODERATE) return 'moderate';
    if (score >= FOCUS_INTEGRATION_CONSTANTS.FOCUS_THRESHOLDS.LOW) return 'low';
    if (score >= FOCUS_INTEGRATION_CONSTANTS.FOCUS_THRESHOLDS.VERY_LOW) return 'very_low';
    return 'no_focus';
}

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é analyzeFocus
 * @param {string} selectedDate - –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 */
async function analyzeHumanFocusIntegrated(selectedDate) {
    console.log('üîó –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–∞—Ç—ã:', selectedDate);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–æ–∫—É—Å–∞ –æ–∫–æ–Ω
        if (typeof loadAllDataForAnalysis !== 'function') {
            throw new Error('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ–∫—É—Å–∞ –æ–∫–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        const allData = await loadAllDataForAnalysis(selectedDate);
        
        if (!allData || Object.keys(allData).length === 0) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å
        const humanFocusResult = analyzeHumanFocusFromFocusAnalyzer(allData);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            success: true,
            data: humanFocusResult,
            rawData: allData,
            analysisDate: selectedDate
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞:', error);
        
        return {
            success: false,
            error: error.message,
            data: createEmptyHumanFocusResult(error.message),
            analysisDate: selectedDate
        };
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 * @param {Object} humanFocusResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 */
function updateHumanFocusUI(humanFocusResult) {
    console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let container = document.getElementById('human-focus-results');
    
    if (!container) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        container = document.createElement('div');
        container.id = 'human-focus-results';
        container.className = 'human-focus-container mt-4';
        
        // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ–∫—É—Å–∞)
        const focusTable = document.getElementById('window-focus-table');
        if (focusTable && focusTable.parentNode) {
            focusTable.parentNode.insertBefore(container, focusTable.nextSibling);
        } else {
            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü body
            document.body.appendChild(container);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultHTML = createHumanFocusResultHTML(humanFocusResult);
    container.innerHTML = resultHTML;
    
    console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 * @returns {string} - HTML —Å—Ç—Ä–æ–∫–∞
 */
function createHumanFocusResultHTML(result) {
    const { summary, distribution, timeline, insights, recommendations } = result;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
    const getScoreColor = (score) => {
        if (score >= 80) return 'success';
        if (score >= 60) return 'primary';
        if (score >= 40) return 'warning';
        if (score >= 20) return 'danger';
        return 'secondary';
    };
    
    const scoreColor = getScoreColor(summary.averageScore);
    
    return `
        <div class="card">
            <div class="card-header bg-gradient-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-brain me-2"></i>
                    –ê–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è
                </h5>
            </div>
            <div class="card-body">
                <!-- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="text-center">
                            <div class="display-4 text-${scoreColor} fw-bold">${summary.averageScore}</div>
                            <div class="text-muted">–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–æ–∫—É—Å–∞</div>
                            <div class="badge bg-${scoreColor} mt-2">${summary.tag.toUpperCase()}</div>
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-info">${summary.maxScore}</div>
                                    <div class="text-muted small">–ú–∞–∫—Å–∏–º—É–º</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-warning">${summary.minScore}</div>
                                    <div class="text-muted small">–ú–∏–Ω–∏–º—É–º</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-success">${Math.round(summary.averageConfidence * 100)}%</div>
                                    <div class="text-muted small">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-primary">${summary.windowsAnalyzed}</div>
                                    <div class="text-muted small">–û–∫–æ–Ω</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6><i class="bi bi-pie-chart me-2"></i>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞</h6>
                        <div class="progress-stacked">
                            <div class="progress-bar bg-success" style="width: ${distribution.percentages.high}%" 
                                 title="–í—ã—Å–æ–∫–∏–π —Ñ–æ–∫—É—Å: ${distribution.percentages.high}%"></div>
                            <div class="progress-bar bg-primary" style="width: ${distribution.percentages.moderate}%" 
                                 title="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å: ${distribution.percentages.moderate}%"></div>
                            <div class="progress-bar bg-warning" style="width: ${distribution.percentages.low}%" 
                                 title="–ù–∏–∑–∫–∏–π —Ñ–æ–∫—É—Å: ${distribution.percentages.low}%"></div>
                            <div class="progress-bar bg-danger" style="width: ${distribution.percentages.very_low}%" 
                                 title="–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ñ–æ–∫—É—Å: ${distribution.percentages.very_low}%"></div>
                            <div class="progress-bar bg-secondary" style="width: ${distribution.percentages.no_focus}%" 
                                 title="–ù–µ—Ç —Ñ–æ–∫—É—Å–∞: ${distribution.percentages.no_focus}%"></div>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <span class="badge bg-success me-1">${distribution.percentages.high}%</span> –í—ã—Å–æ–∫–∏–π
                                <span class="badge bg-primary me-1 ms-2">${distribution.percentages.moderate}%</span> –£–º–µ—Ä–µ–Ω–Ω—ã–π
                                <span class="badge bg-warning me-1 ms-2">${distribution.percentages.low}%</span> –ù–∏–∑–∫–∏–π
                                <span class="badge bg-danger me-1 ms-2">${distribution.percentages.very_low}%</span> –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π
                                <span class="badge bg-secondary ms-2">${distribution.percentages.no_focus}%</span> –ù–µ—Ç —Ñ–æ–∫—É—Å–∞
                            </small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="bi bi-graph-up me-2"></i>–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞</h6>
                        <div class="timeline-chart">
                            ${timeline.map(point => `
                                <div class="timeline-point mb-1">
                                    <span class="badge bg-light text-dark me-2">${point.time}</span>
                                    <span class="badge bg-${getScoreColor(point.score)} me-2">${point.score}</span>
                                    <small class="text-muted">${point.primaryApp}</small>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
                
                <!-- –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="bi bi-lightbulb me-2"></i>–ò–Ω—Å–∞–π—Ç—ã</h6>
                        <ul class="list-unstyled">
                            ${insights.map(insight => `
                                <li class="mb-2">
                                    <i class="bi bi-arrow-right text-primary me-2"></i>
                                    ${insight}
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="bi bi-gear me-2"></i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h6>
                        <ul class="list-unstyled">
                            ${recommendations.map(recommendation => `
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    ${recommendation}
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.analyzeHumanFocusFromFocusAnalyzer = analyzeHumanFocusFromFocusAnalyzer;
window.analyzeHumanFocusIntegrated = analyzeHumanFocusIntegrated;
window.updateHumanFocusUI = updateHumanFocusUI;

console.log('üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('  - analyzeHumanFocusFromFocusAnalyzer(focusAnalyzerData)');
console.log('  - analyzeHumanFocusIntegrated(selectedDate)');
console.log('  - updateHumanFocusUI(humanFocusResult)'); 