/**
 * Smart Keyboard Metrics Module v1.0.0
 * 
 * @author AI Assistant
 * @version 1.0.0
 * @date 2025-07-03
 * @description –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
 * - –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 0 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0
 * - –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */

class SmartKeyboardMetrics {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        this.keyboardData = [];
        
        console.log('üéπ Smart Keyboard Metrics Module v1.0.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @param {Array} keyboardActivityData - –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateKeyboardMetrics(keyboardActivityData) {
        try {
            console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
                length: keyboardActivityData ? keyboardActivityData.length : 0,
                type: typeof keyboardActivityData,
                sample: keyboardActivityData ? keyboardActivityData.slice(0, 3) : null
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
            const keyboardEvents = keyboardActivityData.filter(item => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã event –∏–ª–∏ timestamp
                return item && 
                       typeof item === 'object' && 
                       (item.event || item.timestamp || item.time); // –õ—é–±–æ–µ –∏–∑ –ø–æ–ª–µ–π
            });

            console.log('‚å®Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', keyboardEvents.length);
            if (keyboardEvents.length > 0) {
                console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', keyboardEvents.slice(0, 3));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            const isDataFresh = this.checkDataFreshness(keyboardEvents);
            console.log('üìÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ:', isDataFresh);

            if (keyboardEvents.length === 0) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
                this.updateInterfaceWithEmptyData();
                return;
            }

            if (!isDataFresh) {
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞—Ä–µ–ª–∏');
                this.updateInterfaceWithOutdatedData();
                return;
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            const metrics = this.calculateKeyboardMetrics(keyboardEvents);
            console.log('üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', metrics);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateKeyboardInterface(metrics);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
            console.error('Stack trace:', error.stack);
            this.updateInterfaceWithEmptyData();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     * @param {Array} keyboardEvents - –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @returns {boolean} true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
     */
    checkDataFreshness(keyboardEvents) {
        if (!keyboardEvents || keyboardEvents.length === 0) {
            return false;
        }

        try {
            // –ò—â–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º –≤—Ä–µ–º–µ–Ω–∏
            const validTimestamps = keyboardEvents
                .map(event => {
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
                    const timestamp = event.timestamp || event.time || event.created_at;
                    if (!timestamp) return null;
                    
                    const date = new Date(timestamp);
                    return isNaN(date.getTime()) ? null : date;
                })
                .filter(date => date !== null);

            console.log('üïí –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö timestamps:', validTimestamps.length);

            if (validTimestamps.length === 0) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö timestamps, –Ω–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è - —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–º–∏
                console.log('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö timestamps, –Ω–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è - —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º–∏');
                return keyboardEvents.length > 0;
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–∞—Ç—É
            const lastEventTime = new Date(Math.max(...validTimestamps.map(d => d.getTime())));
            console.log('üïê –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', lastEventTime.toLocaleString());

            const now = new Date();
            const diffMinutes = (now - lastEventTime) / (1000 * 60);
            
            console.log('‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:', diffMinutes.toFixed(1));

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ–º–æ/—Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 30 –¥–Ω–µ–π (43200 –º–∏–Ω—É—Ç)
            const isDataFresh = diffMinutes < 43200; // –±—ã–ª–æ 10080 –º–∏–Ω—É—Ç (7 –¥–Ω–µ–π)
            
            console.log('üìÖ –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏:', isDataFresh);
            
            return isDataFresh;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
            return keyboardEvents.length > 0;
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @param {Array} keyboardEvents - –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    calculateKeyboardMetrics(keyboardEvents) {
        if (!keyboardEvents || keyboardEvents.length === 0) {
            return {
                totalEvents: 0,
                eventsPerHour: 0,
                eventsPerMinute: 0,
                peakActivity: 0,
                intensity: '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
                lastEventTime: '-',
                isActive: false
            };
        }

        const totalEvents = keyboardEvents.length;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        const timestamps = keyboardEvents
            .map(event => {
                const timeField = event.timestamp || event.time || event.created_at;
                if (!timeField) return null;
                
                const date = new Date(timeField);
                return !isNaN(date.getTime()) ? date : null;
            })
            .filter(date => date !== null)
            .sort((a, b) => a - b);

        console.log('üéπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', totalEvents);
        console.log('üéπ –í–∞–ª–∏–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫:', timestamps.length);

        if (timestamps.length === 0) {
            return {
                totalEvents: totalEvents,
                eventsPerHour: 0,
                eventsPerMinute: 0,
                peakActivity: 0,
                intensity: '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
                lastEventTime: '-',
                isActive: false
            };
        }

        // –†–∞—Å—á–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Å
        const firstTime = timestamps[0];
        const lastTime = timestamps[timestamps.length - 1];
        const timeDiffMs = lastTime - firstTime;
        const timeDiffHours = timeDiffMs / (1000 * 60 * 60);
        
        console.log('üéπ –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
            first: firstTime.toLocaleTimeString(),
            last: lastTime.toLocaleTimeString(),
            diffHours: timeDiffHours.toFixed(2)
        });
        
        let eventsPerHour = 0;
        if (timeDiffHours > 0) {
            eventsPerHour = Math.round(totalEvents / timeDiffHours);
        } else {
            // –ï—Å–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é
            eventsPerHour = totalEvents * 60; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 –º–∏–Ω—É—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        }

        const eventsPerMinute = Math.round(eventsPerHour / 60);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        let intensity = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        if (eventsPerMinute > 50) {
            intensity = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è';
        } else if (eventsPerMinute > 30) {
            intensity = '–í—ã—Å–æ–∫–∞—è';
        } else if (eventsPerMinute > 15) {
            intensity = '–°—Ä–µ–¥–Ω—è—è';
        } else if (eventsPerMinute > 5) {
            intensity = '–ù–∏–∑–∫–∞—è';
        }

        const result = {
            totalEvents: totalEvents,
            eventsPerHour: eventsPerHour,
            eventsPerMinute: eventsPerMinute,
            peakActivity: eventsPerHour, // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            intensity: intensity,
            lastEventTime: lastTime.toLocaleTimeString(),
            isActive: totalEvents > 0
        };

        console.log('üéπ –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', result);
        return result;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @param {Object} metrics - –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    updateKeyboardInterface(metrics) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateElementText('keyboard-events-hour', metrics.eventsPerHour);
        this.updateElementText('keyboard-total', metrics.totalEvents);
        this.updateElementText('keyboard-intensity', metrics.intensity);
        this.updateElementText('keyboard-events-per-minute', metrics.eventsPerMinute);
        this.updateElementText('total-keyboard-events', metrics.totalEvents);
        this.updateElementText('keyboard-intensity-text', metrics.intensity);
        this.updateElementText('peak-keyboard-activity', `${metrics.eventsPerMinute} —Å–æ–±/–º–∏–Ω`);
        this.updateElementText('peak-keyboard-time', metrics.lastEventTime);
        this.updateElementText('avg-keyboard-activity', `${metrics.eventsPerHour} —Å–æ–±/—á–∞—Å`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        const statusElement = document.getElementById('keyboard-status');
        if (statusElement) {
            let statusText = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
            
            if (metrics.intensity === '–£—Å—Ç–∞—Ä–µ–ª–æ') {
                statusText = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            } else if (metrics.totalEvents > 0) {
                statusText = '–ê–∫—Ç–∏–≤–Ω–∞';
            } else {
                statusText = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'; // –†–µ–∞–ª—å–Ω—ã–π 0, –Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
            }
            
            statusElement.textContent = statusText;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        if (metrics.intensity === '–£—Å—Ç–∞—Ä–µ–ª–æ') {
            this.updateIntensityIndicator(0, true); // –û—Å–æ–±—ã–π —Ä–µ–∂–∏–º –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        } else {
            this.updateIntensityIndicator(metrics.eventsPerMinute, false);
        }

        console.log('üéπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å keyboard –º–µ—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', metrics);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
     * @param {string} elementId - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {*} value - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    updateElementText(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
     * @param {number} eventsPerMinute - —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—É
     * @param {boolean} isOutdated - —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ
     */
    updateIntensityIndicator(eventsPerMinute, isOutdated = false) {
        const indicator = document.getElementById('keyboard-indicator');
        const intensityBar = document.getElementById('keyboard-intensity-bar');
        
        let intensityClass = 'low';
        
        if (isOutdated) {
            intensityClass = 'outdated';
        } else if (eventsPerMinute > 50) {
            intensityClass = 'very-high';
        } else if (eventsPerMinute > 30) {
            intensityClass = 'high';
        } else if (eventsPerMinute > 15) {
            intensityClass = 'medium';
        } else if (eventsPerMinute > 5) {
            intensityClass = 'low';
        } else {
            intensityClass = 'inactive';
        }

        if (indicator) {
            indicator.className = `indicator-dot ${intensityClass}`;
        }
        
        if (intensityBar) {
            intensityBar.className = `intensity-fill ${intensityClass}`;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    updateInterfaceWithEmptyData() {
        const emptyMetrics = {
            totalEvents: 0,
            eventsPerHour: 0,
            eventsPerMinute: 0,
            peakActivity: 0,
            intensity: '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
            lastEventTime: '-',
            isActive: false
        };
        
        this.updateKeyboardInterface(emptyMetrics);
        console.log('üéπ Keyboard –º–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    updateInterfaceWithOutdatedData() {
        const outdatedMetrics = {
            totalEvents: '-',
            eventsPerHour: '-',
            eventsPerMinute: '-',
            peakActivity: '-',
            intensity: '–£—Å—Ç–∞—Ä–µ–ª–æ',
            lastEventTime: '-',
            isActive: false
        };
        this.updateKeyboardInterface(outdatedMetrics);
        console.log('üéπ Keyboard –º–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è
     */
    initTestData() {
        console.log('üéπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö keyboard –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        
        const testData = [
            { event: 'a', timestamp: new Date(Date.now() - 60000).toISOString() },
            { event: 'b', timestamp: new Date(Date.now() - 55000).toISOString() },
            { event: 'Space', timestamp: new Date(Date.now() - 50000).toISOString() },
            { event: 'Enter', timestamp: new Date(Date.now() - 45000).toISOString() },
            { event: 'c', timestamp: new Date(Date.now() - 40000).toISOString() },
            { event: 'd', timestamp: new Date(Date.now() - 35000).toISOString() },
            { event: 'e', timestamp: new Date(Date.now() - 30000).toISOString() },
            { event: 'Backspace', timestamp: new Date(Date.now() - 25000).toISOString() },
            { event: 'f', timestamp: new Date(Date.now() - 20000).toISOString() },
            { event: 'Tab', timestamp: new Date(Date.now() - 15000).toISOString() },
            { event: 'g', timestamp: new Date(Date.now() - 10000).toISOString() },
            { event: 'h', timestamp: new Date(Date.now() - 5000).toISOString() }
        ];

        this.updateKeyboardMetrics(testData);
        console.log('üéπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ keyboard –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
window.smartKeyboardMetrics = new SmartKeyboardMetrics();

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å dashboard.js)
window.updateKeyboardMetrics = function(data) {
    if (window.smartKeyboardMetrics) {
        window.smartKeyboardMetrics.updateKeyboardMetrics(data);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéπ Smart Keyboard Metrics Module –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    // –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: window.smartKeyboardMetrics.initTestData();
}); 