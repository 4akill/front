/**
 * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –•–û–¢–§–ò–ö–° –†–ê–°–ß–ï–¢–ê –í–†–ï–ú–ï–ù–ò
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç-–∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ smart-time-calculator.js
 * –ê–≤—Ç–æ—Ä: AI Assistant, –¥–∞—Ç–∞: 2025-01-07, –≤–µ—Ä—Å–∏—è: v1.0
 * 
 * –ü–†–û–ë–õ–ï–ú–ê: –ê–ª–≥–æ—Ä–∏—Ç–º —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
 * –†–ï–®–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ—Ç-–∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */

(function() {
    'use strict';
    
    console.log('üö® –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ—Ç—Ñ–∏–∫—Å —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateMainMetricsWithRealActivity
    const originalFunction = window.updateMainMetricsWithRealActivity;
    
    if (originalFunction) {
        window.updateMainMetricsWithRealActivity = function(windowData, mouseData = null) {
            console.log('üö® [–•–û–¢–§–ò–ö–°] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏');
            
            if (!windowData || windowData.length === 0) {
                console.warn('‚ö†Ô∏è [–•–û–¢–§–ò–ö–°] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö windowData');
                return;
            }
            
            // 1. –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ú–ê–®–ò–ù–ù–û–ì–û –í–†–ï–ú–ï–ù–ò
            const validActivities = windowData.filter(activity => {
                const appName = activity.app_name || activity.application || '';
                const isBackground = ['TextInputHost.exe', 'dwm.exe', 'winlogon.exe', 'csrss.exe', 'lsass.exe', 'spoolsv.exe'].includes(appName);
                return !isBackground;
            });
            
            if (validActivities.length === 0) {
                console.warn('‚ö†Ô∏è [–•–û–¢–§–ò–ö–°] –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const sortedActivities = validActivities.sort((a, b) => {
                return new Date(a.timestamp) - new Date(b.timestamp);
            });
            
            // –í—ã—á–∏—Å–ª—è–µ–º –†–ï–ê–õ–¨–ù–û–ï –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ (–æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
            const firstActivity = sortedActivities[0];
            const lastActivity = sortedActivities[sortedActivities.length - 1];
            
            const firstTime = new Date(firstActivity.timestamp);
            const lastTime = new Date(lastActivity.timestamp);
            const lastDuration = parseInt(lastActivity.duration) || 0;
            const lastEndTime = new Date(lastTime.getTime() + lastDuration * 1000);
            
            // –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ê–®–ò–ù–ù–û–ï –í–†–ï–ú–Ø!
            const realSessionTimeMs = lastEndTime - firstTime;
            const realSessionTimeMinutes = Math.round(realSessionTimeMs / (1000 * 60));
            
            console.log(`üö® [–•–û–¢–§–ò–ö–°] –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏:`);
            console.log(`   üìÖ –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${firstActivity.app_name} –≤ ${firstTime.toLocaleTimeString()}`);
            console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity.app_name} –≤ ${lastTime.toLocaleTimeString()} - ${lastEndTime.toLocaleTimeString()}`);
            console.log(`   ‚è∞ –ü–†–ê–í–ò–õ–¨–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${realSessionTimeMinutes}–º (${Math.floor(realSessionTimeMinutes/60)}—á ${realSessionTimeMinutes%60}–º)`);
            
            // 2. –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ú–´–®–ò
            const mouseActivityMap = new Map();
            if (mouseData && mouseData.length > 0) {
                mouseData.forEach(mouseEntry => {
                    const date = new Date(mouseEntry.timestamp);
                    const minuteKey = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}-${date.getHours()}-${date.getMinutes()}`;
                    
                    if (!mouseActivityMap.has(minuteKey)) {
                        mouseActivityMap.set(minuteKey, { clicks: 0, movements: 0 });
                    }
                    
                    const activity = mouseActivityMap.get(minuteKey);
                    activity.clicks += parseInt(mouseEntry.mouse_clicks) || 0;
                    activity.movements += parseInt(mouseEntry.mouse_movements) || 0;
                });
            }
            
            // 3. –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –ú–ò–ù–£–¢–ê–ú (–¢–û–õ–¨–ö–û –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–µ/–ø–∞—Å—Å–∏–≤–Ω–æ–µ)
            const uniqueTimeSlots = new Set();
            let activeMinutes = 0;
            let passiveMinutes = 0;
            
            validActivities.forEach(activity => {
                const startTime = new Date(activity.timestamp);
                const duration = parseInt(activity.duration) || 60;
                const endTime = new Date(startTime.getTime() + duration * 1000);
                
                // –°–æ–∑–¥–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                for (let currentTime = new Date(startTime); currentTime < endTime; currentTime.setMinutes(currentTime.getMinutes() + 1)) {
                    const minuteKey = `${currentTime.getFullYear()}-${currentTime.getMonth()}-${currentTime.getDate()}-${currentTime.getHours()}-${currentTime.getMinutes()}`;
                    uniqueTimeSlots.add(minuteKey);
                }
            });
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–∏–Ω—É—Ç—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
            uniqueTimeSlots.forEach(minuteKey => {
                const mouseActivity = mouseActivityMap.get(minuteKey) || { clicks: 0, movements: 0 };
                const hasMouseActivity = mouseActivity.clicks > 0 || mouseActivity.movements >= 10;
                
                if (hasMouseActivity) {
                    activeMinutes++;
                } else {
                    passiveMinutes++;
                }
            });
            
            // 4. –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò
            const activityPercent = realSessionTimeMinutes > 0 ? Math.round((activeMinutes / realSessionTimeMinutes) * 100) : 0;
            
            console.log(`üö® [–•–û–¢–§–ò–ö–°] –ü–†–ê–í–ò–õ–¨–ù–´–ï –º–µ—Ç—Ä–∏–∫–∏:`);
            console.log(`   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: ${realSessionTimeMinutes}–º`);
            console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç: ${activeMinutes}–º`);
            console.log(`   üò¥ –ü–∞—Å—Å–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç: ${passiveMinutes}–º`);
            console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activityPercent}%`);
            
            // 5. –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
            const correctedData = {
                activities: validActivities,
                mouse_activity: mouseData || [],
                website_visits: [],
                browser_activity: [],
                real_activity_stats: {
                    total_time: realSessionTimeMinutes,           // –ü–†–ê–í–ò–õ–¨–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è
                    active_time: activeMinutes,                   // –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
                    passive_time: passiveMinutes,                 // –ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
                    activity_ratio: realSessionTimeMinutes > 0 ? activeMinutes / realSessionTimeMinutes : 0,
                    productive_time: activeMinutes,               // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ = –∞–∫—Ç–∏–≤–Ω–æ–µ
                    productivity_score: activityPercent           // –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                }
            };
            
            console.log('üö® [–•–û–¢–§–ò–ö–°] –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            
            // –í—ã–∑—ã–≤–∞–µ–º updateMetrics —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (window.updateMetrics) {
                window.updateMetrics(correctedData);
            }
            
            return correctedData;
        };
        
        console.log('üö® [–•–û–¢–§–ò–ö–°] –§—É–Ω–∫—Ü–∏—è updateMainMetricsWithRealActivity –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é');
    }
    
    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ—Ç—Ñ–∏–∫—Å —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω');
    
})(); 