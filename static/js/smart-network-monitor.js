/**
 * Smart Network Monitor - –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * 
 * @version 1.0.0
 * @author AI Assistant
 * @date 2024-01-20
 * @description –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ñ–∏–∫–∞
 * - –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
 */

class SmartNetworkMonitor {
    constructor() {
        this.lastUpdateTime = null;
        this.previousData = null;
        this.maxRecordedSpeed = 0;
        
        console.log('üåê Smart Network Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @param {Array} networkData - –î–∞–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateNetworkMetrics(networkData) {
        console.log('üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:', networkData);
        
        if (!networkData || networkData.length === 0) {
            this._showNoDataState();
            return;
        }

        try {
            const metrics = this._calculateNetworkMetrics(networkData);
            this._updateUI(metrics);
            
            console.log('‚úÖ –°–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', metrics);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:', error);
            this._showErrorState();
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @private
     */
    _calculateNetworkMetrics(networkData) {
        let totalSent = 0;
        let totalReceived = 0;
        let currentSpeed = 0;
        let lastUpdate = null;

        networkData.forEach((entry, index) => {
            const sent = parseInt(entry.bytes_sent || 0);
            const received = parseInt(entry.bytes_received || 0);
            
            totalSent += sent;
            totalReceived += received;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            if (index > 0) {
                const prevEntry = networkData[index - 1];
                const timeDiff = new Date(entry.timestamp) - new Date(prevEntry.timestamp);
                const bytesDiff = (sent + received) - (parseInt(prevEntry.bytes_sent || 0) + parseInt(prevEntry.bytes_received || 0));
                
                if (timeDiff > 0) {
                    // –°–∫–æ—Ä–æ—Å—Ç—å –≤ Mbps
                    const speedMbps = (bytesDiff * 8) / (timeDiff / 1000) / (1024 * 1024);
                    currentSpeed = Math.max(currentSpeed, speedMbps);
                }
            }
            
            lastUpdate = entry.timestamp;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        this.maxRecordedSpeed = Math.max(this.maxRecordedSpeed, currentSpeed);

        return {
            totalSent,
            totalReceived,
            currentSpeed: Math.min(currentSpeed, 1000), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            maxSpeed: this.maxRecordedSpeed,
            totalTraffic: totalSent + totalReceived,
            ratio: totalReceived > 0 ? (totalSent / totalReceived) : 0,
            isActive: currentSpeed > 0.1,
            lastUpdate
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @private
     */
    _updateUI(metrics) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this._updateElement('current-network-speed', metrics.currentSpeed.toFixed(1));
        this._updateElement('network-upload', this._formatBytes(metrics.totalSent));
        this._updateElement('network-download', this._formatBytes(metrics.totalReceived));
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this._updateElement('peak-network-speed', `${metrics.maxSpeed.toFixed(1)} Mbps`);
        this._updateElement('total-network-traffic', this._formatBytes(metrics.totalTraffic, 'GB'));
        this._updateElement('network-ratio', `${metrics.ratio.toFixed(2)}:1`);
        
        // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this._updateElement('network-status-text', metrics.isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        this._updateNetworkIndicator(metrics.isActive ? 'active' : 'idle');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
     * @private
     */
    _showNoDataState() {
        this._updateElement('current-network-speed', '0');
        this._updateElement('network-upload', '0 MB');
        this._updateElement('network-download', '0 MB');
        this._updateElement('network-status-text', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        this._updateElement('peak-network-speed', '0 Mbps');
        this._updateElement('total-network-traffic', '0 GB');
        this._updateElement('network-ratio', '-');
        
        this._updateNetworkIndicator('offline');
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
     * @private
     */
    _showErrorState() {
        this._updateElement('network-status-text', '–û—à–∏–±–∫–∞');
        this._updateNetworkIndicator('error');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @private
     */
    _updateElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @private
     */
    _updateNetworkIndicator(status) {
        const indicator = document.getElementById('network-indicator');
        if (indicator) {
            indicator.className = `indicator-dot ${status}`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
     * @private
     */
    _formatBytes(bytes, forceUnit = null) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        
        if (forceUnit) {
            const unitIndex = sizes.indexOf(forceUnit);
            if (unitIndex > 0) {
                const value = bytes / Math.pow(k, unitIndex);
                return `${value.toFixed(2)} ${forceUnit}`;
            }
        }
        
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        const value = bytes / Math.pow(k, i);
        
        return `${value.toFixed(i > 1 ? 2 : 0)} ${sizes[i]}`;
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    reset() {
        this.maxRecordedSpeed = 0;
        this.previousData = null;
        this.lastUpdateTime = null;
        
        console.log('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
     */
    getCurrentMetrics() {
        return {
            maxSpeed: this.maxRecordedSpeed,
            lastUpdate: this.lastUpdateTime
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
window.smartNetworkMonitor = new SmartNetworkMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.updateNetworkMetrics = function(networkData) {
    window.smartNetworkMonitor.updateNetworkMetrics(networkData);
};

console.log('üì¶ Smart Network Monitor –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω'); 