/**
 * –£–ú–ù–´–ô –ú–ê–ü–ü–ò–ù–ì –£–°–¢–†–û–ô–°–¢–í
 * –ê–≤—Ç–æ—Ä: AI Assistant  
 * –î–∞—Ç–∞: 2025-01-27
 * –í–µ—Ä—Å–∏—è: v1.0
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ computer_name –≤ device_id –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 */

console.log('üîß [DEVICE MAPPING] –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å –º–∞–ø–ø–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

class SmartDeviceMapping {
    constructor() {
        this.deviceMapping = new Map(); // computer_name -> device_id
        this.deviceInfo = new Map(); // computer_name -> –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        this.lastUpdated = null;
        this.updateInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        console.log('üîß [DEVICE MAPPING] –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.updateDeviceMapping();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        setInterval(() => {
            this.updateDeviceMapping();
        }, this.updateInterval);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ API
     */
    async updateDeviceMapping() {
        try {
            console.log('üîÑ [DEVICE MAPPING] –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            const response = await fetch('/api/devices');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const devices = await response.json();
            console.log(`üìä [DEVICE MAPPING] –ü–æ–ª—É—á–µ–Ω–æ ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–∞–ø–ø–∏–Ω–≥
            this.deviceMapping.clear();
            this.deviceInfo.clear();
            
            // –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
            devices.forEach(device => {
                const computerName = device.computer_name;
                const deviceId = device.device_id;
                
                if (computerName && deviceId) {
                    this.deviceMapping.set(computerName, deviceId);
                    this.deviceInfo.set(computerName, device);
                    
                    console.log(`üîó [DEVICE MAPPING] ${computerName} -> ${deviceId}`);
                }
            });
            
            this.lastUpdated = new Date();
            console.log(`‚úÖ [DEVICE MAPPING] –ú–∞–ø–ø–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${this.deviceMapping.size} –∑–∞–ø–∏—Å–µ–π`);
            
        } catch (error) {
            console.error('‚ùå [DEVICE MAPPING] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞:', error);
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç computer_name –≤ device_id –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
     * @param {string} computerName - –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
     * @returns {string|null} - device_id –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    getDeviceId(computerName) {
        if (!computerName) return null;
        
        const deviceId = this.deviceMapping.get(computerName);
        
        if (deviceId) {
            console.log(`üîç [DEVICE MAPPING] ${computerName} -> ${deviceId}`);
            return deviceId;
        } else {
            console.warn(`‚ö†Ô∏è [DEVICE MAPPING] –ù–µ –Ω–∞–π–¥–µ–Ω device_id –¥–ª—è computer_name: ${computerName}`);
            return computerName; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ computer_name
     * @param {string} computerName - –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞  
     * @returns {Object|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ null
     */
    getDeviceInfo(computerName) {
        return this.deviceInfo.get(computerName) || null;
    }
    
    /**
     * –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –∑–∞–ø—Ä–æ—Å–∞, –∑–∞–º–µ–Ω—è—è computer_name –Ω–∞ device_id
     * @param {URLSearchParams} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
     * @returns {URLSearchParams} - –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    mapApiParams(params) {
        // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä device_id
        const deviceParam = params.get('device_id');
        
        if (deviceParam) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ device_id (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å—ã/guid)
            const isGuid = deviceParam.includes('-') && deviceParam.length > 10;
            
            if (!isGuid) {
                // –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ computer_name, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ device_id
                const actualDeviceId = this.getDeviceId(deviceParam);
                if (actualDeviceId && actualDeviceId !== deviceParam) {
                    params.set('device_id', actualDeviceId);
                    console.log(`üîÑ [DEVICE MAPPING] API –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω: ${deviceParam} -> ${actualDeviceId}`);
                }
            }
        }
        
        return params;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–∞
     */
    getStats() {
        return {
            totalMappings: this.deviceMapping.size,
            lastUpdated: this.lastUpdated,
            devices: Array.from(this.deviceMapping.entries()).map(([computerName, deviceId]) => ({
                computerName,
                deviceId,
                info: this.deviceInfo.get(computerName)
            }))
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.smartDeviceMapping = new SmartDeviceMapping();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
window.getDeviceIdForAPI = function(computerName) {
    return window.smartDeviceMapping.getDeviceId(computerName);
};

window.mapApiParams = function(params) {
    return window.smartDeviceMapping.mapApiParams(params);
};

// –•–µ–ª–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ fetch –∑–∞–ø—Ä–æ—Å–æ–≤
window.fetchWithDeviceMapping = async function(url, options = {}) {
    // –ü–∞—Ä—Å–∏–º URL –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const urlObj = new URL(url, window.location.origin);
    const params = new URLSearchParams(urlObj.search);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
    const mappedParams = window.smartDeviceMapping.mapApiParams(params);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    urlObj.search = mappedParams.toString();
    const finalUrl = urlObj.toString();
    
    if (finalUrl !== url) {
        console.log(`üîÑ [DEVICE MAPPING] URL –∏–∑–º–µ–Ω–µ–Ω: ${url} -> ${finalUrl}`);
    }
    
    return fetch(finalUrl, options);
};

console.log('‚úÖ [DEVICE MAPPING] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.showDeviceMapping = function() {
    const stats = window.smartDeviceMapping.getStats();
    console.log('üìä [DEVICE MAPPING] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞:', stats);
    return stats;
};

console.log('üîß [DEVICE MAPPING] –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: showDeviceMapping()'); 