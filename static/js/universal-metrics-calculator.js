/**
 * –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ï–¢–†–ò–ö
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2025-01-24
 * –í–µ—Ä—Å–∏—è: v1.0
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª—é–±—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–∞–∂–µ –±–µ–∑ duration
 */

console.log('üßÆ [UNIVERSAL-CALC] –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ v1.0');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
 * @param {Array} data - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {string} selectedDate - –î–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Object} - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function calculateUniversalMetrics(data, selectedDate = null) {
    console.log('üßÆ [UNIVERSAL-CALC] –†–∞—Å—á–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è', data.length, '–∑–∞–ø–∏—Å–µ–π');
    
    if (!data || data.length === 0) {
        console.warn('‚ö†Ô∏è [UNIVERSAL-CALC] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
        return getZeroMetrics();
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    let filteredData = data;
    if (selectedDate) {
        filteredData = data.filter(activity => {
            const timeField = activity.timestamp || activity.start_time;
            if (!timeField) return false;
            
            try {
                const activityDate = new Date(timeField).toISOString().split('T')[0];
                return activityDate === selectedDate;
            } catch (e) {
                return false;
            }
        });
        
        console.log(`üìÖ [UNIVERSAL-CALC] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ ${selectedDate}: ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
    }
    
    if (filteredData.length === 0) {
        console.warn(`‚ö†Ô∏è [UNIVERSAL-CALC] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–∞—Ç—É ${selectedDate}`);
        return getZeroMetrics();
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const dataStructure = analyzeDataStructure(filteredData.slice(0, 10));
    console.log('üîç [UNIVERSAL-CALC] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', dataStructure);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const metrics = calculateMetricsFromStructure(filteredData, dataStructure);
    
    console.log('üìä [UNIVERSAL-CALC] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', {
        totalTime: formatTimeFromSeconds(metrics.totalTime),
        productiveTime: formatTimeFromSeconds(metrics.productiveTime),
        backgroundTime: formatTimeFromSeconds(metrics.backgroundTime),
        productivity: `${metrics.productivity}%`,
        recordsCount: metrics.recordsCount
    });
    
    return metrics;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
 */
function analyzeDataStructure(sample) {
    const structure = {
        hasDuration: false,
        hasTimestamp: false,
        hasAppName: false,
        durationField: null,
        timestampField: null,
        appNameField: null,
        sampleRecord: sample[0] || {}
    };
    
    if (sample.length === 0) return structure;
    
    const firstRecord = sample[0];
    
    // –ò—â–µ–º –ø–æ–ª–µ duration
    const durationFields = ['duration', 'time_spent', 'elapsed_time', 'session_duration'];
    for (const field of durationFields) {
        if (firstRecord[field] !== undefined) {
            structure.hasDuration = true;
            structure.durationField = field;
            break;
        }
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ timestamp
    const timestampFields = ['timestamp', 'start_time', 'created_at', 'time'];
    for (const field of timestampFields) {
        if (firstRecord[field] !== undefined) {
            structure.hasTimestamp = true;
            structure.timestampField = field;
            break;
        }
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ app_name
    const appNameFields = ['app_name', 'application', 'process_name', 'program'];
    for (const field of appNameFields) {
        if (firstRecord[field] !== undefined) {
            structure.hasAppName = true;
            structure.appNameField = field;
            break;
        }
    }
    
    return structure;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
 */
function calculateMetricsFromStructure(data, structure) {
    let totalTime = 0;
    let productiveTime = 0;
    let backgroundTime = 0;
    let activeRecords = 0;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å duration, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (structure.hasDuration && structure.durationField) {
        console.log('üìä [UNIVERSAL-CALC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ duration:', structure.durationField);
        
        data.forEach(record => {
            let duration = parseInt(record[structure.durationField]) || 0;
            
            // –ï—Å–ª–∏ duration = 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (duration === 0) {
                duration = 60000; // 60 —Å–µ–∫—É–Ω–¥ –≤ –º—Å
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ —ç—Ç–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            if (duration > 10000) {
                duration = Math.round(duration / 1000);
            }
            
            totalTime += duration;
            activeRecords++;
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            const category = classifyActivity(record, structure);
            if (category === 'productive') {
                productiveTime += duration;
            } else if (category === 'background') {
                backgroundTime += duration;
            } else {
                // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - 50% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                productiveTime += duration * 0.5;
            }
        });
        
    } else {
        console.log('üìä [UNIVERSAL-CALC] Duration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π');
        
        // –ï—Å–ª–∏ –Ω–µ—Ç duration, —Å—á–∏—Ç–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
        const timeBasedMetrics = calculateTimeBasedMetrics(data, structure);
        totalTime = timeBasedMetrics.totalTime;
        productiveTime = timeBasedMetrics.productiveTime;
        backgroundTime = timeBasedMetrics.backgroundTime;
        activeRecords = data.length;
    }
    
    const productivity = totalTime > 0 ? Math.round((productiveTime / totalTime) * 100) : 0;
    
    return {
        totalTime: Math.round(totalTime),
        productiveTime: Math.round(productiveTime),
        backgroundTime: Math.round(backgroundTime),
        productivity,
        recordsCount: activeRecords,
        dataStructure: structure
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
 */
function calculateTimeBasedMetrics(data, structure) {
    console.log('‚è∞ [UNIVERSAL-CALC] –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏');
    
    if (!structure.hasTimestamp || data.length < 2) {
        // Fallback: —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ 1 –º–∏–Ω—É—Ç—É
        const totalRecords = data.length;
        const totalTime = totalRecords * 60; // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–∏—Å—å
        
        let productiveTime = 0;
        let backgroundTime = 0;
        
        data.forEach(record => {
            const category = classifyActivity(record, structure);
            if (category === 'productive') {
                productiveTime += 60;
            } else if (category === 'background') {
                backgroundTime += 60;
            } else {
                productiveTime += 30; // 50% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            }
        });
        
        return { totalTime, productiveTime, backgroundTime };
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedData = [...data].sort((a, b) => {
        const timeA = new Date(a[structure.timestampField]);
        const timeB = new Date(b[structure.timestampField]);
        return timeA - timeB;
    });
    
    let totalTime = 0;
    let productiveTime = 0;
    let backgroundTime = 0;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    for (let i = 0; i < sortedData.length - 1; i++) {
        const currentTime = new Date(sortedData[i][structure.timestampField]);
        const nextTime = new Date(sortedData[i + 1][structure.timestampField]);
        
        const intervalSeconds = Math.min((nextTime - currentTime) / 1000, 300); // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
        
        if (intervalSeconds > 0 && intervalSeconds <= 300) {
            totalTime += intervalSeconds;
            
            const category = classifyActivity(sortedData[i], structure);
            if (category === 'productive') {
                productiveTime += intervalSeconds;
            } else if (category === 'background') {
                backgroundTime += intervalSeconds;
            } else {
                productiveTime += intervalSeconds * 0.5;
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    totalTime += 60;
    const lastCategory = classifyActivity(sortedData[sortedData.length - 1], structure);
    if (lastCategory === 'productive') {
        productiveTime += 60;
    } else if (lastCategory === 'background') {
        backgroundTime += 60;
    } else {
        productiveTime += 30;
    }
    
    return { totalTime, productiveTime, backgroundTime };
}

/**
 * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é, —Ñ–æ–Ω–æ–≤—É—é –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é
 */
function classifyActivity(record, structure) {
    if (!structure.hasAppName || !structure.appNameField) {
        return 'neutral';
    }
    
    const appName = (record[structure.appNameField] || '').toLowerCase();
    
    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const productivePatterns = [
        'cursor', 'code', 'visual studio', 'pycharm', 'intellij',
        'firefox', 'chrome', 'edge', 'browser',
        'word', 'excel', 'powerpoint', 'office',
        'notepad', 'text', 'editor',
        'git', 'terminal', 'cmd', 'powershell'
    ];
    
    // –§–æ–Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const backgroundPatterns = [
        'video.ui', 'y.music', 'music', 'media',
        'nvidia', 'overlay', 'graphics',
        'texttInputhost', 'system', 'settings',
        'rdclient', 'remote', 'sndvol', 'volume',
        'calculator', 'calc', 'startup'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for (const pattern of productivePatterns) {
        if (appName.includes(pattern)) {
            return 'productive';
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for (const pattern of backgroundPatterns) {
        if (appName.includes(pattern)) {
            return 'background';
        }
    }
    
    return 'neutral';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function getZeroMetrics() {
    return {
        totalTime: 0,
        productiveTime: 0,
        backgroundTime: 0,
        productivity: 0,
        recordsCount: 0
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatTimeFromSeconds(seconds) {
    if (seconds === 0) return '0–º';
    
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours === 0) {
        return `${minutes}–º`;
    }
    return `${hours}—á ${minutes}–º`;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
function updateMetricsUniversal(data, selectedDate = null) {
    console.log('üßÆ [UNIVERSAL-CALC] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫');
    
    const metrics = calculateUniversalMetrics(data, selectedDate);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const elements = {
        '#total-working-time': formatTimeFromSeconds(metrics.totalTime),
        '#productive-time': formatTimeFromSeconds(metrics.productiveTime),
        '#activity-score': `${metrics.productivity}%`,
        '#break-time': formatTimeFromSeconds(metrics.backgroundTime)
    };
    
    Object.entries(elements).forEach(([selector, value]) => {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = value;
            console.log(`üìä [UNIVERSAL-CALC] –û–±–Ω–æ–≤–ª–µ–Ω ${selector}: ${value}`);
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
    const subtitles = {
        '#productive-time': `${metrics.productivity}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`,
        '#activity-score': `–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ ${metrics.recordsCount} –∑–∞–ø–∏—Å—è—Ö`,
        '#break-time': '–§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
    };
    
    Object.entries(subtitles).forEach(([selector, subtitle]) => {
        const element = document.querySelector(selector);
        if (element) {
            const subtitleElement = element.parentElement?.querySelector('.metric-subtitle');
            if (subtitleElement) {
                subtitleElement.textContent = subtitle;
            }
        }
    });
    
    console.log('‚úÖ [UNIVERSAL-CALC] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    return metrics;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.calculateUniversalMetrics = calculateUniversalMetrics;
window.updateMetricsUniversal = updateMetricsUniversal;

console.log('‚úÖ [UNIVERSAL-CALC] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω'); 