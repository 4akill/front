/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –≤—Å–µ –≤—Ä–µ–º—è –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
 */

const BACKGROUND_PROCESSES = [
    'NVIDIA Overlay.exe',
    'NVIDIA GeForce Overlay',
    'TextInputHost.exe',
    'RdClient.Windows.exe',
    'Video.UI.exe',
    '–ö–∏–Ω–æ –∏ –¢–í',
    'Y.Music.exe',
    'SystemSettings.exe',
    'GameCenter.exe',
    'dwm.exe',
    'explorer.exe',
    'winlogon.exe',
    'csrss.exe',
    'wininit.exe',
    'services.exe',
    'lsass.exe',
    'svchost.exe',
    'RuntimeBroker.exe',
    'ApplicationFrameHost.exe',
    'ShellExperienceHost.exe',
    'StartMenuExperienceHost.exe',
    'SearchUI.exe',
    'Taskmgr.exe',
    'MsMpEng.exe',
    'SecurityHealthSystray.exe',
    'WinStore.App.exe',
    'Microsoft.Photos.exe',
    'Calculator.exe'
];

function isBackgroundProcess(appName) {
    if (!appName) return false;
    const appNameLower = appName.toLowerCase();
    return BACKGROUND_PROCESSES.some(bg => {
        const bgLower = bg.toLowerCase();
        return appNameLower === bgLower || 
               appNameLower.includes(bgLower) || 
               bgLower.includes(appNameLower) ||
               (appNameLower.includes('nvidia') && bgLower.includes('nvidia')) ||
               (appNameLower.includes('video') && bgLower.includes('video')) ||
               (appNameLower.includes('–∫–∏–Ω–æ') && bgLower.includes('–∫–∏–Ω–æ')) ||
               (appNameLower.includes('overlay') && bgLower.includes('overlay'));
    });
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
const testApps = [
    'Cursor.exe',
    'msedge.exe', 
    'WorClient.exe',
    'GameCenter.exe',
    'Y.Music.exe',
    'NVIDIA Overlay.exe',
    'TextInputHost.exe',
    'explorer.exe',
    'notepad.exe',
    'Calculator.exe',
    'Code.exe',
    'firefox.exe',
    'chrome.exe',
    'brave.exe',
    'Photoshop.exe',
    'Word.exe',
    'Excel.exe',
    'PowerPoint.exe',
    'Slack.exe',
    'Teams.exe',
    'Discord.exe',
    'Spotify.exe',
    'VLC.exe',
    'Steam.exe'
];

console.log('üîç –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò');
console.log('=====================================');

console.log('üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–ô:');
testApps.forEach(app => {
    const isBackground = isBackgroundProcess(app);
    const type = isBackground ? 'üîÑ –§–û–ù' : '‚úÖ –ê–ö–¢–ò–í–ù–û–ï';
    console.log(`   ${app.padEnd(25)} : ${type}`);
});

console.log('');
console.log('üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
console.log('   1. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
console.log('   2. –ò–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
console.log('   3. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function analyzeRealData() {
    try {
        console.log('');
        console.log('üåê –ó–ê–ü–†–û–° –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó API...');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ 2025-07-15
        const response = await fetch('/api/public/activity/windows?start_date=2025-07-15&end_date=2025-07-15');
        
        if (!response.ok) {
            console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
            return;
        }
        
        const data = await response.json();
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ API`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const appStats = {};
        let totalDuration = 0;
        let backgroundDuration = 0;
        let activeDuration = 0;
        
        data.forEach(record => {
            const appName = record.app_name || record.application || 'Unknown';
            const duration = parseInt(record.duration) || 0;
            const isBackground = isBackgroundProcess(appName);
            
            if (duration > 0) {
                totalDuration += duration;
                
                if (isBackground) {
                    backgroundDuration += duration;
                } else {
                    activeDuration += duration;
                }
                
                if (!appStats[appName]) {
                    appStats[appName] = {
                        count: 0,
                        totalDuration: 0,
                        isBackground: isBackground
                    };
                }
                appStats[appName].count++;
                appStats[appName].totalDuration += duration;
            }
        });
        
        console.log('');
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–ô:');
        console.log(`   üìà –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}—Å = ${Math.round(totalDuration/60)}–º`);
        console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${activeDuration}—Å = ${Math.round(activeDuration/60)}–º`);
        console.log(`   üîÑ –§–æ–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: ${backgroundDuration}—Å = ${Math.round(backgroundDuration/60)}–º`);
        console.log(`   üìä –ê–∫—Ç–∏–≤–Ω–æ–µ: ${Math.round((activeDuration/totalDuration)*100)}%`);
        console.log(`   üìä –§–æ–Ω–æ–≤–æ–µ: ${Math.round((backgroundDuration/totalDuration)*100)}%`);
        
        console.log('');
        console.log('üì± –¢–û–ü –ü–†–ò–õ–û–ñ–ï–ù–ò–ô –ü–û –í–†–ï–ú–ï–ù–ò:');
        Object.entries(appStats)
            .sort(([,a], [,b]) => b.totalDuration - a.totalDuration)
            .slice(0, 10)
            .forEach(([appName, stats], index) => {
                const type = stats.isBackground ? 'üîÑ –§–û–ù' : '‚úÖ –ê–ö–¢–ò–í–ù–û–ï';
                const minutes = Math.round(stats.totalDuration / 60);
                console.log(`   ${(index+1).toString().padStart(2)}. ${appName.padEnd(25)} : ${stats.totalDuration.toString().padStart(4)}—Å (${minutes}–º) ${type}`);
            });
        
        console.log('');
        console.log('üîç –§–û–ù–û–í–´–ï –ü–†–û–¶–ï–°–°–´ –í –î–ê–ù–ù–´–•:');
        const backgroundApps = Object.entries(appStats)
            .filter(([, stats]) => stats.isBackground)
            .sort(([,a], [,b]) => b.totalDuration - a.totalDuration);
            
        if (backgroundApps.length === 0) {
            console.log('   ‚ùå –ù–ï–¢ –§–û–ù–û–í–´–• –ü–†–û–¶–ï–°–°–û–í –í –î–ê–ù–ù–´–•!');
            console.log('   üéØ –≠–¢–û –û–ë–™–Ø–°–ù–Ø–ï–¢ –ü–û–ß–ï–ú–£ –í–°–ï –í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–ï');
        } else {
            backgroundApps.forEach(([appName, stats]) => {
                const minutes = Math.round(stats.totalDuration / 60);
                console.log(`   üîÑ ${appName}: ${stats.totalDuration}—Å (${minutes}–º)`);
            });
        }
        
        console.log('');
        console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (backgroundApps.length === 0) {
            console.log('   1. –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            console.log('   2. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é');
            console.log('   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        } else {
            console.log('   1. –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞–π–¥–µ–Ω—ã');
            console.log('   2. –ê–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –≤ updateMainMetricsWithRealActivity');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.analyzeRealData = analyzeRealData;
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ Node.js
if (typeof module !== 'undefined') {
    module.exports = { analyzeRealData, isBackgroundProcess };
} 