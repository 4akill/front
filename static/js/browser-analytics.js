/**
 * üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤—Å–µ–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏: –±—Ä–∞—É–∑–µ—Ä—ã, –º—ã—à—å, —Ä–µ—Å—É—Ä—Å—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */

class BrowserAnalytics {
    constructor() {
        this.activeFilters = new Set();
        this.allData = {};
        this.syncedMetrics = {
            browsers: {},
            mouse: {},
            resources: {},
            activity: {},
            websites: {}
        };
        this.init();
    }

    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤...');
        this.createFilterButtons();
        this.setupEventListeners();
    }

    /**
     * üé® –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    createFilterButtons() {
        const browserStatsContainer = document.getElementById('browser-stats-container');
        if (!browserStatsContainer) return;

        const filtersHTML = `
            <div class="browser-analytics-panel">
                <div class="analytics-header">
                    <h5><i class="bi bi-graph-up-arrow"></i> –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h5>
                    <div class="analytics-status">
                        <span class="status-indicator active" id="sync-status">
                            <i class="bi bi-check-circle-fill"></i> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                        </span>
                    </div>
                </div>
                
                <div class="filter-controls">
                    <div class="filter-group">
                        <label class="filter-label">–†–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞:</label>
                        <div class="btn-group filter-buttons" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm filter-btn active" 
                                    data-filter="real-time" title="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π">
                                <i class="bi bi-clock"></i> –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm filter-btn" 
                                    data-filter="active-only" title="–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã">
                                <i class="bi bi-activity"></i> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm filter-btn" 
                                    data-filter="productive" title="–¢–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã">
                                <i class="bi bi-trophy"></i> –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            </button>
                            <button type="button" class="btn btn-outline-warning btn-sm filter-btn" 
                                    data-filter="cross-metrics" title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫">
                                <i class="bi bi-diagram-3"></i> –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑
                            </button>
                        </div>
                    </div>

                    <div class="filter-group">
                        <label class="filter-label">–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</label>
                        <div class="btn-group filter-buttons" role="group">
                            <button type="button" class="btn btn-outline-secondary btn-sm source-btn active" 
                                    data-source="browser" title="–î–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤">
                                <i class="bi bi-globe"></i> –ë—Ä–∞—É–∑–µ—Ä—ã
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm source-btn active" 
                                    data-source="mouse" title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏">
                                <i class="bi bi-mouse"></i> –ú—ã—à—å
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm source-btn active" 
                                    data-source="resources" title="–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã">
                                <i class="bi bi-cpu"></i> –†–µ—Å—É—Ä—Å—ã
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm source-btn active" 
                                    data-source="activity" title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π">
                                <i class="bi bi-window"></i> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            </button>
                        </div>
                    </div>

                    <div class="analytics-actions">
                        <button type="button" class="btn btn-primary btn-sm" id="apply-analytics">
                            <i class="bi bi-play-fill"></i> –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                        </button>
                        <button type="button" class="btn btn-outline-danger btn-sm" id="reset-analytics">
                            <i class="bi bi-arrow-clockwise"></i> –°–±—Ä–æ—Å
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm" id="export-analytics">
                            <i class="bi bi-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                        </button>
                    </div>
                </div>

                <div class="analytics-insights" id="analytics-insights">
                    <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–Ω—Å–∞–π—Ç—ã -->
                </div>
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–µ—Ä–µ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        browserStatsContainer.insertAdjacentHTML('afterbegin', filtersHTML);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addAnalyticsStyles();
    }

    /**
     * üé® –°—Ç–∏–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    addAnalyticsStyles() {
        const styles = `
            <style id="browser-analytics-styles">
                .browser-analytics-panel {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    color: white;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                }

                .analytics-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 20px;
                }

                .analytics-header h5 {
                    margin: 0;
                    font-weight: 600;
                    color: white;
                }

                .status-indicator {
                    display: flex;
                    align-items: center;
                    gap: 5px;
                    font-size: 0.9em;
                    padding: 5px 10px;
                    border-radius: 20px;
                    background: rgba(255,255,255,0.2);
                }

                .status-indicator.active {
                    background: rgba(40, 167, 69, 0.3);
                    color: #d4edda;
                }

                .filter-group {
                    margin-bottom: 15px;
                }

                .filter-label {
                    display: block;
                    margin-bottom: 8px;
                    font-weight: 500;
                    font-size: 0.9em;
                    color: rgba(255,255,255,0.9);
                }

                .filter-buttons {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 8px;
                }

                .filter-btn, .source-btn {
                    border-radius: 20px !important;
                    padding: 6px 12px !important;
                    font-size: 0.85em !important;
                    font-weight: 500 !important;
                    transition: all 0.3s ease !important;
                    border: 2px solid rgba(255,255,255,0.3) !important;
                    background: rgba(255,255,255,0.1) !important;
                    color: white !important;
                }

                .filter-btn:hover, .source-btn:hover {
                    background: rgba(255,255,255,0.2) !important;
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                }

                .filter-btn.active, .source-btn.active {
                    background: rgba(255,255,255,0.9) !important;
                    color: #667eea !important;
                    border-color: white !important;
                }

                .analytics-actions {
                    display: flex;
                    gap: 10px;
                    flex-wrap: wrap;
                    margin-top: 15px;
                }

                .analytics-actions .btn {
                    border-radius: 20px !important;
                    padding: 8px 16px !important;
                    font-weight: 500 !important;
                    transition: all 0.3s ease !important;
                }

                .analytics-insights {
                    margin-top: 20px;
                    padding: 15px;
                    background: rgba(255,255,255,0.1);
                    border-radius: 10px;
                    backdrop-filter: blur(10px);
                    display: none;
                }

                .insight-card {
                    background: rgba(255,255,255,0.15);
                    border-radius: 8px;
                    padding: 12px;
                    margin-bottom: 10px;
                    border-left: 4px solid #ffd700;
                }

                .insight-title {
                    font-weight: 600;
                    margin-bottom: 5px;
                    color: #ffd700;
                }

                .insight-value {
                    font-size: 1.1em;
                    font-weight: 500;
                }

                @media (max-width: 768px) {
                    .filter-buttons {
                        justify-content: center;
                    }
                    
                    .analytics-actions {
                        justify-content: center;
                    }
                }
            </style>
        `;

        if (!document.getElementById('browser-analytics-styles')) {
            document.head.insertAdjacentHTML('beforeend', styles);
        }
    }

    /**
     * üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                this.handleFilterClick(e.target);
            }
            if (e.target.classList.contains('source-btn')) {
                this.handleSourceClick(e.target);
            }
        });

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('apply-analytics')?.addEventListener('click', () => {
            this.applyAdvancedAnalytics();
        });

        document.getElementById('reset-analytics')?.addEventListener('click', () => {
            this.resetAnalytics();
        });

        document.getElementById('export-analytics')?.addEventListener('click', () => {
            this.exportAnalytics();
        });
    }

    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
     */
    handleFilterClick(button) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
        button.parentElement.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        button.classList.add('active');
        
        const filter = button.dataset.filter;
        this.activeFilters.clear();
        this.activeFilters.add(filter);
        
        console.log(`üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä: ${filter}`);
        this.updateSyncStatus();
    }

    /**
     * üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
     */
    handleSourceClick(button) {
        button.classList.toggle('active');
        const source = button.dataset.source;
        
        if (button.classList.contains('active')) {
            this.activeFilters.add(`source-${source}`);
        } else {
            this.activeFilters.delete(`source-${source}`);
        }
        
        console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫ ${source}: ${button.classList.contains('active') ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
        this.updateSyncStatus();
    }

    /**
     * üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async applyAdvancedAnalytics() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        
        this.updateSyncStatus('processing');
        
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            await this.collectAllMetrics();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.applyFilters();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.synchronizeMetrics();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
            this.displayInsights();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã
            this.updateAllVisualizations();
            
            this.updateSyncStatus('success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            this.updateSyncStatus('error');
        }
    }

    /**
     * üìà –°–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
     */
    async collectAllMetrics() {
        console.log('üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        const dashboardData = window.currentDashboardData || {};
        
        // –ë—Ä–∞—É–∑–µ—Ä—ã
        this.syncedMetrics.browsers = this.processBrowserData(
            dashboardData.browser_activity || dashboardData.website_visits || []
        );
        
        // –ú—ã—à—å
        this.syncedMetrics.mouse = this.processMouseData(
            dashboardData.mouse_activity || []
        );
        
        // –†–µ—Å—É—Ä—Å—ã
        this.syncedMetrics.resources = this.processResourceData(
            dashboardData.resource_usage || []
        );
        
        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        this.syncedMetrics.activity = this.processActivityData(
            dashboardData.activities || []
        );
        
        // –í–µ–±-—Å–∞–π—Ç—ã
        this.syncedMetrics.websites = this.processWebsiteData(
            dashboardData.website_visits || []
        );
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:', this.syncedMetrics);
    }

    /**
     * üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     */
    processBrowserData(browserData) {
        const processed = {
            sessions: {},
            totalTime: 0,
            realTime: 0,
            overlaps: [],
            productivity: {}
        };

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º
        const browserSessions = {};
        browserData.forEach(item => {
            const browserName = item.browser_name || item.browser || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä";
            if (!browserSessions[browserName]) {
                browserSessions[browserName] = [];
            }

            const duration = parseInt(item.total_time || item.duration || 0);
            const startTime = new Date(item.timestamp || item.start_time);
            const endTime = new Date(startTime.getTime() + duration * 1000);

            browserSessions[browserName].push({
                start: startTime,
                end: endTime,
                duration: duration,
                url: item.url || '',
                productive: this.isProductiveUrl(item.url)
            });
        });

        // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const allPeriods = [];
        Object.keys(browserSessions).forEach(browserName => {
            const sessions = browserSessions[browserName];
            sessions.forEach(session => {
                allPeriods.push({
                    ...session,
                    browser: browserName
                });
            });
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
        allPeriods.sort((a, b) => a.start - b.start);
        
        const mergedPeriods = [];
        let currentPeriod = null;

        allPeriods.forEach(period => {
            if (!currentPeriod) {
                currentPeriod = {
                    start: period.start,
                    end: period.end,
                    browsers: [period.browser],
                    productive: period.productive
                };
            } else {
                if (period.start <= currentPeriod.end) {
                    // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                    processed.overlaps.push({
                        browsers: [currentPeriod.browsers[0], period.browser],
                        start: period.start,
                        end: new Date(Math.min(currentPeriod.end.getTime(), period.end.getTime()))
                    });
                    
                    currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), period.end.getTime()));
                    if (!currentPeriod.browsers.includes(period.browser)) {
                        currentPeriod.browsers.push(period.browser);
                    }
                } else {
                    mergedPeriods.push(currentPeriod);
                    currentPeriod = {
                        start: period.start,
                        end: period.end,
                        browsers: [period.browser],
                        productive: period.productive
                    };
                }
            }
        });

        if (currentPeriod) {
            mergedPeriods.push(currentPeriod);
        }

        processed.sessions = browserSessions;
        processed.totalTime = Object.values(browserSessions).flat().reduce((sum, session) => sum + session.duration, 0);
        processed.realTime = mergedPeriods.reduce((total, period) => {
            return total + Math.floor((period.end - period.start) / 1000);
        }, 0);

        return processed;
    }

    /**
     * üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º—ã—à–∏
     */
    processMouseData(mouseData) {
        return {
            totalClicks: mouseData.reduce((sum, item) => sum + (item.clicks || 0), 0),
            totalDistance: mouseData.reduce((sum, item) => sum + (item.distance || 0), 0),
            activeTime: mouseData.length * 60, // –ø—Ä–∏–º–µ—Ä–Ω–æ
            patterns: this.analyzeMousePatterns(mouseData)
        };
    }

    /**
     * üíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    processResourceData(resourceData) {
        if (!resourceData.length) return { cpu: 0, memory: 0, disk: 0 };
        
        return {
            cpu: resourceData.reduce((sum, item) => sum + (item.cpu_usage || 0), 0) / resourceData.length,
            memory: resourceData.reduce((sum, item) => sum + (item.memory_usage || 0), 0) / resourceData.length,
            disk: resourceData.reduce((sum, item) => sum + (item.disk_usage || 0), 0) / resourceData.length,
            peaks: this.findResourcePeaks(resourceData)
        };
    }

    /**
     * üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    processActivityData(activityData) {
        const productive = activityData.filter(item => item.is_productive);
        const neutral = activityData.filter(item => !item.is_productive && !item.is_break);
        const breaks = activityData.filter(item => item.is_break);

        return {
            total: activityData.length,
            productive: productive.length,
            neutral: neutral.length,
            breaks: breaks.length,
            productivityScore: productive.length / Math.max(activityData.length, 1) * 100
        };
    }

    /**
     * üåç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤
     */
    processWebsiteData(websiteData) {
        const domains = {};
        websiteData.forEach(visit => {
            try {
                const domain = new URL(visit.url).hostname;
                if (!domains[domain]) {
                    domains[domain] = { visits: 0, productive: this.isProductiveUrl(visit.url) };
                }
                domains[domain].visits++;
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
            }
        });

        return {
            totalVisits: websiteData.length,
            uniqueDomains: Object.keys(domains).length,
            domains: domains,
            productiveVisits: Object.values(domains).filter(d => d.productive).reduce((sum, d) => sum + d.visits, 0)
        };
    }

    /**
     * üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applyFilters() {
        console.log('üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', Array.from(this.activeFilters));
        
        if (this.activeFilters.has('active-only')) {
            this.filterActivePeriodsOnly();
        }
        
        if (this.activeFilters.has('productive')) {
            this.filterProductiveOnly();
        }
        
        if (this.activeFilters.has('cross-metrics')) {
            this.applyCrossMetricsAnalysis();
        }
    }

    /**
     * üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
     */
    synchronizeMetrics() {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫...');
        
        // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        const commonPeriods = this.findCommonTimePeriods();
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        this.adjustMetricsByCommonPeriods(commonPeriods);
        
        console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * üí° –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤
     */
    displayInsights() {
        const insightsContainer = document.getElementById('analytics-insights');
        if (!insightsContainer) return;

        const insights = this.generateInsights();
        
        insightsContainer.innerHTML = insights.map(insight => `
            <div class="insight-card">
                <div class="insight-title">${insight.title}</div>
                <div class="insight-value">${insight.value}</div>
            </div>
        `).join('');
        
        insightsContainer.style.display = 'block';
    }

    /**
     * üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
     */
    generateInsights() {
        const insights = [];
        
        // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        const realTime = this.syncedMetrics.browsers.realTime;
        const totalTime = this.syncedMetrics.browsers.totalTime;
        const efficiency = realTime > 0 ? ((realTime / totalTime) * 100).toFixed(1) : 0;
        
        insights.push({
            title: '‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏',
            value: `${efficiency}% (${this.formatDuration(realTime)} –∏–∑ ${this.formatDuration(totalTime)})`
        });
        
        // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        const overlaps = this.syncedMetrics.browsers.overlaps.length;
        if (overlaps > 0) {
            insights.push({
                title: 'üîÑ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π',
                value: `${overlaps} –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–æ–≤`
            });
        }
        
        // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const productivityScore = this.syncedMetrics.activity.productivityScore || 0;
        insights.push({
            title: 'üéØ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            value: `${productivityScore.toFixed(1)}% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`
        });
        
        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
        const mouseClicks = this.syncedMetrics.mouse.totalClicks || 0;
        if (mouseClicks > 0) {
            insights.push({
                title: 'üñ±Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏',
                value: `${mouseClicks} –∫–ª–∏–∫–æ–≤, ${(this.syncedMetrics.mouse.totalDistance || 0).toFixed(0)}px –ø—Ä–æ–π–¥–µ–Ω–æ`
            });
        }
        
        return insights;
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
     */
    updateAllVisualizations() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const totalBrowserTimeElement = document.getElementById('total-browser-time');
        if (totalBrowserTimeElement) {
            totalBrowserTimeElement.textContent = this.formatDuration(this.syncedMetrics.browsers.realTime);
            totalBrowserTimeElement.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
            totalBrowserTimeElement.style.color = 'white';
            totalBrowserTimeElement.style.padding = '5px 10px';
            totalBrowserTimeElement.style.borderRadius = '15px';
            totalBrowserTimeElement.style.fontWeight = 'bold';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.animateUpdate();
    }

    /**
     * ‚ú® –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    animateUpdate() {
        const elements = [
            document.getElementById('browser-chart'),
            document.getElementById('top-browsers-table'),
            document.getElementById('total-browser-time')
        ].filter(el => el);
        
        elements.forEach(el => {
            el.style.transform = 'scale(0.98)';
            el.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                el.style.transform = 'scale(1)';
                el.style.boxShadow = '0 0 20px rgba(102, 126, 234, 0.3)';
                
                setTimeout(() => {
                    el.style.boxShadow = '';
                }, 1000);
            }, 100);
        });
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    updateSyncStatus(status = 'active') {
        const statusElement = document.getElementById('sync-status');
        if (!statusElement) return;
        
        statusElement.className = `status-indicator ${status}`;
        
        const statusConfig = {
            active: { icon: 'check-circle-fill', text: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', color: '#28a745' },
            processing: { icon: 'arrow-repeat', text: '–û–±—Ä–∞–±–æ—Ç–∫–∞...', color: '#ffc107' },
            error: { icon: 'exclamation-triangle-fill', text: '–û—à–∏–±–∫–∞', color: '#dc3545' },
            success: { icon: 'check-circle-fill', text: '–ì–æ—Ç–æ–≤–æ!', color: '#28a745' }
        };
        
        const config = statusConfig[status] || statusConfig.active;
        statusElement.innerHTML = `<i class="bi bi-${config.icon}"></i> ${config.text}`;
        statusElement.style.background = `rgba(${this.hexToRgb(config.color)}, 0.3)`;
    }

    /**
     * üé® –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return hours > 0 ? `${hours}—á ${minutes}–º` : `${minutes}–º`;
    }

    isProductiveUrl(url) {
        if (!url) return false;
        const productiveDomains = ['github.com', 'stackoverflow.com', 'docs.', 'developer.', 'learn.'];
        return productiveDomains.some(domain => url.includes(domain));
    }

    hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? 
            `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : 
            '40, 167, 69';
    }

    /**
     * üîÑ –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    resetAnalytics() {
        console.log('üîÑ –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        
        this.activeFilters.clear();
        this.activeFilters.add('real-time');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelector('[data-filter="real-time"]')?.classList.add('active');
        
        document.querySelectorAll('.source-btn').forEach(btn => btn.classList.add('active'));
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
        const insightsContainer = document.getElementById('analytics-insights');
        if (insightsContainer) {
            insightsContainer.style.display = 'none';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (window.refreshData) {
            window.refreshData();
        }
        
        this.updateSyncStatus('active');
    }

    /**
     * üì• –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    exportAnalytics() {
        console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        
        const exportData = {
            timestamp: new Date().toISOString(),
            filters: Array.from(this.activeFilters),
            metrics: this.syncedMetrics,
            insights: this.generateInsights()
        };
        
        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `browser-analytics-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    analyzeMousePatterns(mouseData) { return {}; }
    findResourcePeaks(resourceData) { return []; }
    filterActivePeriodsOnly() { console.log('üéØ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã'); }
    filterProductiveOnly() { console.log('üéØ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ'); }
    applyCrossMetricsAnalysis() { console.log('üéØ –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫'); }
    findCommonTimePeriods() { return []; }
    adjustMetricsByCommonPeriods(periods) { console.log('üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–∏–º –ø–µ—Ä–∏–æ–¥–∞–º'); }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
        window.browserAnalytics = new BrowserAnalytics();
        console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤–∞!');
    }, 1000);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.BrowserAnalytics = BrowserAnalytics; 