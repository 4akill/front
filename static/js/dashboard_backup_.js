// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
const PRODUCTIVE_APPS = {
    'Microsoft Word': 1.0,
    'Microsoft Excel': 1.0,
    'Microsoft PowerPoint': 1.0,
    'Visual Studio Code': 1.0,
    'PyCharm': 1.0,
    'IntelliJ IDEA': 1.0,
    'Git': 1.0,
    'Terminal': 1.0,
    'Command Prompt': 1.0,
    'PowerShell': 1.0,
    'Chrome': 0.8,
    'Firefox': 0.8,
    'Edge': 0.8,
    'Outlook': 0.9,
    'Teams': 0.9,
    'Slack': 0.9,
    'Jira': 0.9,
    'Confluence': 0.9
};

const UNPRODUCTIVE_APPS = {
    'Facebook': 0.0,
    'Instagram': 0.0,
    'Twitter': 0.0,
    'TikTok': 0.0,
    'YouTube': 0.1,
    'VK': 0.1,
    'Telegram': 0.2,
    'WhatsApp': 0.2,
    'Discord': 0.2,
    'Steam': 0.0,
    'Epic Games': 0.0,
    'Battle.net': 0.0
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∫–æ–Ω–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤
const BROWSER_ICONS = {
    'Chrome': '<i class="bi bi-browser-chrome text-success"></i>',
    'Firefox': '<i class="bi bi-browser-firefox text-warning"></i>',
    'Edge': '<i class="bi bi-browser-edge text-primary"></i>',
    'Safari': '<i class="bi bi-browser-safari text-info"></i>',
    'Opera': '<i class="bi bi-browser-opera text-danger"></i>',
    'Internet Explorer': '<i class="bi bi-browser-ie text-primary"></i>',
    'Unknown': '<i class="bi bi-globe text-secondary"></i>'
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
function formatTime(date) {
    if (!(date instanceof Date)) {
        date = new Date(date);
    }
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

function formatDate(date) {
    if (!(date instanceof Date)) {
        date = new Date(date);
    }
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function calculateDuration(start, end) {
    let startTime, endTime;

    if (typeof start === 'string') {
        startTime = new Date(start);
    } else if (typeof start === 'number') {
        startTime = new Date(start);
    } else {
        startTime = start;
    }

    if (typeof end === 'string') {
        endTime = new Date(end);
    } else if (typeof end === 'number') {
        endTime = new Date(end);
    } else {
        endTime = end;
    }

    const diff = endTime - startTime;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}—á ${minutes}–º`;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
function calculateProductivity(activities) {
    if (!activities || activities.length === 0) {
        return {
            totalTime: 0,
            productiveTime: 0,
            unproductiveTime: 0,
            breaks: 0,
            productivityScore: 0
        };
    }

    console.log('üßÆ Calculating productivity for', activities.length, 'activities');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const totalTime = calculateTotalActivityTime(activities);

    // –ù–û–í–´–ô –ü–û–î–•–û–î: —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
    // –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productiveActivities = [];
    const unproductiveActivities = [];
    const breakActivities = [];

    activities.forEach(activity => {
        if (isBreak(activity)) {
            breakActivities.push(activity);
        } else {
            const productivity = getProductivityScore(activity);
            if (productivity >= 0.6) {
                productiveActivities.push(activity);
            } else {
                unproductiveActivities.push(activity);
            }
        }
    });

    // –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
    const productiveTime = calculateTotalActivityTime(productiveActivities);
    const unproductiveTime = calculateTotalActivityTime(unproductiveActivities);
    const breaksTime = calculateTotalActivityTime(breakActivities);

    console.log('üìä Productivity calculation results:', {
        totalTime: `${Math.floor(totalTime / 60)}–º ${totalTime % 60}—Å`,
        productiveTime: `${Math.floor(productiveTime / 60)}–º ${productiveTime % 60}—Å`,
        unproductiveTime: `${Math.floor(unproductiveTime / 60)}–º ${unproductiveTime % 60}—Å`,
        breaksTime: `${Math.floor(breaksTime / 60)}–º ${breaksTime % 60}—Å`,
        activitiesBreakdown: {
            total: activities.length,
            productive: productiveActivities.length,
            unproductive: unproductiveActivities.length,
            breaks: breakActivities.length
        }
    });

    return {
        totalTime,
        productiveTime,
        unproductiveTime,
        breaks: breaksTime,
        productivityScore: totalTime > 0 ? (productiveTime / totalTime) * 100 : 0
    };
}

function isBreak(activity) {
    if (!activity) return false;

    if (activity.activity_type === 'break') return true;

    const title = (activity.window_title || '').toLowerCase();
    return title.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω') ||
        title.includes('locked') ||
        title.includes('idle') ||
        title.includes('screensaver');
}

function getProductivityScore(activity) {
    if (!activity) return 0.5;

    const appName = activity.app_name || activity.window_title || '';

    if (PRODUCTIVE_APPS[appName] !== undefined) {
        return PRODUCTIVE_APPS[appName];
    }

    if (UNPRODUCTIVE_APPS[appName] !== undefined) {
        return UNPRODUCTIVE_APPS[appName];
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const title = (activity.window_title || '').toLowerCase();
    if (title.includes('—Ä–∞–±–æ—Ç–∞') || title.includes('work') ||
        title.includes('–ø—Ä–æ–µ–∫—Ç') || title.includes('project')) {
        return 0.8;
    }

    if (title.includes('–∏–≥—Ä–∞') || title.includes('game') ||
        title.includes('—Å–æ—Ü') || title.includes('social')) {
        return 0.2;
    }

    return 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
function updateActivityChart(activities) {
    if (!activities || activities.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        return;
    }

    // –°–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    const browserProcesses = [
        'chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe',
        'brave.exe', 'vivaldi.exe', 'safari.exe', 'browser.exe',
        'opera_gx.exe', 'tor.exe', 'arc.exe', 'palemoon.exe'
    ];

    const appUsage = {};
    activities.forEach(activity => {
        if (activity.app_name) {
            const processName = (activity.process_name || activity.app_name || '').toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–æ–º
            const isBrowser = browserProcesses.some(browser =>
                processName.includes(browser.toLowerCase()) ||
                activity.app_name.toLowerCase().includes('chrome') ||
                activity.app_name.toLowerCase().includes('firefox') ||
                activity.app_name.toLowerCase().includes('edge') ||
                activity.app_name.toLowerCase().includes('opera') ||
                activity.app_name.toLowerCase().includes('safari') ||
                activity.app_name.toLowerCase().includes('–±—Ä–∞—É–∑–µ—Ä')
            );

            // –ò—Å–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –∏–∑ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if (!isBrowser) {
                appUsage[activity.app_name] = (appUsage[activity.app_name] || 0) +
                    (activity.duration || 0);
            }
        }
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const sortedApps = Object.entries(appUsage)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    const plotData = [{
        x: sortedApps.map(([app]) => app),
        y: sortedApps.map(([, time]) => time),
        type: 'bar',
        marker: { color: '#1e3a8a' }
    }];

    const layout = {
        title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤)',
        margin: { t: 40, b: 100 },
        xaxis: { tickangle: -45 },
        yaxis: { title: '–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)' }
    };

    Plotly.newPlot('activity-chart', plotData, layout);
}

function updateResourceChart(resources) {
    if (!resources || resources.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤');
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedResources = [...resources].sort((a, b) => {
        return new Date(a.timestamp) - new Date(b.timestamp);
    });

    const times = sortedResources.map(r => formatTime(new Date(r.timestamp)));
    const cpu = sortedResources.map(r => r.cpu);
    const ram = sortedResources.map(r => r.memory);
    const disk = sortedResources.map(r => r.disk);

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (sortedResources.length > 0) {
        const latestData = sortedResources[sortedResources.length - 1];
        updateResourceMetrics(latestData);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgCpu = cpu.reduce((sum, val) => sum + val, 0) / cpu.length;
    const avgRam = ram.reduce((sum, val) => sum + val, 0) / ram.length;
    const avgDisk = disk.reduce((sum, val) => sum + val, 0) / disk.length;

    const maxCpu = Math.max(...cpu);
    const maxRam = Math.max(...ram);
    const maxDisk = Math.max(...disk);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('avg-cpu-usage').textContent = `${Math.round(avgCpu)}%`;
    document.getElementById('avg-ram-usage').textContent = `${Math.round(avgRam)}%`;
    document.getElementById('avg-disk-usage').textContent = `${Math.round(avgDisk)}%`;

    document.getElementById('max-cpu-usage').textContent = `${Math.round(maxCpu)}%`;
    document.getElementById('max-ram-usage').textContent = `${Math.round(maxRam)}%`;
    document.getElementById('max-disk-usage').textContent = `${Math.round(maxDisk)}%`;

    // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const maxCpuIndex = cpu.indexOf(maxCpu);
    const maxRamIndex = ram.indexOf(maxRam);
    const maxDiskIndex = disk.indexOf(maxDisk);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    document.getElementById('peak-cpu').textContent = `${Math.round(maxCpu)}%`;
    document.getElementById('peak-ram').textContent = `${Math.round(maxRam)}%`;
    document.getElementById('peak-disk').textContent = `${Math.round(maxDisk)}%`;

    if (maxCpuIndex !== -1 && times[maxCpuIndex]) {
        document.getElementById('peak-cpu-time').textContent = times[maxCpuIndex];
    }
    if (maxRamIndex !== -1 && times[maxRamIndex]) {
        document.getElementById('peak-ram-time').textContent = times[maxRamIndex];
    }
    if (maxDiskIndex !== -1 && times[maxDiskIndex]) {
        document.getElementById('peak-disk-time').textContent = times[maxDiskIndex];
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    const cpuData = [{
        x: times,
        y: cpu,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'CPU',
        line: { color: '#dc3545', width: 2 }
    }];

    const ramData = [{
        x: times,
        y: ram,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'RAM',
        line: { color: '#0d6efd', width: 2 }
    }];

    const diskData = [{
        x: times,
        y: disk,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Disk',
        line: { color: '#198754', width: 2 }
    }];

    const layout = {
        autosize: true,
        height: 300,
        margin: { l: 50, r: 50, b: 50, t: 30, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    Plotly.newPlot('cpu-chart', cpuData, layout);
    Plotly.newPlot('ram-chart', ramData, layout);
    Plotly.newPlot('disk-chart', diskData, layout);

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const combinedData = [
        {
            x: times,
            y: cpu,
            type: 'scatter',
            mode: 'lines',
            name: 'CPU',
            line: { color: '#dc3545', width: 2 }
        },
        {
            x: times,
            y: ram,
            type: 'scatter',
            mode: 'lines',
            name: 'RAM',
            line: { color: '#0d6efd', width: 2 }
        },
        {
            x: times,
            y: disk,
            type: 'scatter',
            mode: 'lines',
            name: 'Disk',
            line: { color: '#198754', width: 2 }
        }
    ];

    const combinedLayout = {
        autosize: true,
        height: 400,
        margin: { l: 50, r: 50, b: 50, t: 10, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    Plotly.newPlot('combined-resources-chart', combinedData, combinedLayout);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    setupResourceChartControls(times, cpu, ram, disk);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
function updateResourceMetrics(data) {
    if (!data) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const cpuUsage = Math.round(data.cpu || 0);
    const ramUsage = Math.round(data.memory || 0);
    const diskUsage = Math.round(data.disk || 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –ø—Ä–æ–≤–µ—Ä—è—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const currentCpuElement = document.getElementById('current-cpu-usage');
    const currentRamElement = document.getElementById('current-ram-usage');
    const currentDiskElement = document.getElementById('current-disk-usage');

    if (currentCpuElement) currentCpuElement.textContent = cpuUsage;
    if (currentRamElement) currentRamElement.textContent = ramUsage;
    if (currentDiskElement) currentDiskElement.textContent = diskUsage;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const cpuProgress = document.getElementById('cpu-progress');
    const ramProgress = document.getElementById('ram-progress');
    const diskProgress = document.getElementById('disk-progress');

    if (cpuProgress) cpuProgress.style.width = `${cpuUsage}%`;
    if (ramProgress) ramProgress.style.width = `${ramUsage}%`;
    if (diskProgress) diskProgress.style.width = `${diskUsage}%`;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    if (cpuProgress) {
        if (cpuUsage > 80) {
            cpuProgress.className = 'progress-bar bg-danger';
        } else if (cpuUsage > 60) {
            cpuProgress.className = 'progress-bar bg-warning';
        } else {
            cpuProgress.className = 'progress-bar bg-success';
        }
    }

    if (ramProgress) {
        if (ramUsage > 80) {
            ramProgress.className = 'progress-bar bg-danger';
        } else if (ramUsage > 60) {
            ramProgress.className = 'progress-bar bg-warning';
        } else {
            ramProgress.className = 'progress-bar bg-success';
        }
    }

    if (diskProgress) {
        if (diskUsage > 80) {
            diskProgress.className = 'progress-bar bg-danger';
        } else if (diskUsage > 60) {
            diskProgress.className = 'progress-bar bg-warning';
        } else {
            diskProgress.className = 'progress-bar bg-success';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function setupResourceChartControls(times, cpu, ram, disk) {
    const allButton = document.getElementById('chart-view-all');
    const cpuButton = document.getElementById('chart-view-cpu');
    const ramButton = document.getElementById('chart-view-ram');
    const diskButton = document.getElementById('chart-view-disk');

    if (!allButton || !cpuButton || !ramButton || !diskButton) {
        return;
    }

    const layout = {
        autosize: true,
        height: 400,
        margin: { l: 50, r: 50, b: 50, t: 10, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    allButton.addEventListener('click', function () {
        setActiveButton(this);
        const combinedData = [
            {
                x: times,
                y: cpu,
                type: 'scatter',
                mode: 'lines',
                name: 'CPU',
                line: { color: '#dc3545', width: 2 }
            },
            {
                x: times,
                y: ram,
                type: 'scatter',
                mode: 'lines',
                name: 'RAM',
                line: { color: '#0d6efd', width: 2 }
            },
            {
                x: times,
                y: disk,
                type: 'scatter',
                mode: 'lines',
                name: 'Disk',
                line: { color: '#198754', width: 2 }
            }
        ];
        Plotly.newPlot('combined-resources-chart', combinedData, layout);
    });

    cpuButton.addEventListener('click', function () {
        setActiveButton(this);
        const cpuData = [{
            x: times,
            y: cpu,
            type: 'scatter',
            mode: 'lines',
            name: 'CPU',
            line: { color: '#dc3545', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', cpuData, layout);
    });

    ramButton.addEventListener('click', function () {
        setActiveButton(this);
        const ramData = [{
            x: times,
            y: ram,
            type: 'scatter',
            mode: 'lines',
            name: 'RAM',
            line: { color: '#0d6efd', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', ramData, layout);
    });

    diskButton.addEventListener('click', function () {
        setActiveButton(this);
        const diskData = [{
            x: times,
            y: disk,
            type: 'scatter',
            mode: 'lines',
            name: 'Disk',
            line: { color: '#198754', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', diskData, layout);
    });

    function setActiveButton(button) {
        [allButton, cpuButton, ramButton, diskButton].forEach(btn => {
            btn.classList.remove('active');
        });
        button.classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
function formatTimeNicely(hours, minutes) {
    // –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    minutes = Math.round(minutes);

    // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã —Ä–∞–≤–Ω—ã 60, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—ã
    if (minutes === 60) {
        hours += 1;
        minutes = 0;
    }

    return `${hours}—á ${minutes}–º`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
function formatMinutes(minutes) {
    if (isNaN(minutes) || minutes === null) return "0–º";

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    minutes = Math.round(minutes);

    let hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);

    if (hours > 0) {
        return `${hours}—á ${mins}–º`;
    } else {
        return `${mins}–º`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
function preprocessDailyData(data) {
    if (!data || !data.website_visits || data.website_visits.length === 0) {
        return data;
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ "–î–µ–Ω—å", –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Å–æ–≤
    const periodFilter = document.getElementById('period-filter');
    if (periodFilter && periodFilter.value === 'day') {
        console.log("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å");

        // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Å–æ–≤ –¥–Ω—è
        const dateFilter = document.getElementById('date-filter');
        let baseDate = new Date();
        if (dateFilter && dateFilter.value) {
            baseDate = new Date(dateFilter.value);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        data.website_visits = data.website_visits.map(visit => {
            if (typeof visit.timestamp === 'string') {
                visit.timestamp = new Date(visit.timestamp).toISOString();
            }
            return visit;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        data.website_visits.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

        console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤:", data.website_visits);
    }

    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
function updateBrowserChart(data) {
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = preprocessDailyData(data);

    // –î–∏–∞–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const browserData = data.browser_activity || data.website_visits || [];
    const websiteData = data.website_visits || [];

    console.log("–î–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞:", browserData);
    console.log("–î–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤:", websiteData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ canvas
    const chartElement = document.getElementById('browser-chart');
    const statsContainer = document.getElementById('browser-stats-container');
    const noDataElement = document.getElementById('no-browser-data');

    if (!chartElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç browser-chart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!statsContainer || !noDataElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-–±—Ä–∞—É–∑–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    const topBrowsersTable = document.getElementById('top-browsers-table').querySelector('tbody');
    if (topBrowsersTable) {
        topBrowsersTable.innerHTML = '';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
    if (browserData.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø–µ—Ä–∏–æ–¥–æ–≤
        const browserGroups = {};

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º
        const browserSessions = {};
        browserData.forEach(item => {
            const browserName = item.browser_name || item.browser || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä";
            if (!browserSessions[browserName]) {
                browserSessions[browserName] = [];
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
            const duration = parseInt(item.total_time || item.duration || 0);
            const startTime = new Date(item.timestamp || item.start_time);
            const endTime = new Date(startTime.getTime() + duration * 1000);

            browserSessions[browserName].push({
                start: startTime,
                end: endTime,
                duration: duration,
                url: item.url || '',
                window_title: item.window_title || ''
            });
        });

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        Object.keys(browserSessions).forEach(browserName => {
            const sessions = browserSessions[browserName];

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            sessions.sort((a, b) => a.start - b.start);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
            const mergedPeriods = [];
            let currentPeriod = null;

            sessions.forEach(session => {
                if (!currentPeriod) {
                    currentPeriod = { start: session.start, end: session.end };
                } else {
                    // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    if (session.start <= currentPeriod.end) {
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã - —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                        currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), session.end.getTime()));
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        mergedPeriods.push(currentPeriod);
                        currentPeriod = { start: session.start, end: session.end };
                    }
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            if (currentPeriod) {
                mergedPeriods.push(currentPeriod);
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Å—É–º–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            const totalTime = mergedPeriods.reduce((total, period) => {
                return total + Math.floor((period.end - period.start) / 1000);
            }, 0);

            browserGroups[browserName] = totalTime;

            console.log(`–ë—Ä–∞—É–∑–µ—Ä ${browserName}: ${sessions.length} —Å–µ—Å—Å–∏–π -> ${mergedPeriods.length} –ø–µ—Ä–∏–æ–¥–æ–≤ = ${totalTime} —Å–µ–∫—É–Ω–¥`);
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        const labels = Object.keys(browserGroups);
        const times = Object.values(browserGroups);

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        try {
            const ctx = chartElement.getContext('2d');
            if (!ctx) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è canvas');
                return;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (window.browserChart) {
                window.browserChart.destroy();
            }

            window.browserChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: times,
                        backgroundColor: [
                            '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const value = context.raw;
                                    return formatDuration(value);
                                }
                            }
                        }
                    }
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
            const totalBrowserTime = Object.values(browserGroups).reduce((sum, time) => sum + time, 0);

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
const allBrowserPeriods = [];
Object.keys(browserSessions).forEach(browserName => {
    const sessions = browserSessions[browserName];
    sessions.forEach(session => {
        allBrowserPeriods.push({
            start: session.start,
            end: session.end,
            browser: browserName
        });
    });
});

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
allBrowserPeriods.sort((a, b) => a.start - b.start);

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –í–°–ï–ú–ò –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
const mergedGlobalPeriods = [];
let currentGlobalPeriod = null;

allBrowserPeriods.forEach(period => {
    if (!currentGlobalPeriod) {
        currentGlobalPeriod = {
            start: period.start,
            end: period.end,
            browsers: [period.browser]
        };
    } else {
        if (period.start <= currentGlobalPeriod.end) {
            // –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            currentGlobalPeriod.end = new Date(Math.max(currentGlobalPeriod.end.getTime(), period.end.getTime()));
            if (!currentGlobalPeriod.browsers.includes(period.browser)) {
                currentGlobalPeriod.browsers.push(period.browser);
            }
        } else {
            // –ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            mergedGlobalPeriods.push(currentGlobalPeriod);
            currentGlobalPeriod = {
                start: period.start,
                end: period.end,
                browsers: [period.browser]
            };
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
if (currentGlobalPeriod) {
    mergedGlobalPeriods.push(currentGlobalPeriod);
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const totalRealTime = mergedGlobalPeriods.reduce((total, period) => {
    return total + Math.floor((period.end - period.start) / 1000);
}, 0);

console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –û–±—â–µ–µ –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ ${formatDuration(totalBrowserTime)} -> ${formatDuration(totalRealTime)}`);

document.getElementById('total-browser-time').textContent = formatDuration(totalRealTime);
            statsContainer.style.display = 'block';
            noDataElement.style.display = 'none';

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø-–±—Ä–∞—É–∑–µ—Ä–æ–≤
            if (topBrowsersTable) {
                const sortedBrowsers = Object.entries(browserGroups)
                    .sort(([, a], [, b]) => b - a);

                sortedBrowsers.forEach(([browser, time]) => {
                    const percentage = totalRealTime > 0 ? ((time / totalRealTime) * 100).toFixed(1) : '0.0';
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${browser}</td>
                        <td>${formatDuration(time)}</td>
                        <td>${percentage}%</td>
                    `;
                    topBrowsersTable.appendChild(row);
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', error);
            statsContainer.style.display = 'none';
            noDataElement.style.display = 'block';
        }
    } else {
        statsContainer.style.display = 'none';
        noDataElement.style.display = 'block';
        if (topBrowsersTable) {
            topBrowsersTable.innerHTML = '<tr><td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–∞—É–∑–µ—Ä–∞—Ö</td></tr>';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    try {
    updateWebsitesList(websiteData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', error);
    }
}

function updateWebsitesList(websiteData) {
    const container = document.getElementById('website-visits-list');
    const noDataElement = document.getElementById('no-website-visits');

    if (!container || !noDataElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    container.innerHTML = '';

    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤:", websiteData);

    if (!websiteData || websiteData.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        noDataElement.style.display = 'block';
        return;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    noDataElement.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π
    const recentVisits = [...websiteData].sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    }).slice(0, 10);

    recentVisits.forEach(visit => {
        const card = document.createElement('div');
        card.className = 'website-card';
        card.onclick = () => openWebsiteModal(visit);

        const url = visit.url || '-';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ browser –≤–º–µ—Å—Ç–æ browser_name, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã website_visits
        const browser = visit.browser || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä';
        const timestamp = new Date(visit.timestamp);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let domain = url;
        try {
                const urlObj = new URL(url);
                domain = urlObj.hostname;
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω –∏–∑ URL:', url);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ website_visits)
        const activityTime = '-';

        card.innerHTML = `
            <div class="website-title">${domain}</div>
            <div class="website-url">${url}</div>
            <div class="website-meta">
                <span class="browser-icon"><i class="bi bi-globe"></i> ${browser}</span>
                <span class="time-icon"><i class="bi bi-clock"></i> ${formatDate(timestamp)} ${formatTime(timestamp)}</span>
                <span class="duration-icon"><i class="bi bi-person"></i> ${visit.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                </div>
            `;

        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤
function updateWebsiteActivityChart(websiteData) {
    if (!websiteData || websiteData.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤');
        const chartElement = document.getElementById('website-activity-chart');
        if (chartElement) {
            chartElement.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>';
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    const chartElement = document.getElementById('website-activity-chart');
    if (!chartElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedData = [...websiteData].sort((a, b) => {
            try {
        return new Date(a.timestamp) - new Date(b.timestamp);
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏:', e);
                return 0;
            }
        });

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º
        const hourlyVisits = {};
        sortedData.forEach(visit => {
            try {
        const date = new Date(visit.timestamp);
                if (!isNaN(date.getTime())) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                    const hour = date.getHours();
        hourlyVisits[hour] = (hourlyVisits[hour] || 0) + 1;
                }
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:', visit.timestamp, e);
            }
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const hours = Object.keys(hourlyVisits).sort((a, b) => a - b);
    const visits = hours.map(hour => hourlyVisits[hour]);

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ 2 —Ç–æ—á–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (hours.length < 2) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ç–æ—á–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
            const firstHour = hours.length > 0 ? parseInt(hours[0]) : new Date().getHours();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            const prevHour = (firstHour - 1 + 24) % 24;
            hours.unshift(prevHour.toString());
            visits.unshift(0);

            // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            if (hours.length === 1) {
                const nextHour = (firstHour + 1) % 24;
                hours.push(nextHour.toString());
                visits.push(0);
            }
        }

    const plotData = [{
        x: hours.map(hour => `${hour}:00`),
        y: visits,
        type: 'scatter',
        mode: 'lines+markers',
        line: { color: '#1e3a8a', width: 2 },
        marker: { size: 8, color: '#1e3a8a' }
    }];

    const layout = {
        height: 300,
        margin: { l: 40, r: 20, b: 40, t: 10 },
        xaxis: { title: '–í—Ä–µ–º—è' },
        yaxis: { title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π' }
    };

    Plotly.newPlot('website-activity-chart', plotData, layout);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', error);

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
        chartElement.innerHTML = '<div class="alert alert-warning">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤
function updateWebsiteVisitsList(websiteData) {
    const container = document.getElementById('website-visits-list');
    const noDataAlert = document.getElementById('no-website-visits');

    container.innerHTML = '';

    if (!websiteData || websiteData.length === 0) {
        noDataAlert.style.display = 'block';
        return;
    }

    noDataAlert.style.display = 'none';

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedData = [...websiteData].sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
    sortedData.forEach(visit => {
        const card = document.createElement('div');
        card.className = 'website-card';

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        const browserIcon = BROWSER_ICONS[visit.browser] || BROWSER_ICONS['Unknown'];

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let displayUrl = visit.url;
        try {
            const url = new URL(visit.url);
            displayUrl = url.hostname;
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        const visitTime = formatTime(new Date(visit.timestamp));
        const visitDate = formatDate(new Date(visit.timestamp));

        card.innerHTML = `
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="d-flex align-items-center mb-2">
                        <span class="browser-icon">${browserIcon}</span>
                        <span class="fw-bold">${displayUrl}</span>
                    </div>
                    <div class="text-muted small url-text">${visit.url}</div>
                </div>
                <div class="text-end">
                    <div>${visitTime}</div>
                    <div class="text-muted small">${visitDate}</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
        card.addEventListener('click', () => {
            openWebsiteModal(visit);
        });

        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–∞
function openWebsiteModal(visit) {
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞:', visit);

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    let modal = document.getElementById('website-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'website-modal';
        modal.className = 'modal fade';
        modal.tabIndex = -1;
        modal.setAttribute('aria-hidden', 'true');

        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–∞–π—Ç–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="website-details">
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">URL:</div>
                                <div class="col-md-9 url-text" id="website-url"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–ë—Ä–∞—É–∑–µ—Ä:</div>
                                <div class="col-md-9" id="website-browser"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è:</div>
                                <div class="col-md-9" id="website-time"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</div>
                                <div class="col-md-9" id="website-title"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeButton = modal.querySelector('.btn-close');
        const closeButtonFooter = modal.querySelector('.modal-footer .btn-secondary');

        function handleCloseClick() {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) {
                bsModal.hide();
            }
        }

        closeButton.addEventListener('click', handleCloseClick);
        closeButtonFooter.addEventListener('click', handleCloseClick);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape
        function handleEscapeKey(event) {
            if (event.key === 'Escape') {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
            }
        }

        document.addEventListener('keydown', handleEscapeKey);
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    document.getElementById('website-url').textContent = visit.url || '-';
    document.getElementById('website-browser').textContent = visit.browser || '-';
    document.getElementById('website-title').textContent = visit.title || '-';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
    let timeStr = '-';
    if (visit.timestamp) {
        const date = new Date(visit.timestamp);
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();

        timeStr = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    }
    document.getElementById('website-time').textContent = timeStr;

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
function updateWorkingTimeTable(workingTime) {
    const tbody = document.querySelector('#timeline-table tbody');
    const tableContainer = tbody.closest('.table-container') || tbody.closest('.table-responsive') || tbody.closest('div');

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    let controlsContainer = document.getElementById('timeline-controls');
    if (!controlsContainer) {
        controlsContainer = document.createElement('div');
        controlsContainer.id = 'timeline-controls';
        controlsContainer.className = 'mb-3 d-flex justify-content-between align-items-center';
        controlsContainer.innerHTML = `
            <div>
                <button id="expand-all-btn" class="btn btn-sm btn-outline-primary me-2">
                    <i class="bi bi-arrows-expand"></i> –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
                <button id="collapse-all-btn" class="btn btn-sm btn-outline-secondary">
                    <i class="bi bi-arrows-collapse"></i> –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
            </div>
            <div class="small text-muted">
                –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: <span id="activities-count">0</span>
            </div>
        `;

        if (tableContainer) {
            tableContainer.insertBefore(controlsContainer, tableContainer.firstChild);
        }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!workingTime || workingTime.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="5" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</td>`;
        tbody.appendChild(tr);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        const activitiesCount = document.getElementById('activities-count');
        if (activitiesCount) activitiesCount.textContent = '0';

        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const activitiesCount = document.getElementById('activities-count');
    if (activitiesCount) activitiesCount.textContent = workingTime.length.toString();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
    const appGroups = {};
    workingTime.forEach(row => {
        const appName = row.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        if (!appGroups[appName]) {
            appGroups[appName] = [];
        }
        appGroups[appName].push(row);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    const sortedApps = Object.entries(appGroups).map(([appName, activities]) => {
        const totalDuration = activities.reduce((sum, act) => sum + (act.duration || 0), 0);
        return { appName, activities, totalDuration };
    }).sort((a, b) => b.totalDuration - a.totalDuration);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Ç–∞–±–ª–∏—Ü—É
    sortedApps.forEach(({ appName, activities, totalDuration }, index) => {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (—Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        const appRow = document.createElement('tr');
        const groupId = `app-group-${index}`;
        const formattedTotalDuration = formatDuration(totalDuration);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let avgProductivity = activities.reduce((sum, act) => sum + getProductivityScore(act), 0) / activities.length;
        let badgeClass = 'bg-warning';
        let productivityText = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';

        if (avgProductivity >= 0.7) {
            badgeClass = 'bg-success';
            productivityText = '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
        } else if (avgProductivity <= 0.3) {
            badgeClass = 'bg-danger';
            productivityText = '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
        }

        // –°—Ç–∏–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        appRow.className = 'app-group-header';
        appRow.setAttribute('data-bs-toggle', 'collapse');
        appRow.setAttribute('data-bs-target', `#${groupId}`);
        appRow.style.cursor = 'pointer';
        appRow.style.backgroundColor = '#f8f9fa';

        appRow.innerHTML = `
            <td colspan="2" class="fw-bold">
                <i class="bi bi-chevron-down period-icon me-2" style="font-size: 1.2em;"></i>
                ${appName}
            </td>
            <td><span class="badge ${badgeClass}">${productivityText}</span></td>
            <td>${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</td>
            <td>${formattedTotalDuration}</td>
        `;
        tbody.appendChild(appRow);

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const activitiesContainer = document.createElement('tr');
        activitiesContainer.className = 'collapse';
        activitiesContainer.id = groupId;

        const activitiesCell = document.createElement('td');
        activitiesCell.colSpan = 5;
        activitiesCell.style.padding = '0';

        const activitiesTable = document.createElement('table');
        activitiesTable.className = 'table table-sm mb-0';
        activitiesTable.style.backgroundColor = '#fff';

        const activitiesTbody = document.createElement('tbody');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activities.forEach(row => {
            const activityRow = document.createElement('tr');
            activityRow.className = 'activity-row';

            const productivity = getProductivityScore(row);
            let rowBadgeClass = 'bg-warning';
            let rowProductivityText = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';

            if (productivity >= 0.7) {
                rowBadgeClass = 'bg-success';
                rowProductivityText = '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
            } else if (productivity <= 0.3) {
                rowBadgeClass = 'bg-danger';
                rowProductivityText = '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º formatDuration
            const formattedDuration = row.duration ? formatDuration(row.duration) : '-';

            activityRow.innerHTML = `
            <td>${formatTime(new Date(row.timestamp))}</td>
            <td>${row.window_title || '-'}</td>
                <td><span class="badge ${rowBadgeClass}">${rowProductivityText}</span></td>
                <td colspan="2">${formattedDuration}</td>
            `;
            activitiesTbody.appendChild(activityRow);
        });

        activitiesTable.appendChild(activitiesTbody);
        activitiesCell.appendChild(activitiesTable);
        activitiesContainer.appendChild(activitiesCell);
        tbody.appendChild(activitiesContainer);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    const expandAllBtn = document.getElementById('expand-all-btn');
    const collapseAllBtn = document.getElementById('collapse-all-btn');

    if (expandAllBtn) {
        expandAllBtn.addEventListener('click', function () {
            document.querySelectorAll('.app-group-header').forEach(header => {
                const target = header.getAttribute('data-bs-target');
                const content = document.querySelector(target);
                if (content && !content.classList.contains('show')) {
                    header.classList.add('active');
                    header.querySelector('.period-icon').style.transform = 'rotate(90deg)';
                    content.classList.add('show');
                }
            });
        });
    }

    if (collapseAllBtn) {
        collapseAllBtn.addEventListener('click', function () {
            document.querySelectorAll('.app-group-header').forEach(header => {
                const target = header.getAttribute('data-bs-target');
                const content = document.querySelector(target);
                if (content && content.classList.contains('show')) {
                    header.classList.remove('active');
                    header.querySelector('.period-icon').style.transform = 'rotate(0deg)';
                    content.classList.remove('show');
                }
            });
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
    document.querySelectorAll('.app-group-header').forEach(header => {
        header.addEventListener('click', function () {
            const icon = this.querySelector('.period-icon');
            const target = this.getAttribute('data-bs-target');
            const content = document.querySelector(target);

            if (content.classList.contains('show')) {
                icon.style.transform = 'rotate(0deg)';
                this.classList.remove('active');
            } else {
                icon.style.transform = 'rotate(90deg)';
                this.classList.add('active');
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        .period-icon {
            transition: transform 0.3s ease;
        }
        .app-group-header.active .period-icon {
            transform: rotate(90deg);
        }
        .activity-row {
            background-color: #f9f9f9;
        }
        .activity-row:hover {
            background-color: #f0f0f0;
        }
    `;
    document.head.appendChild(styleElement);
}

function updateActivityTable(activities) {
    const tbody = document.querySelector('#top-apps-table tbody');
    tbody.innerHTML = '';

    if (!activities || activities.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</td>`;
        tbody.appendChild(tr);
        return;
    }

    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:', activities.length, '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
    const appGroups = {};

    activities.forEach(activity => {
        const appName = activity.application || activity.app_name;
        if (!appName) return;

        if (!appGroups[appName]) {
            appGroups[appName] = [];
        }

        const duration = parseInt(activity.duration || 0);
        if (duration > 0) {
            const startTime = new Date(activity.timestamp || activity.start_time);
            const endTime = new Date(startTime.getTime() + duration * 1000);

            appGroups[appName].push({
                start: startTime,
                end: endTime,
                duration: duration,
                activity: activity
            });
        }
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
    const appStats = {};

    Object.keys(appGroups).forEach(appName => {
        const periods = appGroups[appName];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        periods.sort((a, b) => a.start - b.start);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
        const mergedPeriods = [];
        let currentPeriod = null;

        periods.forEach(period => {
            if (!currentPeriod) {
                currentPeriod = { start: period.start, end: period.end };
            } else {
                // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ (—Å –±—É—Ñ–µ—Ä–æ–º 30 —Å–µ–∫ –¥–ª—è —É—á–µ—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π)
                if (period.start <= new Date(currentPeriod.end.getTime() + 30000)) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã - —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                    currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), period.end.getTime()));
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                    mergedPeriods.push(currentPeriod);
                    currentPeriod = { start: period.start, end: period.end };
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        if (currentPeriod) {
            mergedPeriods.push(currentPeriod);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —Å—É–º–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const totalTime = mergedPeriods.reduce((total, period) => {
            return total + Math.floor((period.end - period.start) / 1000);
        }, 0);

        appStats[appName] = totalTime;

        console.log(`${appName}: ${periods.length} –ø–µ—Ä–∏–æ–¥–æ–≤ -> ${mergedPeriods.length} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ = ${totalTime} —Å–µ–∫—É–Ω–¥`);
    });

    const totalTime = Object.values(appStats).reduce((sum, time) => sum + time, 0);

    const sortedApps = Object.entries(appStats)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    sortedApps.forEach(([app, time]) => {
        const percentage = totalTime > 0 ? ((time / totalTime) * 100).toFixed(1) : '0.0';
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${app}</td>
            <td>${formatDuration(time)}</td>
            <td>${percentage}%</td>
        `;
        tbody.appendChild(tr);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
function updateScreenshots(screenshots) {
    const grid = document.getElementById('screenshot-grid');
    grid.innerHTML = '';

    if (!screenshots || screenshots.length === 0) {
        grid.innerHTML = '<div class="alert alert-warning">–ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>';
        return;
    }

    screenshots.forEach(screenshot => {
        const card = document.createElement('div');
        card.className = 'screenshot-card';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        const imgSrc = screenshot.screenshot
            ? `data:image/jpeg;base64,${screenshot.screenshot}`
            : '/static/img/no-screenshot.png';

        const timestamp = new Date(screenshot.timestamp);

        card.innerHTML = `
            <img src="${imgSrc}" 
                 class="screenshot-image" 
                 onclick="openScreenshotModal('${screenshot.screenshot || ''}', '${timestamp}', '${screenshot.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}', ${getProductivityScore(screenshot) >= 0.5})" />
            <div class="screenshot-info">
                <div class="screenshot-time">${formatTime(timestamp)}</div>
                <div class="screenshot-app">${screenshot.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            </div>
        `;
        grid.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
function openScreenshotModal(base64data, timestamp, appName, isProductive) {
    const modal = document.getElementById('screenshotModal');
    const modalImage = document.getElementById('modal-screenshot');
    const modalTime = document.getElementById('modal-time');
    const modalApp = document.getElementById('modal-app');
    const modalProductivity = document.getElementById('modal-productivity');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (base64data) {
        modalImage.src = `data:image/jpeg;base64,${base64data}`;
    } else {
        modalImage.src = '/static/img/no-screenshot.png';
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    modalTime.textContent = formatTime(new Date(timestamp));
    modalApp.textContent = appName;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productivityText = isProductive ? '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
    const productivityClass = isProductive ? 'text-success' : 'text-danger';
    modalProductivity.innerHTML = `<span class="${productivityClass}">${productivityText}</span>`;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let lastValidMetrics = {
    totalTime: 0,
    productiveTime: 0,
    productivity: 0,
    breaks: 0
};

let lastValidResources = {
    cpu: { current: 0, max: 0, avg: 0 },
    ram: { current: 0, max: 0, avg: 0 },
    disk: { current: 0, max: 0, avg: 0 }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function updateMetrics(data) {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (data.real_activity_stats) {
        console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏');
        
        const stats = data.real_activity_stats;
        const totalMinutes = Math.round(stats.total_time / 60);
        const activeMinutes = Math.round(stats.active_time / 60);
        const passiveMinutes = Math.round(stats.passive_time / 60);
        const productiveMinutes = Math.round(stats.productive_time / 60); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const activityPercent = Math.round(stats.activity_ratio * 100);
        const productivityPercent = Math.round(stats.productivity_score); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        
        console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', {
            total: `${totalMinutes} –º–∏–Ω`,
            active: `${activeMinutes} –º–∏–Ω`,
            passive: `${passiveMinutes} –º–∏–Ω`,
            productive: `${productiveMinutes} –º–∏–Ω`,
            activityPercent: `${activityPercent}%`,
            productivityPercent: `${productivityPercent}%`
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        const totalWorkingTimeElement = document.getElementById('total-working-time');
        if (totalWorkingTimeElement) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;
            totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `–†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (${activityPercent}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è)
        const productiveTimeElement = document.getElementById('productive-time');
        if (productiveTimeElement) {
            const hours = Math.floor(productiveMinutes / 60);
            const minutes = productiveMinutes % 60;
            productiveTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `${productivityPercent}% –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        const activityScoreElement = document.getElementById('activity-score');
        if (activityScoreElement) {
            activityScoreElement.textContent = `${activityPercent}%`;
            
            const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è)
        const breakTimeElement = document.getElementById('break-time');
        if (breakTimeElement) {
            const hours = Math.floor(passiveMinutes / 60);
            const minutes = passiveMinutes % 60;
            breakTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = '–í—Ä–µ–º—è –ø–∞—Å—Å–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const metrics = {
            totalWorkTime: totalMinutes,
            totalProductiveTime: productiveMinutes,
            totalBreakTime: passiveMinutes,
            avgProductivity: activityPercent,
            activities: data.activities || []
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        window.lastMetrics = metrics;
        window.lastData = data;
        
        console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é mergeAllActivities –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const mergedActivities = mergeAllActivities(data);
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: –ø–æ–ª—É—á–µ–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π -', mergedActivities.length);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculateProductivity –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const metrics = calculateProductivity(mergedActivities);
    console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);

    // –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if (metrics.totalTime > 0 || metrics.productiveTime > 0 || metrics.productivityScore > 0) {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
        lastValidMetrics = {
            totalTime: metrics.totalTime,
            productiveTime: metrics.productiveTime,
            productivity: metrics.productivityScore,
            breaks: metrics.breaks
        };
    } else if (mergedActivities.length === 0) {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        // –ù–æ –Ω–µ –æ–±–Ω—É–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const activeTab = getActiveTabId(); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    updateMetricsInInterface({
        totalTime: metrics.totalTime > 0 ? metrics.totalTime : lastValidMetrics.totalTime,
        productiveTime: metrics.productiveTime > 0 ? metrics.productiveTime : lastValidMetrics.productiveTime,
        productivityScore: metrics.productivityScore > 0 ? metrics.productivityScore : lastValidMetrics.productivity,
        breaks: metrics.breaks,
        isSmartCalculator: false
    }, activeTab, data.period_info || {});
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ—Ç—Ä–∏–∫
 */
function updateMetricsInInterface(metrics, activeTab, periodInfo) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        const hours = Math.floor(metrics.totalTime / 60);
        const minutes = Math.round(metrics.totalTime % 60);
        totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–º–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
        const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            if (metrics.isSmartCalculator) {
                subtitle.textContent = `–†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (${(metrics.realActivityRatio * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)`;
            } else {
                updateMetricSubtitle(totalWorkingTimeElement, { totalTime: metrics.totalTime }, activeTab, periodInfo);
            }
        }
    }

    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
        const productiveHours = Math.floor(metrics.productiveTime / 60);
        const productiveMinutes = Math.round(metrics.productiveTime % 60);
        productiveTimeElement.textContent = formatTimeNicely(productiveHours, productiveMinutes);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            const percentOfTotal = metrics.totalTime > 0 ?
                ((metrics.productiveTime / metrics.totalTime) * 100).toFixed(1) : 0;
            subtitle.textContent = `${percentOfTotal}% –æ—Ç ${metrics.isSmartCalculator ? '–∞–∫—Ç–∏–≤–Ω–æ–≥–æ' : '–æ–±—â–µ–≥–æ'} –≤—Ä–µ–º–µ–Ω–∏`;
        }
    }

    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement) {
        activityScoreElement.textContent = `${metrics.productivityScore.toFixed(1)}%`;

        // –£—Ç–æ—á–Ω—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = metrics.isSmartCalculator ? 
                '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' : 
                '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }

    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement) {
        if (metrics.isSmartCalculator) {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            const breakContainer = breakTimeElement.closest('.metric-card') || breakTimeElement.parentElement;
            if (breakContainer) {
                breakContainer.style.display = 'none';
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            const breakContainer = breakTimeElement.closest('.metric-card') || breakTimeElement.parentElement;
            if (breakContainer) {
                breakContainer.style.display = '';
            }
            
            const breakHours = Math.floor(metrics.breaks / 60);
            const breakMinutes = Math.round(metrics.breaks % 60);
            breakTimeElement.textContent = formatTimeNicely(breakHours, breakMinutes);

            const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
const PRODUCTIVE_APPS = {
    'Microsoft Word': 1.0,
    'Microsoft Excel': 1.0,
    'Microsoft PowerPoint': 1.0,
    'Visual Studio Code': 1.0,
    'PyCharm': 1.0,
    'IntelliJ IDEA': 1.0,
    'Git': 1.0,
    'Terminal': 1.0,
    'Command Prompt': 1.0,
    'PowerShell': 1.0,
    'Chrome': 0.8,
    'Firefox': 0.8,
    'Edge': 0.8,
    'Outlook': 0.9,
    'Teams': 0.9,
    'Slack': 0.9,
    'Jira': 0.9,
    'Confluence': 0.9
};

const UNPRODUCTIVE_APPS = {
    'Facebook': 0.0,
    'Instagram': 0.0,
    'Twitter': 0.0,
    'TikTok': 0.0,
    'YouTube': 0.1,
    'VK': 0.1,
    'Telegram': 0.2,
    'WhatsApp': 0.2,
    'Discord': 0.2,
    'Steam': 0.0,
    'Epic Games': 0.0,
    'Battle.net': 0.0
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∫–æ–Ω–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤
const BROWSER_ICONS = {
    'Chrome': '<i class="bi bi-browser-chrome text-success"></i>',
    'Firefox': '<i class="bi bi-browser-firefox text-warning"></i>',
    'Edge': '<i class="bi bi-browser-edge text-primary"></i>',
    'Safari': '<i class="bi bi-browser-safari text-info"></i>',
    'Opera': '<i class="bi bi-browser-opera text-danger"></i>',
    'Internet Explorer': '<i class="bi bi-browser-ie text-primary"></i>',
    'Unknown': '<i class="bi bi-globe text-secondary"></i>'
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
function formatTime(date) {
    if (!(date instanceof Date)) {
        date = new Date(date);
    }
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

function formatDate(date) {
    if (!(date instanceof Date)) {
        date = new Date(date);
    }
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function calculateDuration(start, end) {
    let startTime, endTime;

    if (typeof start === 'string') {
        startTime = new Date(start);
    } else if (typeof start === 'number') {
        startTime = new Date(start);
    } else {
        startTime = start;
    }

    if (typeof end === 'string') {
        endTime = new Date(end);
    } else if (typeof end === 'number') {
        endTime = new Date(end);
    } else {
        endTime = end;
    }

    const diff = endTime - startTime;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}—á ${minutes}–º`;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
function calculateProductivity(activities) {
    if (!activities || activities.length === 0) {
        return {
            totalTime: 0,
            productiveTime: 0,
            unproductiveTime: 0,
            breaks: 0,
            productivityScore: 0
        };
    }

    console.log('üßÆ Calculating productivity for', activities.length, 'activities');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const totalTime = calculateTotalActivityTime(activities);

    // –ù–û–í–´–ô –ü–û–î–•–û–î: —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
    // –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productiveActivities = [];
    const unproductiveActivities = [];
    const breakActivities = [];

    activities.forEach(activity => {
        if (isBreak(activity)) {
            breakActivities.push(activity);
        } else {
            const productivity = getProductivityScore(activity);
            if (productivity >= 0.6) {
                productiveActivities.push(activity);
            } else {
                unproductiveActivities.push(activity);
            }
        }
    });

    // –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
    const productiveTime = calculateTotalActivityTime(productiveActivities);
    const unproductiveTime = calculateTotalActivityTime(unproductiveActivities);
    const breaksTime = calculateTotalActivityTime(breakActivities);

    console.log('üìä Productivity calculation results:', {
        totalTime: `${Math.floor(totalTime / 60)}–º ${totalTime % 60}—Å`,
        productiveTime: `${Math.floor(productiveTime / 60)}–º ${productiveTime % 60}—Å`,
        unproductiveTime: `${Math.floor(unproductiveTime / 60)}–º ${unproductiveTime % 60}—Å`,
        breaksTime: `${Math.floor(breaksTime / 60)}–º ${breaksTime % 60}—Å`,
        activitiesBreakdown: {
            total: activities.length,
            productive: productiveActivities.length,
            unproductive: unproductiveActivities.length,
            breaks: breakActivities.length
        }
    });

    return {
        totalTime,
        productiveTime,
        unproductiveTime,
        breaks: breaksTime,
        productivityScore: totalTime > 0 ? (productiveTime / totalTime) * 100 : 0
    };
}

function isBreak(activity) {
    if (!activity) return false;

    if (activity.activity_type === 'break') return true;

    const title = (activity.window_title || '').toLowerCase();
    return title.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω') ||
        title.includes('locked') ||
        title.includes('idle') ||
        title.includes('screensaver');
}

function getProductivityScore(activity) {
    if (!activity) return 0.5;

    const appName = activity.app_name || activity.window_title || '';

    if (PRODUCTIVE_APPS[appName] !== undefined) {
        return PRODUCTIVE_APPS[appName];
    }

    if (UNPRODUCTIVE_APPS[appName] !== undefined) {
        return UNPRODUCTIVE_APPS[appName];
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const title = (activity.window_title || '').toLowerCase();
    if (title.includes('—Ä–∞–±–æ—Ç–∞') || title.includes('work') ||
        title.includes('–ø—Ä–æ–µ–∫—Ç') || title.includes('project')) {
        return 0.8;
    }

    if (title.includes('–∏–≥—Ä–∞') || title.includes('game') ||
        title.includes('—Å–æ—Ü') || title.includes('social')) {
        return 0.2;
    }

    return 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
function updateActivityChart(activities) {
    if (!activities || activities.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        return;
    }

    // –°–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    const browserProcesses = [
        'chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe',
        'brave.exe', 'vivaldi.exe', 'safari.exe', 'browser.exe',
        'opera_gx.exe', 'tor.exe', 'arc.exe', 'palemoon.exe'
    ];

    const appUsage = {};
    activities.forEach(activity => {
        if (activity.app_name) {
            const processName = (activity.process_name || activity.app_name || '').toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–æ–º
            const isBrowser = browserProcesses.some(browser =>
                processName.includes(browser.toLowerCase()) ||
                activity.app_name.toLowerCase().includes('chrome') ||
                activity.app_name.toLowerCase().includes('firefox') ||
                activity.app_name.toLowerCase().includes('edge') ||
                activity.app_name.toLowerCase().includes('opera') ||
                activity.app_name.toLowerCase().includes('safari') ||
                activity.app_name.toLowerCase().includes('–±—Ä–∞—É–∑–µ—Ä')
            );

            // –ò—Å–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –∏–∑ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if (!isBrowser) {
                appUsage[activity.app_name] = (appUsage[activity.app_name] || 0) +
                    (activity.duration || 0);
            }
        }
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const sortedApps = Object.entries(appUsage)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    const plotData = [{
        x: sortedApps.map(([app]) => app),
        y: sortedApps.map(([, time]) => time),
        type: 'bar',
        marker: { color: '#1e3a8a' }
    }];

    const layout = {
        title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤)',
        margin: { t: 40, b: 100 },
        xaxis: { tickangle: -45 },
        yaxis: { title: '–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)' }
    };

    Plotly.newPlot('activity-chart', plotData, layout);
}

function updateResourceChart(resources) {
    if (!resources || resources.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤');
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedResources = [...resources].sort((a, b) => {
        return new Date(a.timestamp) - new Date(b.timestamp);
    });

    const times = sortedResources.map(r => formatTime(new Date(r.timestamp)));
    const cpu = sortedResources.map(r => r.cpu);
    const ram = sortedResources.map(r => r.memory);
    const disk = sortedResources.map(r => r.disk);

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (sortedResources.length > 0) {
        const latestData = sortedResources[sortedResources.length - 1];
        updateResourceMetrics(latestData);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgCpu = cpu.reduce((sum, val) => sum + val, 0) / cpu.length;
    const avgRam = ram.reduce((sum, val) => sum + val, 0) / ram.length;
    const avgDisk = disk.reduce((sum, val) => sum + val, 0) / disk.length;

    const maxCpu = Math.max(...cpu);
    const maxRam = Math.max(...ram);
    const maxDisk = Math.max(...disk);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('avg-cpu-usage').textContent = `${Math.round(avgCpu)}%`;
    document.getElementById('avg-ram-usage').textContent = `${Math.round(avgRam)}%`;
    document.getElementById('avg-disk-usage').textContent = `${Math.round(avgDisk)}%`;

    document.getElementById('max-cpu-usage').textContent = `${Math.round(maxCpu)}%`;
    document.getElementById('max-ram-usage').textContent = `${Math.round(maxRam)}%`;
    document.getElementById('max-disk-usage').textContent = `${Math.round(maxDisk)}%`;

    // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const maxCpuIndex = cpu.indexOf(maxCpu);
    const maxRamIndex = ram.indexOf(maxRam);
    const maxDiskIndex = disk.indexOf(maxDisk);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    document.getElementById('peak-cpu').textContent = `${Math.round(maxCpu)}%`;
    document.getElementById('peak-ram').textContent = `${Math.round(maxRam)}%`;
    document.getElementById('peak-disk').textContent = `${Math.round(maxDisk)}%`;

    if (maxCpuIndex !== -1 && times[maxCpuIndex]) {
        document.getElementById('peak-cpu-time').textContent = times[maxCpuIndex];
    }
    if (maxRamIndex !== -1 && times[maxRamIndex]) {
        document.getElementById('peak-ram-time').textContent = times[maxRamIndex];
    }
    if (maxDiskIndex !== -1 && times[maxDiskIndex]) {
        document.getElementById('peak-disk-time').textContent = times[maxDiskIndex];
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    const cpuData = [{
        x: times,
        y: cpu,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'CPU',
        line: { color: '#dc3545', width: 2 }
    }];

    const ramData = [{
        x: times,
        y: ram,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'RAM',
        line: { color: '#0d6efd', width: 2 }
    }];

    const diskData = [{
        x: times,
        y: disk,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Disk',
        line: { color: '#198754', width: 2 }
    }];

    const layout = {
        autosize: true,
        height: 300,
        margin: { l: 50, r: 50, b: 50, t: 30, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    Plotly.newPlot('cpu-chart', cpuData, layout);
    Plotly.newPlot('ram-chart', ramData, layout);
    Plotly.newPlot('disk-chart', diskData, layout);

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const combinedData = [
        {
            x: times,
            y: cpu,
            type: 'scatter',
            mode: 'lines',
            name: 'CPU',
            line: { color: '#dc3545', width: 2 }
        },
        {
            x: times,
            y: ram,
            type: 'scatter',
            mode: 'lines',
            name: 'RAM',
            line: { color: '#0d6efd', width: 2 }
        },
        {
            x: times,
            y: disk,
            type: 'scatter',
            mode: 'lines',
            name: 'Disk',
            line: { color: '#198754', width: 2 }
        }
    ];

    const combinedLayout = {
        autosize: true,
        height: 400,
        margin: { l: 50, r: 50, b: 50, t: 10, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    Plotly.newPlot('combined-resources-chart', combinedData, combinedLayout);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    setupResourceChartControls(times, cpu, ram, disk);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
function updateResourceMetrics(data) {
    if (!data) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const cpuUsage = Math.round(data.cpu || 0);
    const ramUsage = Math.round(data.memory || 0);
    const diskUsage = Math.round(data.disk || 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –ø—Ä–æ–≤–µ—Ä—è—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const currentCpuElement = document.getElementById('current-cpu-usage');
    const currentRamElement = document.getElementById('current-ram-usage');
    const currentDiskElement = document.getElementById('current-disk-usage');

    if (currentCpuElement) currentCpuElement.textContent = cpuUsage;
    if (currentRamElement) currentRamElement.textContent = ramUsage;
    if (currentDiskElement) currentDiskElement.textContent = diskUsage;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const cpuProgress = document.getElementById('cpu-progress');
    const ramProgress = document.getElementById('ram-progress');
    const diskProgress = document.getElementById('disk-progress');

    if (cpuProgress) cpuProgress.style.width = `${cpuUsage}%`;
    if (ramProgress) ramProgress.style.width = `${ramUsage}%`;
    if (diskProgress) diskProgress.style.width = `${diskUsage}%`;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    if (cpuProgress) {
        if (cpuUsage > 80) {
            cpuProgress.className = 'progress-bar bg-danger';
        } else if (cpuUsage > 60) {
            cpuProgress.className = 'progress-bar bg-warning';
        } else {
            cpuProgress.className = 'progress-bar bg-success';
        }
    }

    if (ramProgress) {
        if (ramUsage > 80) {
            ramProgress.className = 'progress-bar bg-danger';
        } else if (ramUsage > 60) {
            ramProgress.className = 'progress-bar bg-warning';
        } else {
            ramProgress.className = 'progress-bar bg-success';
        }
    }

    if (diskProgress) {
        if (diskUsage > 80) {
            diskProgress.className = 'progress-bar bg-danger';
        } else if (diskUsage > 60) {
            diskProgress.className = 'progress-bar bg-warning';
        } else {
            diskProgress.className = 'progress-bar bg-success';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function setupResourceChartControls(times, cpu, ram, disk) {
    const allButton = document.getElementById('chart-view-all');
    const cpuButton = document.getElementById('chart-view-cpu');
    const ramButton = document.getElementById('chart-view-ram');
    const diskButton = document.getElementById('chart-view-disk');

    if (!allButton || !cpuButton || !ramButton || !diskButton) {
        return;
    }

    const layout = {
        autosize: true,
        height: 400,
        margin: { l: 50, r: 50, b: 50, t: 10, pad: 4 },
        yaxis: {
            title: '%',
            range: [0, 100]
        },
        xaxis: {
            title: '–í—Ä–µ–º—è'
        },
        hovermode: 'closest',
        showlegend: false
    };

    allButton.addEventListener('click', function () {
        setActiveButton(this);
        const combinedData = [
            {
                x: times,
                y: cpu,
                type: 'scatter',
                mode: 'lines',
                name: 'CPU',
                line: { color: '#dc3545', width: 2 }
            },
            {
                x: times,
                y: ram,
                type: 'scatter',
                mode: 'lines',
                name: 'RAM',
                line: { color: '#0d6efd', width: 2 }
            },
            {
                x: times,
                y: disk,
                type: 'scatter',
                mode: 'lines',
                name: 'Disk',
                line: { color: '#198754', width: 2 }
            }
        ];
        Plotly.newPlot('combined-resources-chart', combinedData, layout);
    });

    cpuButton.addEventListener('click', function () {
        setActiveButton(this);
        const cpuData = [{
            x: times,
            y: cpu,
            type: 'scatter',
            mode: 'lines',
            name: 'CPU',
            line: { color: '#dc3545', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', cpuData, layout);
    });

    ramButton.addEventListener('click', function () {
        setActiveButton(this);
        const ramData = [{
            x: times,
            y: ram,
            type: 'scatter',
            mode: 'lines',
            name: 'RAM',
            line: { color: '#0d6efd', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', ramData, layout);
    });

    diskButton.addEventListener('click', function () {
        setActiveButton(this);
        const diskData = [{
            x: times,
            y: disk,
            type: 'scatter',
            mode: 'lines',
            name: 'Disk',
            line: { color: '#198754', width: 3 }
        }];
        Plotly.newPlot('combined-resources-chart', diskData, layout);
    });

    function setActiveButton(button) {
        [allButton, cpuButton, ramButton, diskButton].forEach(btn => {
            btn.classList.remove('active');
        });
        button.classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
function formatTimeNicely(hours, minutes) {
    // –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    minutes = Math.round(minutes);

    // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã —Ä–∞–≤–Ω—ã 60, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—ã
    if (minutes === 60) {
        hours += 1;
        minutes = 0;
    }

    return `${hours}—á ${minutes}–º`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
function formatMinutes(minutes) {
    if (isNaN(minutes) || minutes === null) return "0–º";

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    minutes = Math.round(minutes);

    let hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);

    if (hours > 0) {
        return `${hours}—á ${mins}–º`;
    } else {
        return `${mins}–º`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
function preprocessDailyData(data) {
    if (!data || !data.website_visits || data.website_visits.length === 0) {
        return data;
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ "–î–µ–Ω—å", –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Å–æ–≤
    const periodFilter = document.getElementById('period-filter');
    if (periodFilter && periodFilter.value === 'day') {
        console.log("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å");

        // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Å–æ–≤ –¥–Ω—è
        const dateFilter = document.getElementById('date-filter');
        let baseDate = new Date();
        if (dateFilter && dateFilter.value) {
            baseDate = new Date(dateFilter.value);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        data.website_visits = data.website_visits.map(visit => {
            if (typeof visit.timestamp === 'string') {
                visit.timestamp = new Date(visit.timestamp).toISOString();
            }
            return visit;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        data.website_visits.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

        console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤:", data.website_visits);
    }

    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
function updateBrowserChart(data) {
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = preprocessDailyData(data);

    // –î–∏–∞–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const browserData = data.browser_activity || data.website_visits || [];
    const websiteData = data.website_visits || [];

    console.log("–î–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞:", browserData);
    console.log("–î–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤:", websiteData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ canvas
    const chartElement = document.getElementById('browser-chart');
    const statsContainer = document.getElementById('browser-stats-container');
    const noDataElement = document.getElementById('no-browser-data');

    if (!chartElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç browser-chart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!statsContainer || !noDataElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-–±—Ä–∞—É–∑–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    const topBrowsersTable = document.getElementById('top-browsers-table').querySelector('tbody');
    if (topBrowsersTable) {
        topBrowsersTable.innerHTML = '';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
    if (browserData.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø–µ—Ä–∏–æ–¥–æ–≤
        const browserGroups = {};

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º
        const browserSessions = {};
        browserData.forEach(item => {
            const browserName = item.browser_name || item.browser || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä";
            if (!browserSessions[browserName]) {
                browserSessions[browserName] = [];
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
            const duration = parseInt(item.total_time || item.duration || 0);
            const startTime = new Date(item.timestamp || item.start_time);
            const endTime = new Date(startTime.getTime() + duration * 1000);

            browserSessions[browserName].push({
                start: startTime,
                end: endTime,
                duration: duration,
                url: item.url || '',
                window_title: item.window_title || ''
            });
        });

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        Object.keys(browserSessions).forEach(browserName => {
            const sessions = browserSessions[browserName];

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            sessions.sort((a, b) => a.start - b.start);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
            const mergedPeriods = [];
            let currentPeriod = null;

            sessions.forEach(session => {
                if (!currentPeriod) {
                    currentPeriod = { start: session.start, end: session.end };
                } else {
                    // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    if (session.start <= currentPeriod.end) {
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã - —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                        currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), session.end.getTime()));
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        mergedPeriods.push(currentPeriod);
                        currentPeriod = { start: session.start, end: session.end };
                    }
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            if (currentPeriod) {
                mergedPeriods.push(currentPeriod);
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Å—É–º–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            const totalTime = mergedPeriods.reduce((total, period) => {
                return total + Math.floor((period.end - period.start) / 1000);
            }, 0);

            browserGroups[browserName] = totalTime;

            console.log(`–ë—Ä–∞—É–∑–µ—Ä ${browserName}: ${sessions.length} —Å–µ—Å—Å–∏–π -> ${mergedPeriods.length} –ø–µ—Ä–∏–æ–¥–æ–≤ = ${totalTime} —Å–µ–∫—É–Ω–¥`);
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        const labels = Object.keys(browserGroups);
        const times = Object.values(browserGroups);

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        try {
            const ctx = chartElement.getContext('2d');
            if (!ctx) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è canvas');
                return;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (window.browserChart) {
                window.browserChart.destroy();
            }

            window.browserChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: times,
                        backgroundColor: [
                            '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const value = context.raw;
                                    return formatDuration(value);
                                }
                            }
                        }
                    }
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
            const totalBrowserTime = Object.values(browserGroups).reduce((sum, time) => sum + time, 0);

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
const allBrowserPeriods = [];
Object.keys(browserSessions).forEach(browserName => {
    const sessions = browserSessions[browserName];
    sessions.forEach(session => {
        allBrowserPeriods.push({
            start: session.start,
            end: session.end,
            browser: browserName
        });
    });
});

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
allBrowserPeriods.sort((a, b) => a.start - b.start);

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –í–°–ï–ú–ò –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
const mergedGlobalPeriods = [];
let currentGlobalPeriod = null;

allBrowserPeriods.forEach(period => {
    if (!currentGlobalPeriod) {
        currentGlobalPeriod = {
            start: period.start,
            end: period.end,
            browsers: [period.browser]
        };
    } else {
        if (period.start <= currentGlobalPeriod.end) {
            // –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            currentGlobalPeriod.end = new Date(Math.max(currentGlobalPeriod.end.getTime(), period.end.getTime()));
            if (!currentGlobalPeriod.browsers.includes(period.browser)) {
                currentGlobalPeriod.browsers.push(period.browser);
            }
        } else {
            // –ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            mergedGlobalPeriods.push(currentGlobalPeriod);
            currentGlobalPeriod = {
                start: period.start,
                end: period.end,
                browsers: [period.browser]
            };
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
if (currentGlobalPeriod) {
    mergedGlobalPeriods.push(currentGlobalPeriod);
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const totalRealTime = mergedGlobalPeriods.reduce((total, period) => {
    return total + Math.floor((period.end - period.start) / 1000);
}, 0);

console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –û–±—â–µ–µ –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ ${formatDuration(totalBrowserTime)} -> ${formatDuration(totalRealTime)}`);

document.getElementById('total-browser-time').textContent = formatDuration(totalRealTime);
            statsContainer.style.display = 'block';
            noDataElement.style.display = 'none';

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø-–±—Ä–∞—É–∑–µ—Ä–æ–≤
            if (topBrowsersTable) {
                const sortedBrowsers = Object.entries(browserGroups)
                    .sort(([, a], [, b]) => b - a);

                sortedBrowsers.forEach(([browser, time]) => {
                    const percentage = totalRealTime > 0 ? ((time / totalRealTime) * 100).toFixed(1) : '0.0';
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${browser}</td>
                        <td>${formatDuration(time)}</td>
                        <td>${percentage}%</td>
                    `;
                    topBrowsersTable.appendChild(row);
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', error);
            statsContainer.style.display = 'none';
            noDataElement.style.display = 'block';
        }
    } else {
        statsContainer.style.display = 'none';
        noDataElement.style.display = 'block';
        if (topBrowsersTable) {
            topBrowsersTable.innerHTML = '<tr><td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–∞—É–∑–µ—Ä–∞—Ö</td></tr>';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    try {
    updateWebsitesList(websiteData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', error);
    }
}

function updateWebsitesList(websiteData) {
    const container = document.getElementById('website-visits-list');
    const noDataElement = document.getElementById('no-website-visits');

    if (!container || !noDataElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    container.innerHTML = '';

    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤:", websiteData);

    if (!websiteData || websiteData.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        noDataElement.style.display = 'block';
        return;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    noDataElement.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π
    const recentVisits = [...websiteData].sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    }).slice(0, 10);

    recentVisits.forEach(visit => {
        const card = document.createElement('div');
        card.className = 'website-card';
        card.onclick = () => openWebsiteModal(visit);

        const url = visit.url || '-';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ browser –≤–º–µ—Å—Ç–æ browser_name, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã website_visits
        const browser = visit.browser || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä';
        const timestamp = new Date(visit.timestamp);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let domain = url;
        try {
                const urlObj = new URL(url);
                domain = urlObj.hostname;
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω –∏–∑ URL:', url);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ website_visits)
        const activityTime = '-';

        card.innerHTML = `
            <div class="website-title">${domain}</div>
            <div class="website-url">${url}</div>
            <div class="website-meta">
                <span class="browser-icon"><i class="bi bi-globe"></i> ${browser}</span>
                <span class="time-icon"><i class="bi bi-clock"></i> ${formatDate(timestamp)} ${formatTime(timestamp)}</span>
                <span class="duration-icon"><i class="bi bi-person"></i> ${visit.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                </div>
            `;

        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤
function updateWebsiteActivityChart(websiteData) {
    if (!websiteData || websiteData.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤');
        const chartElement = document.getElementById('website-activity-chart');
        if (chartElement) {
            chartElement.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>';
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    const chartElement = document.getElementById('website-activity-chart');
    if (!chartElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedData = [...websiteData].sort((a, b) => {
            try {
        return new Date(a.timestamp) - new Date(b.timestamp);
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏:', e);
                return 0;
            }
        });

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º
        const hourlyVisits = {};
        sortedData.forEach(visit => {
            try {
        const date = new Date(visit.timestamp);
                if (!isNaN(date.getTime())) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                    const hour = date.getHours();
        hourlyVisits[hour] = (hourlyVisits[hour] || 0) + 1;
                }
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:', visit.timestamp, e);
            }
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const hours = Object.keys(hourlyVisits).sort((a, b) => a - b);
    const visits = hours.map(hour => hourlyVisits[hour]);

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ 2 —Ç–æ—á–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (hours.length < 2) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ç–æ—á–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
            const firstHour = hours.length > 0 ? parseInt(hours[0]) : new Date().getHours();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            const prevHour = (firstHour - 1 + 24) % 24;
            hours.unshift(prevHour.toString());
            visits.unshift(0);

            // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            if (hours.length === 1) {
                const nextHour = (firstHour + 1) % 24;
                hours.push(nextHour.toString());
                visits.push(0);
            }
        }

    const plotData = [{
        x: hours.map(hour => `${hour}:00`),
        y: visits,
        type: 'scatter',
        mode: 'lines+markers',
        line: { color: '#1e3a8a', width: 2 },
        marker: { size: 8, color: '#1e3a8a' }
    }];

    const layout = {
        height: 300,
        margin: { l: 40, r: 20, b: 40, t: 10 },
        xaxis: { title: '–í—Ä–µ–º—è' },
        yaxis: { title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π' }
    };

    Plotly.newPlot('website-activity-chart', plotData, layout);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', error);

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
        chartElement.innerHTML = '<div class="alert alert-warning">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤
function updateWebsiteVisitsList(websiteData) {
    const container = document.getElementById('website-visits-list');
    const noDataAlert = document.getElementById('no-website-visits');

    container.innerHTML = '';

    if (!websiteData || websiteData.length === 0) {
        noDataAlert.style.display = 'block';
        return;
    }

    noDataAlert.style.display = 'none';

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedData = [...websiteData].sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
    sortedData.forEach(visit => {
        const card = document.createElement('div');
        card.className = 'website-card';

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        const browserIcon = BROWSER_ICONS[visit.browser] || BROWSER_ICONS['Unknown'];

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let displayUrl = visit.url;
        try {
            const url = new URL(visit.url);
            displayUrl = url.hostname;
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        const visitTime = formatTime(new Date(visit.timestamp));
        const visitDate = formatDate(new Date(visit.timestamp));

        card.innerHTML = `
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="d-flex align-items-center mb-2">
                        <span class="browser-icon">${browserIcon}</span>
                        <span class="fw-bold">${displayUrl}</span>
                    </div>
                    <div class="text-muted small url-text">${visit.url}</div>
                </div>
                <div class="text-end">
                    <div>${visitTime}</div>
                    <div class="text-muted small">${visitDate}</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
        card.addEventListener('click', () => {
            openWebsiteModal(visit);
        });

        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–∞
function openWebsiteModal(visit) {
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞:', visit);

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    let modal = document.getElementById('website-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'website-modal';
        modal.className = 'modal fade';
        modal.tabIndex = -1;
        modal.setAttribute('aria-hidden', 'true');

        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–∞–π—Ç–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="website-details">
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">URL:</div>
                                <div class="col-md-9 url-text" id="website-url"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–ë—Ä–∞—É–∑–µ—Ä:</div>
                                <div class="col-md-9" id="website-browser"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è:</div>
                                <div class="col-md-9" id="website-time"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</div>
                                <div class="col-md-9" id="website-title"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeButton = modal.querySelector('.btn-close');
        const closeButtonFooter = modal.querySelector('.modal-footer .btn-secondary');

        function handleCloseClick() {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) {
                bsModal.hide();
            }
        }

        closeButton.addEventListener('click', handleCloseClick);
        closeButtonFooter.addEventListener('click', handleCloseClick);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape
        function handleEscapeKey(event) {
            if (event.key === 'Escape') {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
            }
        }

        document.addEventListener('keydown', handleEscapeKey);
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    document.getElementById('website-url').textContent = visit.url || '-';
    document.getElementById('website-browser').textContent = visit.browser || '-';
    document.getElementById('website-title').textContent = visit.title || '-';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
    let timeStr = '-';
    if (visit.timestamp) {
        const date = new Date(visit.timestamp);
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();

        timeStr = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    }
    document.getElementById('website-time').textContent = timeStr;

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
function updateWorkingTimeTable(workingTime) {
    const tbody = document.querySelector('#timeline-table tbody');
    const tableContainer = tbody.closest('.table-container') || tbody.closest('.table-responsive') || tbody.closest('div');

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    let controlsContainer = document.getElementById('timeline-controls');
    if (!controlsContainer) {
        controlsContainer = document.createElement('div');
        controlsContainer.id = 'timeline-controls';
        controlsContainer.className = 'mb-3 d-flex justify-content-between align-items-center';
        controlsContainer.innerHTML = `
            <div>
                <button id="expand-all-btn" class="btn btn-sm btn-outline-primary me-2">
                    <i class="bi bi-arrows-expand"></i> –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
                <button id="collapse-all-btn" class="btn btn-sm btn-outline-secondary">
                    <i class="bi bi-arrows-collapse"></i> –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
            </div>
            <div class="small text-muted">
                –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: <span id="activities-count">0</span>
            </div>
        `;

        if (tableContainer) {
            tableContainer.insertBefore(controlsContainer, tableContainer.firstChild);
        }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!workingTime || workingTime.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="5" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</td>`;
        tbody.appendChild(tr);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        const activitiesCount = document.getElementById('activities-count');
        if (activitiesCount) activitiesCount.textContent = '0';

        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const activitiesCount = document.getElementById('activities-count');
    if (activitiesCount) activitiesCount.textContent = workingTime.length.toString();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
    const appGroups = {};
    workingTime.forEach(row => {
        const appName = row.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        if (!appGroups[appName]) {
            appGroups[appName] = [];
        }
        appGroups[appName].push(row);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    const sortedApps = Object.entries(appGroups).map(([appName, activities]) => {
        const totalDuration = activities.reduce((sum, act) => sum + (act.duration || 0), 0);
        return { appName, activities, totalDuration };
    }).sort((a, b) => b.totalDuration - a.totalDuration);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Ç–∞–±–ª–∏—Ü—É
    sortedApps.forEach(({ appName, activities, totalDuration }, index) => {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (—Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        const appRow = document.createElement('tr');
        const groupId = `app-group-${index}`;
        const formattedTotalDuration = formatDuration(totalDuration);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let avgProductivity = activities.reduce((sum, act) => sum + getProductivityScore(act), 0) / activities.length;
        let badgeClass = 'bg-warning';
        let productivityText = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';

        if (avgProductivity >= 0.7) {
            badgeClass = 'bg-success';
            productivityText = '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
        } else if (avgProductivity <= 0.3) {
            badgeClass = 'bg-danger';
            productivityText = '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
        }

        // –°—Ç–∏–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        appRow.className = 'app-group-header';
        appRow.setAttribute('data-bs-toggle', 'collapse');
        appRow.setAttribute('data-bs-target', `#${groupId}`);
        appRow.style.cursor = 'pointer';
        appRow.style.backgroundColor = '#f8f9fa';

        appRow.innerHTML = `
            <td colspan="2" class="fw-bold">
                <i class="bi bi-chevron-down period-icon me-2" style="font-size: 1.2em;"></i>
                ${appName}
            </td>
            <td><span class="badge ${badgeClass}">${productivityText}</span></td>
            <td>${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</td>
            <td>${formattedTotalDuration}</td>
        `;
        tbody.appendChild(appRow);

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const activitiesContainer = document.createElement('tr');
        activitiesContainer.className = 'collapse';
        activitiesContainer.id = groupId;

        const activitiesCell = document.createElement('td');
        activitiesCell.colSpan = 5;
        activitiesCell.style.padding = '0';

        const activitiesTable = document.createElement('table');
        activitiesTable.className = 'table table-sm mb-0';
        activitiesTable.style.backgroundColor = '#fff';

        const activitiesTbody = document.createElement('tbody');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activities.forEach(row => {
            const activityRow = document.createElement('tr');
            activityRow.className = 'activity-row';

            const productivity = getProductivityScore(row);
            let rowBadgeClass = 'bg-warning';
            let rowProductivityText = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';

            if (productivity >= 0.7) {
                rowBadgeClass = 'bg-success';
                rowProductivityText = '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
            } else if (productivity <= 0.3) {
                rowBadgeClass = 'bg-danger';
                rowProductivityText = '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º formatDuration
            const formattedDuration = row.duration ? formatDuration(row.duration) : '-';

            activityRow.innerHTML = `
            <td>${formatTime(new Date(row.timestamp))}</td>
            <td>${row.window_title || '-'}</td>
                <td><span class="badge ${rowBadgeClass}">${rowProductivityText}</span></td>
                <td colspan="2">${formattedDuration}</td>
            `;
            activitiesTbody.appendChild(activityRow);
        });

        activitiesTable.appendChild(activitiesTbody);
        activitiesCell.appendChild(activitiesTable);
        activitiesContainer.appendChild(activitiesCell);
        tbody.appendChild(activitiesContainer);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    const expandAllBtn = document.getElementById('expand-all-btn');
    const collapseAllBtn = document.getElementById('collapse-all-btn');

    if (expandAllBtn) {
        expandAllBtn.addEventListener('click', function () {
            document.querySelectorAll('.app-group-header').forEach(header => {
                const target = header.getAttribute('data-bs-target');
                const content = document.querySelector(target);
                if (content && !content.classList.contains('show')) {
                    header.classList.add('active');
                    header.querySelector('.period-icon').style.transform = 'rotate(90deg)';
                    content.classList.add('show');
                }
            });
        });
    }

    if (collapseAllBtn) {
        collapseAllBtn.addEventListener('click', function () {
            document.querySelectorAll('.app-group-header').forEach(header => {
                const target = header.getAttribute('data-bs-target');
                const content = document.querySelector(target);
                if (content && content.classList.contains('show')) {
                    header.classList.remove('active');
                    header.querySelector('.period-icon').style.transform = 'rotate(0deg)';
                    content.classList.remove('show');
                }
            });
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
    document.querySelectorAll('.app-group-header').forEach(header => {
        header.addEventListener('click', function () {
            const icon = this.querySelector('.period-icon');
            const target = this.getAttribute('data-bs-target');
            const content = document.querySelector(target);

            if (content.classList.contains('show')) {
                icon.style.transform = 'rotate(0deg)';
                this.classList.remove('active');
            } else {
                icon.style.transform = 'rotate(90deg)';
                this.classList.add('active');
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        .period-icon {
            transition: transform 0.3s ease;
        }
        .app-group-header.active .period-icon {
            transform: rotate(90deg);
        }
        .activity-row {
            background-color: #f9f9f9;
        }
        .activity-row:hover {
            background-color: #f0f0f0;
        }
    `;
    document.head.appendChild(styleElement);
}

function updateActivityTable(activities) {
    const tbody = document.querySelector('#top-apps-table tbody');
    tbody.innerHTML = '';

    if (!activities || activities.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</td>`;
        tbody.appendChild(tr);
        return;
    }

    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:', activities.length, '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
    const appGroups = {};

    activities.forEach(activity => {
        const appName = activity.application || activity.app_name;
        if (!appName) return;

        if (!appGroups[appName]) {
            appGroups[appName] = [];
        }

        const duration = parseInt(activity.duration || 0);
        if (duration > 0) {
            const startTime = new Date(activity.timestamp || activity.start_time);
            const endTime = new Date(startTime.getTime() + duration * 1000);

            appGroups[appName].push({
                start: startTime,
                end: endTime,
                duration: duration,
                activity: activity
            });
        }
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
    const appStats = {};

    Object.keys(appGroups).forEach(appName => {
        const periods = appGroups[appName];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        periods.sort((a, b) => a.start - b.start);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
        const mergedPeriods = [];
        let currentPeriod = null;

        periods.forEach(period => {
            if (!currentPeriod) {
                currentPeriod = { start: period.start, end: period.end };
            } else {
                // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ (—Å –±—É—Ñ–µ—Ä–æ–º 30 —Å–µ–∫ –¥–ª—è —É—á–µ—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π)
                if (period.start <= new Date(currentPeriod.end.getTime() + 30000)) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã - —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                    currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), period.end.getTime()));
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                    mergedPeriods.push(currentPeriod);
                    currentPeriod = { start: period.start, end: period.end };
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        if (currentPeriod) {
            mergedPeriods.push(currentPeriod);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —Å—É–º–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const totalTime = mergedPeriods.reduce((total, period) => {
            return total + Math.floor((period.end - period.start) / 1000);
        }, 0);

        appStats[appName] = totalTime;

        console.log(`${appName}: ${periods.length} –ø–µ—Ä–∏–æ–¥–æ–≤ -> ${mergedPeriods.length} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ = ${totalTime} —Å–µ–∫—É–Ω–¥`);
    });

    const totalTime = Object.values(appStats).reduce((sum, time) => sum + time, 0);

    const sortedApps = Object.entries(appStats)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    sortedApps.forEach(([app, time]) => {
        const percentage = totalTime > 0 ? ((time / totalTime) * 100).toFixed(1) : '0.0';
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${app}</td>
            <td>${formatDuration(time)}</td>
            <td>${percentage}%</td>
        `;
        tbody.appendChild(tr);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
function updateScreenshots(screenshots) {
    const grid = document.getElementById('screenshot-grid');
    grid.innerHTML = '';

    if (!screenshots || screenshots.length === 0) {
        grid.innerHTML = '<div class="alert alert-warning">–ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>';
        return;
    }

    screenshots.forEach(screenshot => {
        const card = document.createElement('div');
        card.className = 'screenshot-card';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        const imgSrc = screenshot.screenshot
            ? `data:image/jpeg;base64,${screenshot.screenshot}`
            : '/static/img/no-screenshot.png';

        const timestamp = new Date(screenshot.timestamp);

        card.innerHTML = `
            <img src="${imgSrc}" 
                 class="screenshot-image" 
                 onclick="openScreenshotModal('${screenshot.screenshot || ''}', '${timestamp}', '${screenshot.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}', ${getProductivityScore(screenshot) >= 0.5})" />
            <div class="screenshot-info">
                <div class="screenshot-time">${formatTime(timestamp)}</div>
                <div class="screenshot-app">${screenshot.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            </div>
        `;
        grid.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
function openScreenshotModal(base64data, timestamp, appName, isProductive) {
    const modal = document.getElementById('screenshotModal');
    const modalImage = document.getElementById('modal-screenshot');
    const modalTime = document.getElementById('modal-time');
    const modalApp = document.getElementById('modal-app');
    const modalProductivity = document.getElementById('modal-productivity');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (base64data) {
        modalImage.src = `data:image/jpeg;base64,${base64data}`;
    } else {
        modalImage.src = '/static/img/no-screenshot.png';
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    modalTime.textContent = formatTime(new Date(timestamp));
    modalApp.textContent = appName;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productivityText = isProductive ? '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ';
    const productivityClass = isProductive ? 'text-success' : 'text-danger';
    modalProductivity.innerHTML = `<span class="${productivityClass}">${productivityText}</span>`;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let lastValidMetrics = {
    totalTime: 0,
    productiveTime: 0,
    productivity: 0,
    breaks: 0
};

let lastValidResources = {
    cpu: { current: 0, max: 0, avg: 0 },
    ram: { current: 0, max: 0, avg: 0 },
    disk: { current: 0, max: 0, avg: 0 }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function updateMetrics(data) {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (data.real_activity_stats) {
        console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏');
        
        const stats = data.real_activity_stats;
        const totalMinutes = Math.round(stats.total_time / 60);
        const activeMinutes = Math.round(stats.active_time / 60);
        const passiveMinutes = Math.round(stats.passive_time / 60);
        const productiveMinutes = Math.round(stats.productive_time / 60); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const activityPercent = Math.round(stats.activity_ratio * 100);
        const productivityPercent = Math.round(stats.productivity_score); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        
        console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', {
            total: `${totalMinutes} –º–∏–Ω`,
            active: `${activeMinutes} –º–∏–Ω`,
            passive: `${passiveMinutes} –º–∏–Ω`,
            productive: `${productiveMinutes} –º–∏–Ω`,
            activityPercent: `${activityPercent}%`,
            productivityPercent: `${productivityPercent}%`
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        const totalWorkingTimeElement = document.getElementById('total-working-time');
        if (totalWorkingTimeElement) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;
            totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `–†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (${activityPercent}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è)
        const productiveTimeElement = document.getElementById('productive-time');
        if (productiveTimeElement) {
            const hours = Math.floor(productiveMinutes / 60);
            const minutes = productiveMinutes % 60;
            productiveTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `${productivityPercent}% –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        const activityScoreElement = document.getElementById('activity-score');
        if (activityScoreElement) {
            activityScoreElement.textContent = `${activityPercent}%`;
            
            const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = `–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è)
        const breakTimeElement = document.getElementById('break-time');
        if (breakTimeElement) {
            const hours = Math.floor(passiveMinutes / 60);
            const minutes = passiveMinutes % 60;
            breakTimeElement.textContent = formatTimeNicely(hours, minutes);
            
            const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = '–í—Ä–µ–º—è –ø–∞—Å—Å–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const metrics = {
            totalWorkTime: totalMinutes,
            totalProductiveTime: productiveMinutes,
            totalBreakTime: passiveMinutes,
            avgProductivity: activityPercent,
            activities: data.activities || []
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        window.lastMetrics = metrics;
        window.lastData = data;
        
        console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é mergeAllActivities –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const mergedActivities = mergeAllActivities(data);
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: –ø–æ–ª—É—á–µ–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π -', mergedActivities.length);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculateProductivity –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const metrics = calculateProductivity(mergedActivities);
    console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);

    // –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if (metrics.totalTime > 0 || metrics.productiveTime > 0 || metrics.productivityScore > 0) {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
        lastValidMetrics = {
            totalTime: metrics.totalTime,
            productiveTime: metrics.productiveTime,
            productivity: metrics.productivityScore,
            breaks: metrics.breaks
        };
    } else if (mergedActivities.length === 0) {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        // –ù–æ –Ω–µ –æ–±–Ω—É–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const activeTab = getActiveTabId(); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    updateMetricsInInterface({
        totalTime: metrics.totalTime > 0 ? metrics.totalTime : lastValidMetrics.totalTime,
        productiveTime: metrics.productiveTime > 0 ? metrics.productiveTime : lastValidMetrics.productiveTime,
        productivityScore: metrics.productivityScore > 0 ? metrics.productivityScore : lastValidMetrics.productivity,
        breaks: metrics.breaks,
        isSmartCalculator: false
    }, activeTab, data.period_info || {});
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ—Ç—Ä–∏–∫
 */
function updateMetricsInInterface(metrics, activeTab, periodInfo) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        const hours = Math.floor(metrics.totalTime / 60);
        const minutes = Math.round(metrics.totalTime % 60);
        totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–º–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
        const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            if (metrics.isSmartCalculator) {
                subtitle.textContent = `–†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (${(metrics.realActivityRatio * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)`;
            } else {
                updateMetricSubtitle(totalWorkingTimeElement, { totalTime: metrics.totalTime }, activeTab, periodInfo);
            }
        }
    }

    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
        const productiveHours = Math.floor(metrics.productiveTime / 60);
        const productiveMinutes = Math.round(metrics.productiveTime % 60);
        productiveTimeElement.textContent = formatTimeNicely(productiveHours, productiveMinutes);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            const percentOfTotal = metrics.totalTime > 0 ?
                ((metrics.productiveTime / metrics.totalTime) * 100).toFixed(1) : 0;
            subtitle.textContent = `${percentOfTotal}% –æ—Ç ${metrics.isSmartCalculator ? '–∞–∫—Ç–∏–≤–Ω–æ–≥–æ' : '–æ–±—â–µ–≥–æ'} –≤—Ä–µ–º–µ–Ω–∏`;
        }
    }

    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement) {
        activityScoreElement.textContent = `${metrics.productivityScore.toFixed(1)}%`;

        // –£—Ç–æ—á–Ω—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = metrics.isSmartCalculator ? 
                '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' : 
                '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }

    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement) {
        if (metrics.isSmartCalculator) {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            const breakContainer = breakTimeElement.closest('.metric-card') || breakTimeElement.parentElement;
            if (breakContainer) {
                breakContainer.style.display = 'none';
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            const breakContainer = breakTimeElement.closest('.metric-card') || breakTimeElement.parentElement;
            if (breakContainer) {
                breakContainer.style.display = '';
            }
            
            const breakHours = Math.floor(metrics.breaks / 60);
            const breakMinutes = Math.round(metrics.breaks % 60);
            breakTimeElement.textContent = formatTimeNicely(breakHours, breakMinutes);

            const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
            if (subtitle) {
                subtitle.textContent = '–í—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const lastUpdateElement = document.getElementById('last-update');
    if (lastUpdateElement) {
        lastUpdateElement.textContent = formatTime(new Date());
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function displaySavedMetrics() {
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', lastValidMetrics);

    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement && lastValidMetrics.totalTime > 0) {
        const hours = Math.floor(lastValidMetrics.totalTime / 60);
        const minutes = Math.round(lastValidMetrics.totalTime % 60);
        totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);
    }

    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement && lastValidMetrics.productiveTime > 0) {
        const productiveHours = Math.floor(lastValidMetrics.productiveTime / 60);
        const productiveMinutes = Math.round(lastValidMetrics.productiveTime % 60);
        productiveTimeElement.textContent = formatTimeNicely(productiveHours, productiveMinutes);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle && lastValidMetrics.totalTime > 0) {
            const percentOfTotal = (lastValidMetrics.productiveTime / lastValidMetrics.totalTime * 100).toFixed(1);
            subtitle.textContent = `${percentOfTotal}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`;
        }
    }

    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement && lastValidMetrics.productivity > 0) {
        activityScoreElement.textContent = `${lastValidMetrics.productivity.toFixed(1)}%`;
    }

    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement && lastValidMetrics.breaks > 0) {
        const breakHours = Math.floor(lastValidMetrics.breaks / 60);
        const breakMinutes = Math.round(lastValidMetrics.breaks % 60);
        breakTimeElement.textContent = formatTimeNicely(breakHours, breakMinutes);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function updateResourceMetrics(data) {
    if (!data) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤');
        displaySavedResourceMetrics();
        return;
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    let cpuValue = parseFloat(data.cpu);
    let ramValue = parseFloat(data.memory);
    let diskValue = parseFloat(data.disk);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
    const isCpuValid = !isNaN(cpuValue) && cpuValue > 0;
    const isRamValid = !isNaN(ramValue) && ramValue > 0;
    const isDiskValid = !isNaN(diskValue) && diskValue > 0;

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const cpuElement = document.getElementById('current-cpu-usage');
    if (cpuElement) {
        if (isCpuValid) {
            cpuElement.textContent = `${Math.round(cpuValue)}%`;
            lastValidResources.cpu.current = Math.round(cpuValue);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            cpuElement.textContent = `${lastValidResources.cpu.current}%`;
        }
    }

    const ramElement = document.getElementById('current-ram-usage');
    if (ramElement) {
        if (isRamValid) {
            ramElement.textContent = `${Math.round(ramValue)}%`;
            lastValidResources.ram.current = Math.round(ramValue);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            ramElement.textContent = `${lastValidResources.ram.current}%`;
        }
    }

    const diskElement = document.getElementById('current-disk-usage');
    if (diskElement) {
        if (isDiskValid) {
            diskElement.textContent = `${Math.round(diskValue)}%`;
            lastValidResources.disk.current = Math.round(diskValue);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            diskElement.textContent = `${lastValidResources.disk.current}%`;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (data.max_cpu && !isNaN(parseFloat(data.max_cpu))) {
        lastValidResources.cpu.max = Math.round(parseFloat(data.max_cpu));
    }

    if (data.avg_cpu && !isNaN(parseFloat(data.avg_cpu))) {
        lastValidResources.cpu.avg = Math.round(parseFloat(data.avg_cpu));
    }

    if (data.max_memory && !isNaN(parseFloat(data.max_memory))) {
        lastValidResources.ram.max = Math.round(parseFloat(data.max_memory));
    }

    if (data.avg_memory && !isNaN(parseFloat(data.avg_memory))) {
        lastValidResources.ram.avg = Math.round(parseFloat(data.avg_memory));
    }

    if (data.max_disk && !isNaN(parseFloat(data.max_disk))) {
        lastValidResources.disk.max = Math.round(parseFloat(data.max_disk));
    }

    if (data.avg_disk && !isNaN(parseFloat(data.avg_disk))) {
        lastValidResources.disk.avg = Math.round(parseFloat(data.avg_disk));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–∫—Å –∏ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    updateMaxAvgResourceMetrics();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
function displaySavedResourceMetrics() {
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:', lastValidResources);

    const cpuElement = document.getElementById('current-cpu-usage');
    if (cpuElement) {
        cpuElement.textContent = `${lastValidResources.cpu.current}%`;
    }

    const ramElement = document.getElementById('current-ram-usage');
    if (ramElement) {
        ramElement.textContent = `${lastValidResources.ram.current}%`;
    }

    const diskElement = document.getElementById('current-disk-usage');
    if (diskElement) {
        diskElement.textContent = `${lastValidResources.disk.current}%`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    updateMaxAvgResourceMetrics();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
function updateMaxAvgResourceMetrics() {
    // CPU
    const maxCpuElement = document.getElementById('max-cpu-usage');
    if (maxCpuElement) {
        maxCpuElement.textContent = `${lastValidResources.cpu.max}%`;
    }

    const avgCpuElement = document.getElementById('avg-cpu-usage');
    if (avgCpuElement) {
        avgCpuElement.textContent = `${lastValidResources.cpu.avg}%`;
    }

    // RAM
    const maxRamElement = document.getElementById('max-ram-usage');
    if (maxRamElement) {
        maxRamElement.textContent = `${lastValidResources.ram.max}%`;
    }

    const avgRamElement = document.getElementById('avg-ram-usage');
    if (avgRamElement) {
        avgRamElement.textContent = `${lastValidResources.ram.avg}%`;
    }

    // Disk
    const maxDiskElement = document.getElementById('max-disk-usage');
    if (maxDiskElement) {
        maxDiskElement.textContent = `${lastValidResources.disk.max}%`;
    }

    const avgDiskElement = document.getElementById('avg-disk-usage');
    if (avgDiskElement) {
        avgDiskElement.textContent = `${lastValidResources.disk.avg}%`;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
function initializeResourceMetrics() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
    const resourceMetrics = [
        { currentId: 'current-cpu-usage', maxId: 'max-cpu-usage', avgId: 'avg-cpu-usage' },
        { currentId: 'current-ram-usage', maxId: 'max-ram-usage', avgId: 'avg-ram-usage' },
        { currentId: 'current-disk-usage', maxId: 'max-disk-usage', avgId: 'avg-disk-usage' }
    ];

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (lastValidResources.cpu.current > 0 || lastValidResources.ram.current > 0 || lastValidResources.disk.current > 0) {
        displaySavedResourceMetrics();
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö)
    resourceMetrics.forEach(metric => {
        const currentElement = document.getElementById(metric.currentId);
        const maxElement = document.getElementById(metric.maxId);
        const avgElement = document.getElementById(metric.avgId);

        if (currentElement) currentElement.textContent = '0%';
        if (maxElement) maxElement.textContent = '0%';
        if (avgElement) avgElement.textContent = '0%';
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
function getActiveTabId() {
    const activeTabElement = document.querySelector('.nav-link.active[data-bs-toggle="tab"]');
    if (activeTabElement) {
        return activeTabElement.getAttribute('id') || 'activity-tab'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - activity
    }
    return 'activity-tab'; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º activity
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
function updateMetricSubtitle(metricElement, metrics, activeTabId, periodInfo) {
    const subtitle = metricElement.parentElement.querySelector('.metric-subtitle');
    if (!subtitle) return;

    if (activeTabId === 'timeline-tab') {
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const dateFilter = document.getElementById('date-filter');
        const periodFilter = document.getElementById('period-filter');

        if (dateFilter && periodFilter) {
            const period = periodFilter.options[periodFilter.selectedIndex].text.toLowerCase();

            if (periodInfo && periodInfo.start_date && periodInfo.end_date) {
                if (periodInfo.period_type === 'day') {
                    subtitle.textContent = `–ó–∞ ${formatDate(new Date(periodInfo.end_date))}`;
                } else {
                    subtitle.textContent = `–ó–∞ –ø–µ—Ä–∏–æ–¥ ${formatDate(new Date(periodInfo.start_date))} - ${formatDate(new Date(periodInfo.end_date))}`;
                }
            } else {
                subtitle.textContent = `–ó–∞ ${period}${dateFilter.value ? ' ' + formatDate(new Date(dateFilter.value)) : ''}`;
            }
        }
    } else if (activeTabId === 'activity-timesheet-tab') {
        // –î–ª—è —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–∞–±–µ–ª—è
        const startDateEl = document.getElementById('activity-start-date');
        const endDateEl = document.getElementById('activity-end-date');

        if (startDateEl && endDateEl && startDateEl.value && endDateEl.value) {
            const startDate = new Date(startDateEl.value);
            const endDate = new Date(endDateEl.value);

            if (startDateEl.value === endDateEl.value) {
                subtitle.textContent = `–ó–∞ ${formatDate(startDate)}`;
            } else {
                subtitle.textContent = `–ó–∞ –ø–µ—Ä–∏–æ–¥ ${formatDate(startDate)} - ${formatDate(endDate)}`;
            }
        } else {
            subtitle.textContent = '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        }
    } else if (activeTabId === 'chronology-tab') {
        // –î–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        const chronologyDate = document.getElementById('chronology-date');

        if (chronologyDate && chronologyDate.value) {
            subtitle.textContent = `–ó–∞ ${formatDate(new Date(chronologyDate.value))}`;
        } else {
            subtitle.textContent = '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É';
        }
    } else if (activeTabId === 'timesheet-tab') {
        // –î–ª—è —Ç–∞–±–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–∞–±–µ–ª—è
        const timesheetStartDate = document.getElementById('timesheet-start-date');
        const timesheetEndDate = document.getElementById('timesheet-end-date');

        if (timesheetStartDate && timesheetEndDate && timesheetStartDate.value && timesheetEndDate.value) {
            const startDate = new Date(timesheetStartDate.value);
            const endDate = new Date(timesheetEndDate.value);

            if (timesheetStartDate.value === timesheetEndDate.value) {
                subtitle.textContent = `–ó–∞ ${formatDate(startDate)}`;
            } else {
                subtitle.textContent = `–ó–∞ –ø–µ—Ä–∏–æ–¥ ${formatDate(startDate)} - ${formatDate(endDate)}`;
            }
        } else {
            subtitle.textContent = '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        }
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ - –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
        subtitle.textContent = '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
document.addEventListener('DOMContentLoaded', function () {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabLinks = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    tabLinks.forEach(tab => {
        tab.addEventListener('shown.bs.tab', function (e) {
            console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –Ω–∞:', e.target.id);

            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
            if (e.target.id === 'timeline-tab') {
                // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
                loadDashboardData();
            } else if (e.target.id === 'activity-timesheet-tab') {
                // –î–ª—è —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
                const activityTable = document.getElementById('activity-timesheet-table');
                if (activityTable && activityTable.querySelector('tbody').childElementCount <= 1) {
                    loadActivityTimesheet();
                }
            } else if (e.target.id === 'chronology-tab') {
                // –î–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞
                const chronologyDate = document.getElementById('chronology-date');
                if (chronologyDate && chronologyDate.value) {
                    loadChronology();
                }
            }
            // –£–¥–∞–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è timesheet-tab - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ dashboard-timesheet.js
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    const chronologySortSelect = document.getElementById('chronology-sort');
    if (chronologySortSelect) {
        chronologySortSelect.addEventListener('change', function () {
            const sortOrder = this.value;
            console.log('–ò–∑–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞:', sortOrder);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            if (window.chronologyData && window.chronologyData.length > 0) {
                updateChronologyTable(window.chronologyData, sortOrder);
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
function updateMouseActivityChart(mouseData) {
    if (!mouseData || mouseData.length === 0) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏');
        document.getElementById('no-mouse-data').style.display = 'block';
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ canvas
    const chartElement = document.getElementById('mouse-activity-chart');
    if (!chartElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç mouse-activity-chart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        const ctx = chartElement.getContext('2d');
        if (!ctx) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è canvas');
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedMouseData = [...mouseData].sort((a, b) => {
            return new Date(a.timestamp) - new Date(b.timestamp);
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        const dataToShow = sortedMouseData.slice(-50);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const times = dataToShow.map(r => {
            const date = new Date(r.timestamp);
            return date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
        });

        const clicks = dataToShow.map(r => parseInt(r.mouse_clicks) || 0);
        const movements = dataToShow.map(r => parseInt(r.mouse_movements) || 0);

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.mouseChart) {
            window.mouseChart.destroy();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        window.mouseChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: times,
                datasets: [
                    {
                        label: '–ö–ª–∏–∫–∏ –º—ã—à–∏',
                        data: clicks,
                        borderColor: '#1e3a8a',
                        backgroundColor: 'rgba(30, 58, 138, 0.1)',
                        borderWidth: 2,
                        tension: 0.1
                    },
                    {
                        label: '–î–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏',
                        data: movements,
                        borderColor: '#dc3545',
                        backgroundColor: 'rgba(220, 53, 69, 0.1)',
                        borderWidth: 2,
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: '–í—Ä–µ–º—è'
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏'
                    }
                }
            }
        });

        document.getElementById('no-mouse-data').style.display = 'none';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏:', error);
        document.getElementById('no-mouse-data').style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
function updateMouseActivityTable(mouseData) {
    const tbody = document.getElementById('mouse-activity-table')?.querySelector('tbody');
    if (!tbody) return;

    if (!mouseData || mouseData.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏</td></tr>';
        return;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    tbody.innerHTML = '';

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)
    const recentMouseData = [...mouseData].sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    }).slice(0, 10);

    recentMouseData.forEach(item => {
        const row = document.createElement('tr');
        const timestamp = new Date(item.timestamp);
        row.innerHTML = `
            <td>${formatDate(timestamp)} ${formatTime(timestamp)}</td>
            <td>${item.mouse_clicks || 0}</td>
            <td>${item.mouse_movements || 0}</td>
            <td>${item.device_id || '-'}</td>
        `;
        tbody.appendChild(row);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatDuration(seconds) {
    if (!seconds || isNaN(seconds) || seconds < 0) {
        return '0—Å';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (typeof seconds === 'string' && seconds.includes('.')) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ—á–∫–æ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç "—Å–µ–∫—É–Ω–¥—ã.–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã"
        seconds = parseFloat(seconds);
    }

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥
    seconds = Math.round(seconds);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (seconds < 60) {
        // –ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return `${seconds}—Å`;
    } else if (seconds < 3600) {
        // –ú–µ–Ω–µ–µ —á–∞—Å–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö –∏ —Å–µ–∫—É–Ω–¥–∞—Ö
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        if (remainingSeconds === 0) {
            return `${minutes}–º`;
        } else {
            return `${minutes}–º ${remainingSeconds}—Å`;
        }
    } else {
        // –ë–æ–ª—å—à–µ —á–∞—Å–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
        const hours = Math.floor(seconds / 3600);
        const remainingMinutes = Math.floor((seconds % 3600) / 60);
        if (remainingMinutes === 0) {
            return `${hours}—á`;
        } else {
            return `${hours}—á ${remainingMinutes}–º`;
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadDashboardData() {
    const employeeFilter = document.getElementById('employee-filter');
    const deviceFilter = document.getElementById('device-filter');
    const dateFilter = document.getElementById('date-filter');
    const periodFilter = document.getElementById('period-filter');
    const activityTypeFilter = document.getElementById('activity-type-filter');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
    if (dateFilter && !dateFilter.value) {
        const today = new Date();
        dateFilter.value = today.toISOString().slice(0, 10);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const selectedDate = dateFilter && dateFilter.value ? new Date(dateFilter.value) : new Date();
    const selectedPeriod = periodFilter && periodFilter.value ? periodFilter.value : 'day';

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    let startDate = new Date(selectedDate);
    let endDate = new Date(selectedDate);

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    if (selectedPeriod === 'day') {
        // –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ "–¥–µ–Ω—å" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        startDate = new Date(selectedDate);
        endDate = new Date(selectedDate);
    } else if (selectedPeriod === 'week') {
        // –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ "–Ω–µ–¥–µ–ª—è" - –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        startDate = new Date(selectedDate);
        startDate.setDate(startDate.getDate() - 6); // 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    } else if (selectedPeriod === 'month') {
        // –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ "–º–µ—Å—è—Ü" - –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        startDate = new Date(selectedDate);
        startDate.setMonth(startDate.getMonth() - 1);
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞
        if (startDate.getDate() !== selectedDate.getDate()) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            startDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 0);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
    const formattedStartDate = startDate.toISOString().split('T')[0];
    const formattedEndDate = endDate.toISOString().split('T')[0];

    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${formattedStartDate} –¥–æ ${formattedEndDate}, –ø–µ—Ä–∏–æ–¥: ${selectedPeriod}`);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    if (employeeFilter && employeeFilter.value) params.append('employee_id', employeeFilter.value);
    if (deviceFilter && deviceFilter.value) params.append('device_id', deviceFilter.value);
    params.append('date', dateFilter.value); // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    params.append('period', periodFilter.value); // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
    params.append('start_date', formattedStartDate);
    params.append('end_date', formattedEndDate);

    if (activityTypeFilter && activityTypeFilter.value !== 'all') {
        params.append('activity_type', activityTypeFilter.value);
    }

    try {
        showLoading(true);
        const lastUpdateElement = document.getElementById('last-update');
        if (lastUpdateElement) {
            lastUpdateElement.textContent = new Date().toLocaleTimeString();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ –∂–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, —á—Ç–æ –∏ –≤ direct-data.html
        let monitoringData = [], windowData = [], browserData = [], mouseData = [], websiteVisitsData = [];

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try {
            const monitoringResponse = await fetch(`/api/public/monitoring/data?${params.toString()}`);
            if (monitoringResponse.ok) {
                monitoringData = await monitoringResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', monitoringData);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –¥–∞–Ω–Ω—ã–µ
                if (monitoringData && monitoringData.length > 0) {
                    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    const latestData = monitoringData[monitoringData.length - 1];
                    updateResourceMetrics(latestData);
                }
            } else {
                console.error(`HTTP error ${monitoringResponse.status}: ${await monitoringResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
        try {
            const windowResponse = await fetch(`/api/public/activity/windows?${params.toString()}`);
            if (windowResponse.ok) {
                windowData = await windowResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω:', windowData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                const filters = getCurrentFilters();
                windowData = filterDataByEmployee(windowData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', windowData);
            } else {
                console.error(`HTTP error ${windowResponse.status}: ${await windowResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–∫–æ–Ω:', error);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        try {
            const browserResponse = await fetch(`/api/public/activity/browsers?${params.toString()}`);
            if (browserResponse.ok) {
                browserData = await browserResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', browserData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                const filters = getCurrentFilters();
                browserData = filterDataByEmployee(browserData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', browserData);
            } else {
                console.error(`HTTP error ${browserResponse.status}: ${await browserResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤:', error);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤
        try {
            const websiteResponse = await fetch(`/api/public/activity/website_visits?${params.toString()}`);
            if (websiteResponse.ok) {
                websiteVisitsData = await websiteResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤:', websiteVisitsData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                const filters = getCurrentFilters();
                websiteVisitsData = filterDataByEmployee(websiteVisitsData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', websiteVisitsData);
            } else {
                console.error(`HTTP error ${websiteResponse.status}: ${await websiteResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤:', error);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
        try {
            const mouseResponse = await fetch(`/api/public/activity/mouse?${params.toString()}`);
            if (mouseResponse.ok) {
                mouseData = await mouseResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏:', mouseData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                const filters = getCurrentFilters();
                mouseData = filterDataByEmployee(mouseData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', mouseData);
            } else {
                console.error(`HTTP error ${mouseResponse.status}: ${await mouseResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏:', error);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        let screenshotsData = [];
        try {
            const screenshotsResponse = await fetch(`/api/public/screenshots?${params.toString()}`);
            if (screenshotsResponse.ok) {
                screenshotsData = await screenshotsResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', screenshotsData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                const filters = getCurrentFilters();
                screenshotsData = filterDataByEmployee(screenshotsData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', screenshotsData);
            } else {
                console.error(`HTTP error ${screenshotsResponse.status}: ${await screenshotsResponse.text()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', error);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –≤ UI
        updatePeriodDisplay(formattedStartDate, formattedEndDate, selectedPeriod);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const data = {
            resources: monitoringData,
            activities: windowData,
            website_visits: websiteVisitsData,
            browser_activity: browserData,
            mouse_activity: mouseData,
            screenshots: screenshotsData,
            period_info: {
                start_date: formattedStartDate,
                end_date: formattedEndDate,
                period_type: selectedPeriod
            }
        };
        
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    window.currentDashboardData = data;
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', data);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫
        const hasData = windowData && windowData.length > 0;
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫:', { hasData, windowDataLength: windowData.length });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (hasData) {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try { updateMetrics(data); }
            catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', e);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                displaySavedMetrics();
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏');
            displaySavedMetrics();
        }

        try { updateWorkingTimeTable(windowData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', e); }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const mergedActivities = data ? mergeAllActivities(data) : [];
        console.log('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', mergedActivities.length);

        try { updateActivityTable(mergedActivities); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', e); }

        try { updateActivityChart(mergedActivities); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', e); }

        try {
            if (monitoringData && monitoringData.length > 0) {
                updateResourceChart(monitoringData);
            } else {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤');
            }
        }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:', e); }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è–º –≤–µ–±-—Å–∞–π—Ç–æ–≤
        try { updateBrowserChart(data); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', e); }

        try { updateWebsitesList(websiteVisitsData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤–µ–±-—Å–∞–π—Ç–æ–≤:', e); }

        try { updateWebsiteActivityChart(websiteVisitsData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', e); }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
        try { updateMouseActivityChart(mouseData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏:', e); }

        try { updateMouseActivityTable(mouseData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏:', e); }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        try { updateScreenshots(screenshotsData); }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', e); }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        // try { updateTimeScale(dateFilter.value, mergedActivities, selectedPeriod); }
        // catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:', e); }

        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
        // try { setTimeout(updateMetricsFromTableData, 1000); } // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        // catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', e); }

        // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —à–∞–ø–∫–µ –Ω–∞ –±–∞–∑–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        try { 
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            if (typeof updateMainMetricsWithRealActivity === 'function') {
                console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏');
                updateMainMetricsWithRealActivity(windowData);
            } else {
                console.log('‚ö†Ô∏è –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç');
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                updateMetrics(windowData);
            }
        }
        catch (e) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', e); }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
        window.lastLoadedData = {
            activities: windowData,
            mouse: mouseData,
            screenshots: screenshotsData,
            monitoring: monitoringData,
            browser_activity: browserData,
            website_visits: websiteVisitsData
        };

        showLoading(false);
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        showLoading(false);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ UI
function updatePeriodDisplay(startDate, endDate, periodType) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const formattedStartDate = formatDate(startDateObj);
    const formattedEndDate = formatDate(endDateObj);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–∏–æ–¥
    const metricSubtitles = document.querySelectorAll('.metric-subtitle');
    metricSubtitles.forEach(subtitle => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        if (subtitle.textContent.toLowerCase().includes('–∑–∞ –ø–µ—Ä–∏–æ–¥') ||
            subtitle.textContent.toLowerCase().includes('–æ—Ç –æ–±—â–µ–≥–æ') ||
            subtitle.textContent === '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' ||
            subtitle.textContent === '–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å') {

            if (periodType === 'day') {
                subtitle.textContent = subtitle.textContent.replace(/–ó–∞ –ø–µ—Ä–∏–æ–¥.*$/i, `–ó–∞ ${formattedEndDate}`);
            } else {
                subtitle.textContent = subtitle.textContent.replace(/–ó–∞ –ø–µ—Ä–∏–æ–¥.*$/i, `–ó–∞ –ø–µ—Ä–∏–æ–¥ ${formattedStartDate} - ${formattedEndDate}`);
            }
        }
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
/* let lastTimeScaleData = {
    date: null,
    activities: [],
    period: 'day'
}; */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∞
function updateTimeScale(dateStr, activityData, periodType) {
    const dateDisplay = document.querySelector('.date-display');
    const timeScaleRuler = document.querySelector('.time-scale-ruler');

    if (!dateDisplay || !timeScaleRuler) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º lastTimeScaleData –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if (!activityData || activityData.length === 0) {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à...');
        if (lastTimeScaleData && lastTimeScaleData.date === dateStr && lastTimeScaleData.activities.length > 0) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:', lastTimeScaleData.date);
            activityData = lastTimeScaleData.activities;
            periodType = periodType || lastTimeScaleData.period;
        } else {
            console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –∏ –Ω–µ—Ç –≤ –∫–µ—à–µ');
        }
    } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        lastTimeScaleData = {
            date: dateStr,
            activities: activityData,
            period: periodType || 'day'
        };
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:', dateStr, periodType || 'day');
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    const date = new Date(dateStr);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞
    let displayText = '';
    if (periodType === 'day') {
        displayText = date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long'
        });
    } else if (periodType === 'week') {
        const startDate = new Date(date);
        startDate.setDate(startDate.getDate() - 6);
        displayText = `–ù–µ–¥–µ–ª—è: ${startDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })} - ${date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`;
    } else if (periodType === 'month') {
        const startDate = new Date(date);
        startDate.setMonth(startDate.getMonth() - 1);
        displayText = `–ú–µ—Å—è—Ü: ${startDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })} - ${date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`;
    }

    dateDisplay.textContent = displayText;

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (activityData && activityData.length > 0) {
        const activityMarkers = timeScaleRuler.querySelectorAll('.activity-marker');
        activityMarkers.forEach(marker => marker.remove());
    } else {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    const currentPosition = ((currentHour + currentMinute / 60) / 24) * 100;

    let currentTimeMarker = timeScaleRuler.querySelector('.current-time-marker');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –∏ –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –¥–µ–Ω—å
    if (dateStr === today && periodType === 'day') {
        if (!currentTimeMarker) {
            currentTimeMarker = document.createElement('div');
            currentTimeMarker.className = 'current-time-marker';
            timeScaleRuler.appendChild(currentTimeMarker);
        }
        currentTimeMarker.style.left = `${currentPosition}%`;
        currentTimeMarker.style.display = 'block';
    } else if (currentTimeMarker) {
        currentTimeMarker.style.display = 'none';
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —à–∫–∞–ª—É
    if (activityData && activityData.length > 0) {
        // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "–¥–µ–Ω—å"
        let filteredActivities = activityData;
        if (periodType === 'day') {
            filteredActivities = activityData.filter(activity => {
                const activityDate = new Date(activity.timestamp).toISOString().split('T')[0];
                return activityDate === dateStr;
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        filteredActivities.forEach(activity => {
            if (!activity.timestamp) return;

            const activityTime = new Date(activity.timestamp);
            const hour = activityTime.getHours();
            const minute = activityTime.getMinutes();
            const position = ((hour + minute / 60) / 24) * 100;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            let durationMinutes = activity.duration ? Math.round(activity.duration / 60) : 1;

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            const width = Math.max(0.2, (durationMinutes / 1440) * 100);

            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const activityMarker = document.createElement('div');
            activityMarker.className = 'activity-marker';
            activityMarker.style.left = `${position}%`;
            activityMarker.style.width = `${width}%`;
            activityMarker.textContent = activity.app_name ?
                `${activity.app_name.substring(0, 15)}` :
                (activity.window_title ? `${activity.window_title.substring(0, 15)}` : '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');

            const timestamp = new Date(activity.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            const duration = durationMinutes > 0 ? `${durationMinutes}–º` : '< 1–º';
            activityMarker.title = `${timestamp} - ${activity.app_name || ''} - ${activity.window_title || ''} (${duration})`;

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ —à–∫–∞–ª—É
            timeScaleRuler.appendChild(activityMarker);
        });
    } else {
        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —à–∫–∞–ª–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)
        const activitiesTable = document.getElementById('timeline-table');
        if (activitiesTable) {
            const rows = activitiesTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 5) {
                    const timeText = cells[0].textContent;
                    const appName = cells[1].textContent;
                    const windowTitle = cells[2].textContent;
                    const durationText = cells[4].textContent;

                    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    const timeParts = timeText.split(':');
                    if (timeParts.length === 2) {
                        const hour = parseInt(timeParts[0]);
                        const minute = parseInt(timeParts[1]);
                        const position = ((hour + minute / 60) / 24) * 100;

                        // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –º–∞—Ä–∫–µ—Ä–∞
                        let durationMinutes = 0;
                        if (durationText.includes('–º')) {
                            durationMinutes = parseInt(durationText.replace('–º', ''));
                        }

                        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        const width = Math.max(0.2, (durationMinutes / 1440) * 100);

                        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        const activityMarker = document.createElement('div');
                        activityMarker.className = 'activity-marker';
                        activityMarker.style.left = `${position}%`;
                        activityMarker.style.width = `${width}%`;
                        activityMarker.textContent = `${appName} - ${windowTitle.substring(0, 30)}`;
                        activityMarker.title = `${timeText} - ${appName} - ${windowTitle} (${durationText})`;

                        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ —à–∫–∞–ª—É
                        timeScaleRuler.appendChild(activityMarker);
                    }
                }
            });
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading(isLoading) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        button.disabled = isLoading;
    });
}

function showError(message) {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ HTTP 404 –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö —Ç–∞–±–µ–ª—è
    if (message && (message.includes('HTTP error') ||
        message.includes('status: 404') ||
        message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è'))) {
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.warn('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', message);
        return;
    }

    console.error(message);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    let errorContainer = document.getElementById('error-container');

    if (!errorContainer) {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        errorContainer = document.createElement('div');
        errorContainer.id = 'error-container';
        errorContainer.className = 'alert alert-danger alert-dismissible fade show fixed-top mx-auto mt-3';
        errorContainer.style.maxWidth = '500px';
        errorContainer.style.zIndex = '9999';
        errorContainer.innerHTML = `
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
            <div class="error-message">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                ${message}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
        document.body.appendChild(errorContainer);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (errorContainer.parentNode) {
                errorContainer.parentNode.removeChild(errorContainer);
            }
        }, 5000);
    } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        errorContainer.querySelector('.error-message').innerHTML = `
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            ${message}
        `;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        clearTimeout(errorContainer.dataset.timeout);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        errorContainer.dataset.timeout = setTimeout(() => {
            if (errorContainer.parentNode) {
                errorContainer.parentNode.removeChild(errorContainer);
            }
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å")
function refreshData() {
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    clearSessionCache();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const refreshButton = document.querySelector('button[onclick="refreshData()"]');
    if (refreshButton) {
        const originalText = refreshButton.innerHTML;
        refreshButton.innerHTML = '<i class="bi bi-arrow-repeat"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
        refreshButton.disabled = true;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        loadDashboardData().finally(() => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            refreshButton.innerHTML = originalText;
            refreshButton.disabled = false;
        });
    } else {
    loadDashboardData();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
function clearSessionCache() {
    if (window.sessionData) {
        delete window.sessionData;
    }
}

// –£–î–ê–õ–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –¢–ê–ë–ï–õ–Ø:
// - async function loadTimesheet() - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–µ–ª—è
// - function renderTimesheet(data, startDate, endDate) - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–µ–ª—è
// - function renderAlternativeTimesheet(data, startDate, endDate) - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
//
// –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–µ–ª—è —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ dashboard-timesheet.js
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–Ω—è
async function loadChronology() {
    const chronologyDate = document.getElementById('chronology-date').value;

    if (!chronologyDate) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏");
        return;
    }

    try {
        showLoading(true);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        const params = new URLSearchParams();
        params.append('start_date', chronologyDate);
        params.append('end_date', chronologyDate);

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ DOM
        const deviceFilter = document.getElementById('device-filter');
        const employeeFilter = document.getElementById('employee-filter');

        // –î–æ–±–∞–≤–ª—è–µ–º device_id –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
        if (deviceFilter && deviceFilter.value) {
            params.append('device_id', deviceFilter.value);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º employee_id –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
        if (employeeFilter && employeeFilter.value) {
            params.append('employee_id', employeeFilter.value);
        }

        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é –∑–∞ –¥–∞—Ç—É: ${chronologyDate} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params.toString());

        const apiUrl = `/api/public/activity/windows?${params.toString()}`;
        console.log(`üåê –ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞: ${apiUrl}`);

        const windowResponse = await fetch(apiUrl);
        if (!windowResponse.ok) {
            throw new Error(`HTTP error! status: ${windowResponse.status}`);
        }

        const windowData = await windowResponse.json();
        console.log('–î–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –æ–∫–æ–Ω:', windowData);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        const filters = getCurrentFilters();
        let filteredByEmployee = filterDataByEmployee(windowData, filters.employeeId, filters.deviceId);
        console.log('–î–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –æ–∫–æ–Ω –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:', filteredByEmployee);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—ã: ${chronologyDate}`);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        const availableDates = new Set();
        filteredByEmployee.forEach(item => {
            if (item.timestamp) {
                const itemDate = new Date(item.timestamp).toISOString().split('T')[0];
                availableDates.add(itemDate);
            }
        });
        console.log('üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö:', Array.from(availableDates).sort());

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ timestamp
        const filteredData = filteredByEmployee.filter(item => {
            if (!item.timestamp) return false;

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ timestamp —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            const timestampStr = item.timestamp.toString();
            const matches = timestampStr.startsWith(chronologyDate);

            if (matches) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∑–∞ ${chronologyDate}:`, {
                    timestamp: item.timestamp,
                    app_name: item.app_name
                });
            }

            return matches;
        });

        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ ${chronologyDate}: ${filteredData.length}`);

        if (filteredData.length === 0) {
            console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ${chronologyDate}`);
            console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:', Array.from(availableDates).sort());

            document.getElementById('chronology-table').querySelector('tbody').innerHTML =
                `<tr><td colspan="5" class="text-center">
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ${chronologyDate}<br>
                    <small class="text-muted">–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: ${Array.from(availableDates).sort().join(', ')}</small>
                </td></tr>`;

            // –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            document.getElementById('chronology-websites-table').querySelector('tbody').innerHTML =
                `<tr><td colspan="4" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td></tr>`;
            document.getElementById('folders-activity-table').querySelector('tbody').innerHTML =
                `<tr><td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td></tr>`;
            document.getElementById('programs-activity-table').querySelector('tbody').innerHTML =
                `<tr><td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td></tr>`;

            showLoading(false);
        return;
    }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
        window.chronologyData = filteredData;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const sortSelect = document.getElementById('chronology-sort');
        const sortOrder = sortSelect ? sortSelect.value : 'desc';
        updateChronologyTable(filteredData, sortOrder);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–∞–ø–∫–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
        const folderActivity = processFolderActivity(filteredData);
        const programActivity = processProgramActivity(filteredData);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        updateFoldersActivityTable(folderActivity);
        updateProgramsActivityTable(programActivity);

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö
        try {
            const websiteResponse = await fetch(`/api/public/activity/website_visits?${params.toString()}`);
            if (websiteResponse.ok) {
                const websiteData = await websiteResponse.json();
                console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö:', websiteData);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                const filters = getCurrentFilters();
                let filteredWebsiteByEmployee = filterDataByEmployee(websiteData, filters.employeeId, filters.deviceId);
                console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:', filteredWebsiteByEmployee);

                // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
                console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã: ${chronologyDate}`);

                const filteredWebsiteData = filteredWebsiteByEmployee.filter(item => {
                    if (!item.timestamp) return false;

                    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ timestamp —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                    const timestampStr = item.timestamp.toString();
                    return timestampStr.startsWith(chronologyDate);
                });

                console.log(`üåê –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∑–∞ ${chronologyDate}: ${filteredWebsiteData.length}`);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∑–∂–µ
                window.chronologyWebsiteData = filteredWebsiteData;

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
                updateChronologyWebsitesTable(filteredWebsiteData, sortOrder);
            } else {
                console.error(`HTTP error ${websiteResponse.status}: ${await websiteResponse.text()}`);
                updateChronologyWebsitesTable([], sortOrder);
            }
        } catch (websiteError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö:', websiteError);
            updateChronologyWebsitesTable([], sortOrder);
        }

        showLoading(false);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–Ω—è
function updateChronologyTable(chronologyData, sortOrder = 'desc') {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', chronologyData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!chronologyData || chronologyData.length === 0) {
        document.getElementById('chronology-table').querySelector('tbody').innerHTML =
            '<tr><td colspan="4" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td></tr>';
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    const sortedEvents = [...chronologyData].sort((a, b) => {
        return new Date(a.timestamp) - new Date(b.timestamp);
    });

    // –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç)
    const MAJOR_GAP_MINUTES = 15; // 30 –º–∏–Ω—É—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    const MINOR_GAP_MINUTES = 2;  // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–ø–µ—Ä–∏–æ–¥–æ–≤
    const MIN_INACTIVE_MINUTES = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    const majorPeriods = [];
    let currentMajorPeriod = null;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    sortedEvents.forEach((event, index) => {
        const eventDate = new Date(event.timestamp);
        const eventDuration = event.duration || 60;
        const eventEndDate = new Date(eventDate.getTime() + eventDuration * 1000);

        if (!currentMajorPeriod) {
            currentMajorPeriod = {
                startTime: eventDate,
                endTime: eventEndDate,
                events: [event]
            };
        } else {
            const lastEvent = currentMajorPeriod.events[currentMajorPeriod.events.length - 1];
            const lastEventDuration = lastEvent.duration || 60;
            const lastEventEndDate = new Date(new Date(lastEvent.timestamp).getTime() + lastEventDuration * 1000);
            const timeDiffMinutes = (eventDate - lastEventEndDate) / (1000 * 60);

            // –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if (timeDiffMinutes >= MAJOR_GAP_MINUTES) {
                majorPeriods.push(currentMajorPeriod);
                currentMajorPeriod = {
                    startTime: eventDate,
                    endTime: eventEndDate,
                    events: [event]
                };
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –∫—Ä—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                currentMajorPeriod.events.push(event);
                if (eventEndDate > currentMajorPeriod.endTime) {
                    currentMajorPeriod.endTime = eventEndDate;
                }
            }
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if (currentMajorPeriod) {
        majorPeriods.push(currentMajorPeriod);
    }

    // –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    majorPeriods.forEach(majorPeriod => {
        const minorPeriods = [];
        let currentMinorPeriod = null;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const majorPeriodEvents = [...majorPeriod.events].sort((a, b) => {
            return new Date(a.timestamp) - new Date(b.timestamp);
        });

        majorPeriodEvents.forEach((event, index) => {
            const eventDate = new Date(event.timestamp);
            const eventDuration = event.duration || 60;
            const eventEndDate = new Date(eventDate.getTime() + eventDuration * 1000);

            if (!currentMinorPeriod) {
                currentMinorPeriod = {
                    startTime: eventDate,
                    endTime: eventEndDate,
                    events: [event]
                };
            } else {
                const lastEvent = currentMinorPeriod.events[currentMinorPeriod.events.length - 1];
                const lastEventDuration = lastEvent.duration || 60;
                const lastEventEndDate = new Date(new Date(lastEvent.timestamp).getTime() + lastEventDuration * 1000);
                const timeDiffMinutes = (eventDate - lastEventEndDate) / (1000 * 60);

                // –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–ø–µ—Ä–∏–æ–¥
                if (timeDiffMinutes >= MINOR_GAP_MINUTES) {
                    minorPeriods.push(currentMinorPeriod);
                    currentMinorPeriod = {
                        startTime: eventDate,
                        endTime: eventEndDate,
                        events: [event]
                    };
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –ø–æ–¥–ø–µ—Ä–∏–æ–¥
                    currentMinorPeriod.events.push(event);
                    if (eventEndDate > currentMinorPeriod.endTime) {
                        currentMinorPeriod.endTime = eventEndDate;
                    }
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–ø–µ—Ä–∏–æ–¥
        if (currentMinorPeriod) {
            minorPeriods.push(currentMinorPeriod);
        }

        majorPeriod.minorPeriods = minorPeriods;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    const finalMajorPeriods = [...majorPeriods];
    if (sortOrder === 'desc') {
        finalMajorPeriods.reverse();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tbody = document.getElementById('chronology-table').querySelector('tbody');
    tbody.innerHTML = '';

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∫—Ä—É–ø–Ω—ã–º–∏ —Å–ø–æ–π–ª–µ—Ä–∞–º–∏
    finalMajorPeriods.forEach((majorPeriod, majorIndex) => {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const majorStartTime = majorPeriod.startTime;
        const majorEndTime = majorPeriod.endTime;
        const majorDurationMs = majorEndTime - majorStartTime;
        const majorDurationSeconds = Math.floor(majorDurationMs / 1000);
        const totalEvents = majorPeriod.events.length;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const majorStartTimeStr = `${majorStartTime.getHours().toString().padStart(2, '0')}:${majorStartTime.getMinutes().toString().padStart(2, '0')}:${majorStartTime.getSeconds().toString().padStart(2, '0')}`;
        const majorEndTimeStr = `${majorEndTime.getHours().toString().padStart(2, '0')}:${majorEndTime.getMinutes().toString().padStart(2, '0')}:${majorEndTime.getSeconds().toString().padStart(2, '0')}`;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        let majorDurationStr;
        if (majorDurationSeconds < 60) {
            majorDurationStr = `${majorDurationSeconds} —Å–µ–∫`;
        } else if (majorDurationSeconds < 3600) {
            const minutes = Math.floor(majorDurationSeconds / 60);
            const seconds = majorDurationSeconds % 60;
            majorDurationStr = `${minutes} –º–∏–Ω${seconds > 0 ? ` ${seconds} —Å–µ–∫` : ''}`;
        } else {
            const hours = Math.floor(majorDurationSeconds / 3600);
            const minutes = Math.floor((majorDurationSeconds % 3600) / 60);
            majorDurationStr = `${hours} —á${minutes > 0 ? ` ${minutes} –º–∏–Ω` : ''}`;
        }

        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–ø–Ω—ã–π —Å–ø–æ–π–ª–µ—Ä
        const majorRow = document.createElement('tr');
        majorRow.className = 'major-period-header';
        majorRow.dataset.majorIndex = majorIndex;

        majorRow.innerHTML = `
            <td colspan="4" class="major-period-spoiler" style="cursor: pointer; background-color: #e3f2fd; padding: 15px; border: 2px solid #2196f3; border-radius: 8px;">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <i class="bi bi-chevron-down period-icon me-2" style="font-size: 1.2em;"></i>
                        <span class="time-badge fw-bold" style="font-size: 1.1em;">${majorStartTimeStr} - ${majorEndTimeStr}</span>
                        <span class="duration-badge ms-2" style="font-size: 1.1em; font-weight: bold;">(${majorDurationStr})</span>
                        <span class="events-badge ms-2" style="font-size: 1.0em;">(${totalEvents} ${totalEvents === 1 ? '—Å–æ–±—ã—Ç–∏–µ' : totalEvents < 5 ? '—Å–æ–±—ã—Ç–∏—è' : '—Å–æ–±—ã—Ç–∏–π'})</span>
                    </div>
                    <div>
                        <span class="badge bg-primary" style="font-size: 0.9em;">–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</span>
                    </div>
                </div>
            </td>
        `;

        // –£–¥–∞–ª—è–µ–º addEventListener - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç—ã
        tbody.appendChild(majorRow);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const minorPeriodsToShow = sortOrder === 'desc' ? [...majorPeriod.minorPeriods].reverse() : majorPeriod.minorPeriods;

        minorPeriodsToShow.forEach((minorPeriod, minorIndex) => {
            const minorStartTime = minorPeriod.startTime;
            const minorEndTime = minorPeriod.endTime;
            const minorDurationMs = minorEndTime - minorStartTime;
            const minorDurationSeconds = Math.floor(minorDurationMs / 1000);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
            const minorStartTimeStr = `${minorStartTime.getHours().toString().padStart(2, '0')}:${minorStartTime.getMinutes().toString().padStart(2, '0')}:${minorStartTime.getSeconds().toString().padStart(2, '0')}`;
            const minorEndTimeStr = `${minorEndTime.getHours().toString().padStart(2, '0')}:${minorEndTime.getMinutes().toString().padStart(2, '0')}:${minorEndTime.getSeconds().toString().padStart(2, '0')}`;

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
            let minorDurationStr;
            if (minorDurationSeconds < 60) {
                minorDurationStr = `${minorDurationSeconds} —Å–µ–∫`;
            } else if (minorDurationSeconds < 3600) {
                const minutes = Math.floor(minorDurationSeconds / 60);
                const seconds = minorDurationSeconds % 60;
                minorDurationStr = `${minutes} –º–∏–Ω${seconds > 0 ? ` ${seconds} —Å–µ–∫` : ''}`;
            } else {
                const hours = Math.floor(minorDurationSeconds / 3600);
                const minutes = Math.floor((minorDurationSeconds % 3600) / 60);
                minorDurationStr = `${hours} —á${minutes > 0 ? ` ${minutes} –º–∏–Ω` : ''}`;
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–ø–æ–π–ª–µ—Ä
            const minorRow = document.createElement('tr');
            minorRow.className = 'minor-period-header';
            minorRow.dataset.parentMajor = majorIndex;
            minorRow.dataset.minorIndex = `${majorIndex}-${minorIndex}`;

            minorRow.innerHTML = `
                <td colspan="4" class="minor-period-spoiler" style="cursor: pointer; background-color: #f0f8ff; padding: 10px; margin-left: 20px; border-left: 3px solid #64b5f6;">
                    <div style="margin-left: 20px;">
                        <i class="bi bi-chevron-down period-icon me-2"></i>
                        <span class="time-badge">${minorStartTimeStr} - ${minorEndTimeStr}</span>
                        <span class="duration-badge ms-2">(${minorDurationStr})</span>
                        <span class="events-badge ms-2">(${minorPeriod.events.length} ${minorPeriod.events.length === 1 ? '—Å–æ–±—ã—Ç–∏–µ' : minorPeriod.events.length < 5 ? '—Å–æ–±—ã—Ç–∏—è' : '—Å–æ–±—ã—Ç–∏–π'})</span>
                        <span class="badge bg-success ms-2" style="font-size: 0.8em;">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
                    </div>
                </td>
            `;

            // –£–¥–∞–ª—è–µ–º addEventListener - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç—ã
            tbody.appendChild(minorRow);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
            const eventsToShow = sortOrder === 'desc' ? [...minorPeriod.events].reverse() : minorPeriod.events;

            eventsToShow.forEach((event, eventIndex) => {
                const eventDate = new Date(event.timestamp);
                const timeStr = `${eventDate.getHours().toString().padStart(2, '0')}:${eventDate.getMinutes().toString().padStart(2, '0')}:${eventDate.getSeconds().toString().padStart(2, '0')}`;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
                let durationStr = '-';
                let endTimeStr = '';
                if (event.duration) {
                    const duration = Math.floor(event.duration);
                    if (duration < 60) {
                        durationStr = `${duration} —Å–µ–∫`;
                    } else if (duration < 3600) {
                        const mins = Math.floor(duration / 60);
                        const secs = duration % 60;
                        durationStr = `${mins} –º–∏–Ω${secs > 0 ? ` ${secs} —Å–µ–∫` : ''}`;
                    } else {
                        const hours = Math.floor(duration / 3600);
                        const mins = Math.floor((duration % 3600) / 60);
                        durationStr = `${hours} —á${mins > 0 ? ` ${mins} –º–∏–Ω` : ''}`;
                    }

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
                    const endTime = new Date(eventDate.getTime() + (duration * 1000));
                    endTimeStr = `${endTime.getHours().toString().padStart(2, '0')}:${endTime.getMinutes().toString().padStart(2, '0')}:${endTime.getSeconds().toString().padStart(2, '0')}`;
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                const isBreak = isBreakActivity(event);
                const productivityClass = isBreak ? 'text-muted' :
                    (event.is_productive ? 'text-success' :
                        (event.is_productive === false ? 'text-danger' : ''));

                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è
                const eventRow = document.createElement('tr');
                eventRow.className = `activity-event ${productivityClass}`;
                eventRow.dataset.parentMajor = majorIndex;
                eventRow.dataset.parentMinor = `${majorIndex}-${minorIndex}`;

                // –§–æ—Ä–º–∏—Ä—É–µ–º —è—á–µ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                let timeCell = `<strong>${timeStr}</strong>`;
                if (endTimeStr && endTimeStr !== timeStr) {
                    timeCell += `<br><small class="text-muted">–¥–æ ${endTimeStr}</small>`;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                timeCell += createScreenshotButton(timeStr, event.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

                const appName = event.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const windowTitle = event.window_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

                eventRow.innerHTML = `
                    <td style="padding-left: 50px;">${timeCell}</td>
                    <td title="${appName}">${appName}</td>
                    <td title="${windowTitle}">${windowTitle}</td>
                    <td><strong>${durationStr}</strong></td>
                `;

                tbody.appendChild(eventRow);
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥)
        if (majorIndex < finalMajorPeriods.length - 1) {
            const nextMajorPeriod = finalMajorPeriods[majorIndex + 1];
            const currentEndTime = sortOrder === 'desc' ? nextMajorPeriod.endTime : majorPeriod.endTime;
            const nextStartTime = sortOrder === 'desc' ? majorPeriod.startTime : nextMajorPeriod.startTime;
            const inactiveMinutes = Math.floor((nextStartTime - currentEndTime) / (1000 * 60));

            if (inactiveMinutes >= MIN_INACTIVE_MINUTES) {
                const inactiveStartTimeStr = `${currentEndTime.getHours().toString().padStart(2, '0')}:${currentEndTime.getMinutes().toString().padStart(2, '0')}`;
                const inactiveEndTimeStr = `${nextStartTime.getHours().toString().padStart(2, '0')}:${nextStartTime.getMinutes().toString().padStart(2, '0')}`;

                const inactiveRow = document.createElement('tr');
                inactiveRow.className = 'inactive-period-row';
                inactiveRow.innerHTML = `
                    <td colspan="4" class="text-center text-muted" style="background-color: #f8f9fa; padding: 15px; border-top: 2px dashed #dee2e6; border-bottom: 2px dashed #dee2e6;">
                        <i class="bi bi-clock"></i>
                        <strong>–ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${inactiveStartTimeStr} - ${inactiveEndTimeStr}</strong>
                        <span class="badge bg-secondary ms-2">${Math.floor(inactiveMinutes / 60) > 0 ? Math.floor(inactiveMinutes / 60) + ' —á ' : ''}${inactiveMinutes % 60} –º–∏–Ω</span>
                    </td>
                `;
                tbody.appendChild(inactiveRow);
            }
        }
    });

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫—Ä—É–ø–Ω—ã–µ —Å–ø–æ–π–ª–µ—Ä—ã, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å–∞–º–æ–≥–æ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ)
    const allMajorHeaders = tbody.querySelectorAll('.major-period-header');
    allMajorHeaders.forEach((header, index) => {
        if (sortOrder === 'desc' && index > 0) {
            // –í –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (—Å–∞–º–æ–≥–æ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ)
            const majorIndex = header.dataset.majorIndex;
            toggleMajorPeriod(majorIndex);
        } else if (sortOrder === 'asc' && index < allMajorHeaders.length - 1) {
            // –í –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            const majorIndex = header.dataset.majorIndex;
            toggleMajorPeriod(majorIndex);
        }
    });

    console.log('–¢–∞–±–ª–∏—Ü–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å', finalMajorPeriods.length, '–∫—Ä—É–ø–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–æ–º
function isBreakActivity(activity) {
    if (!activity) return false;

    const title = (activity.window_title || '').toLowerCase();
    const appName = (activity.app_name || '').toLowerCase();

    const breakKeywords = [
        'idle', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'locked', 'screensaver', 'screen saver',
        '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞', 'lock screen', '–∑–∞—Å—Ç–∞–≤–∫–∞', '–ø–µ—Ä–µ—Ä—ã–≤', 'break'
    ];

    return breakKeywords.some(keyword => title.includes(keyword) || appName.includes(keyword));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–ø–∫–∞—Ö
function processFolderActivity(windowData) {
    const folderStats = {};

    windowData.forEach(item => {
        const windowTitle = item.window_title || '';
        // –ò—â–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –æ–∫–æ–Ω
        const folderMatch = windowTitle.match(/([A-Z]:\\[^"<>|?*]+)/i);
        if (folderMatch) {
            const folderPath = folderMatch[1];
            if (!folderStats[folderPath]) {
                folderStats[folderPath] = {
                    folder_path: folderPath,
                    duration: 0,
                    visits: 0
                };
            }
            folderStats[folderPath].duration += item.duration || 0;
            folderStats[folderPath].visits += 1;
        }
    });

    return Object.values(folderStats);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
function processProgramActivity(windowData) {
    console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const hasSmartCalculatorData = window.lastData && window.lastData.real_activity_stats;
    const smartActivities = hasSmartCalculatorData ? window.lastData.activities : null;
    
    if (hasSmartCalculatorData && smartActivities) {
        console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º');
        
        const programStats = {};
        
        smartActivities.forEach(item => {
            const appName = item.app_name || item.application || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥—Ä–∞–º–º
            const browserProcesses = ['chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe', 'brave.exe'];
            const processName = (item.process_name || item.app_name || '').toLowerCase();
            const isBrowser = browserProcesses.some(browser => processName.includes(browser.toLowerCase()));
            
            if (isBrowser) {
                console.log(`üåê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä: ${appName}`);
                return;
            }
            
            if (!programStats[appName]) {
                programStats[appName] = {
                    app_name: appName,
                    duration: 0,
                    launches: 0,
                    real_activity_time: 0,
                    is_smart_calculated: true
                };
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            let activityDuration = item.duration || 0;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (item.is_real_activity !== undefined) {
                if (item.is_real_activity) {
                    // –†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
                    programStats[appName].real_activity_time += activityDuration;
                    programStats[appName].duration += activityDuration;
                } else if (item.activity_type === 'background') {
                    // –§–æ–Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    const backgroundTime = Math.min(activityDuration * 0.05, 30); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö
                    programStats[appName].duration += backgroundTime;
                } else {
                    // –ü–∞—Å—Å–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                    const passiveTime = activityDuration * 0.1; // 10% –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
                    programStats[appName].duration += passiveTime;
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
                programStats[appName].duration += activityDuration;
            }
            
            programStats[appName].launches += 1;
            
            console.log(`üì± ${appName}: ${Math.round(activityDuration/60)}–º (—Ä–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${item.is_real_activity}, —Ç–∏–ø: ${item.activity_type})`);
        });
        
        const result = Object.values(programStats);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —É–º–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º:', result.length, '–ø—Ä–æ–≥—Ä–∞–º–º');
        return result;
    } else {
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º');
        
        const programStats = {};

        windowData.forEach(item => {
            const appName = item.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            if (!programStats[appName]) {
                programStats[appName] = {
                    app_name: appName,
                    duration: 0,
                    launches: 0,
                    is_smart_calculated: false
                };
            }
            programStats[appName].duration += item.duration || 0;
            programStats[appName].launches += 1;
        });

        return Object.values(programStats);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–∞–ø–∫–∞—Ö
function updateFoldersActivityTable(foldersData) {
    const tbody = document.querySelector('#folders-activity-table tbody');
    if (!tbody) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–∞–ø–∫–∞—Ö');
        return;
    }

    tbody.innerHTML = '';

    if (!foldersData || foldersData.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–∞–ø–∫–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td>`;
        tbody.appendChild(tr);
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    const sortedFolders = [...foldersData].sort((a, b) => b.duration - a.duration);

    sortedFolders.forEach(folder => {
        const tr = document.createElement('tr');
        const duration = formatDuration(folder.duration);

        tr.innerHTML = `
            <td>${folder.folder_path || '-'}</td>
            <td>${duration}</td>
            <td>${folder.visits || 0}</td>
        `;
        tbody.appendChild(tr);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º
function updateProgramsActivityTable(programsData) {
    const tbody = document.querySelector('#programs-activity-table tbody');
    if (!tbody) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º');
        return;
    }

        if (!programsData || programsData.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="3" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td>`;
        tbody.appendChild(tr);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ —É–º–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const isSmartCalculated = programsData.length > 0 && programsData[0].is_smart_calculated;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–º–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    if (isSmartCalculated) {
        const headerTr = document.createElement('tr');
        headerTr.className = 'table-info';
        headerTr.innerHTML = `
            <td colspan="3" class="text-center">
                <small><i class="fas fa-brain"></i> –î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —É–º–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º (–∏—Å–∫–ª—é—á–µ–Ω—ã —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)</small>
            </td>
        `;
        tbody.appendChild(headerTr);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    const sortedPrograms = [...programsData].sort((a, b) => b.duration - a.duration);

    sortedPrograms.forEach(program => {
        const tr = document.createElement('tr');
        const duration = formatDuration(program.duration);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        const productivity = getProductivityScore({ app_name: program.app_name });
        let rowClass = '';

        if (productivity >= 0.7) {
            rowClass = 'table-success';
        } else if (productivity <= 0.3) {
            rowClass = 'table-danger';
        } else {
            rowClass = 'table-warning';
        }

        tr.className = rowClass;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        let activityIndicator = '';
        if (isSmartCalculated && program.real_activity_time > 0) {
            const realActivityPercent = Math.round((program.real_activity_time / program.duration) * 100);
            activityIndicator = ` <small class="text-muted">(${realActivityPercent}% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)</small>`;
        }
        
        tr.innerHTML = `
            <td>${program.app_name || '-'}${activityIndicator}</td>
            <td>${duration}</td>
            <td>${program.launches || 0}</td>
        `;
        tbody.appendChild(tr);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function setupAutoRefresh(intervalSeconds = 60) {
    let autoRefreshInterval = null;
    const autoRefreshToggle = document.getElementById('auto-refresh-toggle');

    // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (autoRefreshToggle) {
        autoRefreshToggle.addEventListener('change', function () {
            if (this.checked) {
                startAutoRefresh();
                localStorage.setItem('dashboardAutoRefresh', 'enabled');
            } else {
                stopAutoRefresh();
                localStorage.setItem('dashboardAutoRefresh', 'disabled');
            }
        });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const savedState = localStorage.getItem('dashboardAutoRefresh');
        if (savedState === 'enabled') {
            autoRefreshToggle.checked = true;
            startAutoRefresh();
        }
    } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        startAutoRefresh();
    }

    function startAutoRefresh() {
        if (autoRefreshInterval) {
            clearInterval(autoRefreshInterval);
        }

        autoRefreshInterval = setInterval(() => {
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
            loadDashboardData().then(data => {
                console.log('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            }).catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
            });
        }, intervalSeconds * 1000);

        console.log(`–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalSeconds} —Å–µ–∫)`);
    }

    function stopAutoRefresh() {
        if (autoRefreshInterval) {
            clearInterval(autoRefreshInterval);
            autoRefreshInterval = null;
            console.log('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', function () {
        stopAutoRefresh();
    });

    return {
        start: startAutoRefresh,
        stop: stopAutoRefresh
    };
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function initActivityTimesheet() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
    const activityStartDate = document.getElementById('activity-start-date');
    const activityEndDate = document.getElementById('activity-end-date');

    if (activityStartDate && activityEndDate) {
        const today = new Date();
        const lastWeek = new Date();
        lastWeek.setDate(today.getDate() - 7);

        activityStartDate.value = lastWeek.toISOString().slice(0, 10);
        activityEndDate.value = today.toISOString().slice(0, 10);
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const activityTab = document.getElementById('activity-timesheet-tab');
    if (activityTab) {
        activityTab.addEventListener('shown.bs.tab', function () {
            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if (!window.activityTimesheetLoaded) {
                loadActivityTimesheet();
                window.activityTimesheetLoaded = true;
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ ID
    const loadBtn = document.getElementById('load-activity-btn');
    if (loadBtn) {
        loadBtn.addEventListener('click', loadActivityTimesheet);
        console.log('–ü—Ä–∏–≤—è–∑–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–µ–ª—è');
    } else {
        console.warn('–ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const exportBtn = document.getElementById('export-activity-btn');
    if (exportBtn) {
        exportBtn.addEventListener('click', exportActivityTimesheetToExcel);
        console.log('–ü—Ä–∏–≤—è–∑–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–µ–ª—è');
    } else {
        console.warn('–ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
document.addEventListener('DOMContentLoaded', function () {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    const tabButtons = document.querySelectorAll('[data-bs-toggle="tab"]');
    if (tabButtons.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫:', tabButtons.length);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        tabButtons.forEach(button => {
            button.addEventListener('shown.bs.tab', function (event) {
                const targetTabId = event.target.getAttribute('href') || event.target.getAttribute('data-bs-target');
                console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', targetTabId);

                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–µ—Ä–∏–æ–¥
                const dateFilter = document.getElementById('date-filter');
                const periodFilter = document.getElementById('period-filter');

                if (!dateFilter || !dateFilter.value) return;

                const selectedDate = dateFilter.value;
                const selectedPeriod = periodFilter ? periodFilter.value : 'day';

                // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π
                if (targetTabId === '#timeline') {
                    console.log('–ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –∏ –º–µ—Ç—Ä–∏–∫');

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    if (lastValidMetrics && lastValidMetrics.totalTime > 0) {
                        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏:', lastValidMetrics);
                        displaySavedMetrics();
                    }

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
                    /* if (lastTimeScaleData && lastTimeScaleData.date === selectedDate) {
                        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É:', lastTimeScaleData.date);
                        setTimeout(() => {
                            updateTimeScale(selectedDate, lastTimeScaleData.activities, selectedPeriod);
                        }, 200); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
                    } */

                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
                    if (lastValidResources) {
                        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤');
                        displaySavedResourceMetrics();
                    }
                }

                // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π –¥–Ω—è
                if (targetTabId === '#chronology') {
                    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–Ω—è');

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
                    const chronologyDateInput = document.getElementById('chronology-date');
                    if (chronologyDateInput && !chronologyDateInput.value) {
                        chronologyDateInput.value = selectedDate;

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                        if (typeof loadChronology === 'function') {
                            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –¥–∞—Ç—ã:', selectedDate);
                            setTimeout(() => {
                                loadChronology();
                            }, 200); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
                        }
                    }
                }
            });
        });
    }
});

// –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 60 —Å–µ–∫—É–Ω–¥
document.addEventListener('DOMContentLoaded', function () {
    try {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...');

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä–µ
        const dateFilter = document.getElementById('date-filter');
        if (dateFilter) {
    const today = new Date();
            dateFilter.value = today.toISOString().slice(0, 10);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            dateFilter.addEventListener('change', function () {
                console.log('–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞', this.value);
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ week –∏–ª–∏ month, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ day –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const periodFilter = document.getElementById('period-filter');
                if (periodFilter && (periodFilter.value === 'week' || periodFilter.value === 'month')) {
                    periodFilter.value = 'day';
                }
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    loadDashboardData();
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        const chronologyDateInput = document.getElementById('chronology-date');
        if (chronologyDateInput) {
            const today = new Date();
            chronologyDateInput.value = today.toISOString().slice(0, 10);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å" –≤ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–µ –¥–Ω—è
        const loadChronologyBtn = document.getElementById('load-chronology-btn');
        if (loadChronologyBtn) {
            loadChronologyBtn.addEventListener('click', function () {
                loadChronology();
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç –¥–ª—è —Ç–∞–±–µ–ª—è
        const timesheetStartDate = document.getElementById('timesheet-start-date');
        const timesheetEndDate = document.getElementById('timesheet-end-date');

        if (timesheetStartDate && timesheetEndDate) {
            const today = new Date();
            // –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);

            // –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞)
            timesheetStartDate.value = firstDay.toISOString().slice(0, 10);
            timesheetEndDate.value = today.toISOString().slice(0, 10);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        initializeResourceMetrics();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
        loadDashboardData().then(data => {
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (data && data.resources && data.resources.length > 0) {
                updateResourceMetrics(data.resources[data.resources.length - 1]);
            }
        });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        try {
    loadDevicesList();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const employeeFilter = document.getElementById('employee-filter');
        if (employeeFilter) {
            employeeFilter.addEventListener('change', function () {
        loadDashboardData();
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try {
        loadDevicesList(this.value);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
                }

                // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if (document.querySelector('#chronology-tab').classList.contains('active')) {
                    setTimeout(() => loadChronology(), 100);
                }
            });
        }

        const deviceFilter = document.getElementById('device-filter');
        if (deviceFilter) {
            deviceFilter.addEventListener('change', function () {
        loadDashboardData();

                // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if (document.querySelector('#chronology-tab').classList.contains('active')) {
                    setTimeout(() => loadChronology(), 100);
                }
            });
        }

        if (dateFilter) {
            dateFilter.addEventListener('change', function () {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ "–¥–µ–Ω—å", —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                const periodFilter = document.getElementById('period-filter');
                if (periodFilter && periodFilter.value === 'day') {
                    // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
                    clearSessionCache();
                }
                loadDashboardData();
            });
        }

        const periodFilter = document.getElementById('period-filter');
        if (periodFilter) {
            periodFilter.addEventListener('change', function () {
                // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
                clearSessionCache();
                loadDashboardData();
            });
        }

        const activityTypeFilter = document.getElementById('activity-type-filter');
        if (activityTypeFilter) {
            activityTypeFilter.addEventListener('change', loadDashboardData);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        const chronologySort = document.getElementById('chronology-sort');
        if (chronologySort) {
            chronologySort.addEventListener('change', function () {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
                if (window.chronologyData) {
                    updateChronologyTable(window.chronologyData, this.value);
                }

                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
                if (window.chronologyWebsiteData) {
                    updateChronologyWebsitesTable(window.chronologyWebsiteData, this.value);
                }
            });
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const refreshBtn = document.getElementById('refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', refreshData);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        setupAutoRefresh(60);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        initActivityTimesheet();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è
        initRegularTimesheet();

        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function updateMetricsFromTableData() {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityTable = document.getElementById('activity-timesheet-table');
    if (!activityTable) {
        console.warn('–¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const rows = activityTable.querySelectorAll('tbody tr');
    if (!rows || rows.length === 0) {
        console.warn('–í —Ç–∞–±–ª–∏—Ü–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è
        if (lastValidMetrics && lastValidMetrics.totalTime > 0) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è');
            displaySavedMetrics();
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (rows.length === 1 && rows[0].cells.length === 1) {
        const cellText = rows[0].cells[0].textContent.trim().toLowerCase();
        if (cellText.includes('–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')) {
            console.warn('–í —Ç–∞–±–ª–∏—Ü–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è
            if (lastValidMetrics && lastValidMetrics.totalTime > 0) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è');
                displaySavedMetrics();
            }
            return;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
    let totalWorkTime = 0;
    let totalProductiveTime = 0;
    let productivitySum = 0;
    let rowsCount = 0;

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    rows.forEach(row => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º table-secondary (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        if (row.classList.contains('table-secondary')) return;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —è—á–µ–π–∫—É (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        if (row.cells.length <= 2) return;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
        // –í—Ä–µ–º—è –±–µ—Ä–µ–º –∏–∑ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–¥–µ–∫—Å 2)
        const timeCell = row.cells[2];
        if (!timeCell) return;

        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç "X—á Y–º" –∏–ª–∏ "Y–º")
        const timeText = timeCell.textContent.trim();
        let minutes = 0;

        // –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (!timeText || timeText === '-') return;

        if (timeText.includes('—á')) {
            // –§–æ—Ä–º–∞—Ç "X—á Y–º"
            const parts = timeText.split('—á');
            const hours = parseInt(parts[0].trim()) || 0;
            minutes += hours * 60;

            if (parts[1]) {
                const minutesPart = parseInt(parts[1].replace('–º', '').trim());
                if (!isNaN(minutesPart)) {
                    minutes += minutesPart;
                }
            }
        } else {
            // –§–æ—Ä–º–∞—Ç "Y–º"
            minutes = parseInt(timeText.replace('–º', '').trim()) || 0;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–¥–µ–∫—Å 3)
        const productivityCell = row.cells[3];
        if (!productivityCell) return;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const progressBar = productivityCell.querySelector('.progress-bar');
        let productivity = 0;

        if (progressBar) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç "XX.X%")
            const productivityText = progressBar.textContent.trim();
            productivity = parseFloat(productivityText) || 0;
        }

        // –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        totalWorkTime += minutes;
        totalProductiveTime += (minutes * productivity / 100);
        productivitySum += productivity;
        rowsCount++;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∫
    if (rowsCount === 0) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è
        if (lastValidMetrics && lastValidMetrics.totalTime > 0) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏—è');
            displaySavedMetrics();
        }
        return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgProductivity = rowsCount > 0 ? (productivitySum / rowsCount) : 0;
    // –£–±–∏—Ä–∞–µ–º –Ω–µ—ç—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ - –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // const breakTime = Math.round(totalWorkTime * 0.15); // –ü—Ä–∏–º–µ—Ä–Ω–æ 15% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫:', {
        totalWorkTime,
        totalProductiveTime,
        avgProductivity,
        // breakTime, // –£–±–∏—Ä–∞–µ–º –∏–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        rowsCount
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
    if (totalWorkTime > 0) {
        lastValidMetrics = {
            totalTime: totalWorkTime,
            productiveTime: totalProductiveTime,
            productivity: avgProductivity
            // breaks: breakTime // –£–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –û–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement) {
        const hours = Math.floor(totalWorkTime / 60);
        const minutesRemainder = Math.round(totalWorkTime % 60);
        totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutesRemainder);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            const startDate = document.getElementById('activity-start-date')?.value || '';
            const endDate = document.getElementById('activity-end-date')?.value || '';
            if (startDate && endDate) {
                subtitle.textContent = `–ó–∞ –ø–µ—Ä–∏–æ–¥ ${formatDate(new Date(startDate))} - ${formatDate(new Date(endDate))}`;
            } else {
                subtitle.textContent = '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
            }
        }
    }

    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement) {
        const productiveHours = Math.floor(totalProductiveTime / 60);
        const productiveMinutes = Math.round(totalProductiveTime % 60);
        productiveTimeElement.textContent = formatTimeNicely(productiveHours, productiveMinutes);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle && totalWorkTime > 0) {
            const percent = ((totalProductiveTime / totalWorkTime) * 100).toFixed(1);
            subtitle.textContent = `${percent}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`;
        }
    }

    // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement) {
        activityScoreElement.textContent = `${avgProductivity.toFixed(1)}%`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }

    // –ü–µ—Ä–µ—Ä—ã–≤—ã
    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement) {
        // –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—ç—Ç–∏—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        // const breakHours = Math.floor(breakTime / 60);
        // const breakMinutes = Math.round(breakTime % 60);
        // breakTimeElement.textContent = formatTimeNicely(breakHours, breakMinutes);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù/–î" –≤–º–µ—Å—Ç–æ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        breakTimeElement.textContent = '–ù/–î';

        const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–¢—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
        }
    }

    console.log('–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
function initializeResourceMetrics() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const cpuMaxElement = document.getElementById('max-cpu-usage');
    const ramMaxElement = document.getElementById('max-ram-usage');
    const diskMaxElement = document.getElementById('max-disk-usage');

    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    let cpuMax = 0, ramMax = 0, diskMax = 0;

    if (cpuMaxElement) {
        cpuMax = parseInt(cpuMaxElement.textContent) || 0;
    }

    if (ramMaxElement) {
        ramMax = parseInt(ramMaxElement.textContent) || 0;
    }

    if (diskMaxElement) {
        diskMax = parseInt(diskMaxElement.textContent) || 0;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
    const initialData = {
        cpu: cpuMax,
        memory: ramMax,
        disk: diskMax
    };

    updateResourceMetrics(initialData);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
async function loadDevicesList(employeeId = null) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        const deviceSelect = document.getElementById('device-filter');
        const currentDeviceId = deviceSelect.value;

        // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const response = await fetch('/api/devices');
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
        }

        const devices = await response.json();

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç (–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        deviceSelect.innerHTML = '<option value="">–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</option>';

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const devicesByEmployee = {};

        devices.forEach(device => {
            const employeeName = device.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (employeeId && employeeName !== employeeId) {
                return;
            }

            if (!devicesByEmployee[employeeName]) {
                devicesByEmployee[employeeName] = {};
            }

            const deviceKey = device.device_id || device.id;
            if (!devicesByEmployee[employeeName][deviceKey]) {
                devicesByEmployee[employeeName][deviceKey] = {
                    id: deviceKey,
                    name: device.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                    computer_name: device.computer_name || '',
                    count: 1,
                    last_seen: device.last_seen || ''
                };
            } else {
                // –ï—Å–ª–∏ —Ç–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                devicesByEmployee[employeeName][deviceKey].count++;

                // –û–±–Ω–æ–≤–ª—è–µ–º last_seen, –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–µ–µ —Ç–µ–∫—É—â–µ–≥–æ
                if (device.last_seen && (!devicesByEmployee[employeeName][deviceKey].last_seen ||
                    new Date(device.last_seen) > new Date(devicesByEmployee[employeeName][deviceKey].last_seen))) {
                    devicesByEmployee[employeeName][deviceKey].last_seen = device.last_seen;
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        Object.keys(devicesByEmployee).forEach(employeeName => {
            const employeeDevices = Object.values(devicesByEmployee[employeeName]);

            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const optgroup = document.createElement('optgroup');
            optgroup.label = `${employeeName} (${employeeDevices.length} —É—Å—Ç—Ä.)`;

            // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø—É
            employeeDevices.forEach(device => {
                const option = document.createElement('option');
                option.value = device.id;
                option.text = `${device.name}${device.count > 1 ? ` (${device.count})` : ''}`;
                if (device.computer_name) {
                    option.text += ` - ${device.computer_name}`;
                }
                optgroup.appendChild(option);
            });

            deviceSelect.appendChild(optgroup);
        });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if (currentDeviceId) {
            deviceSelect.value = currentDeviceId;
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
// –í–ê–ñ–ù–û: –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–∞–π—Ç–æ–≤
// –î–∞–Ω–Ω—ã–µ –ù–ï —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±—â–µ–º –ø–æ–¥—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–∂–µ —É—á—Ç–µ–Ω—ã –≤ browser_activity)
function updateChronologyWebsitesTable(websiteData, sortOrder = 'desc') {
    console.log('üìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ (–±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –æ–±—â–µ–µ –≤—Ä–µ–º—è):', websiteData);

    const tbody = document.getElementById('chronology-websites-table').querySelector('tbody');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!websiteData || websiteData.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</td></tr>';
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ
    websiteData.sort((a, b) => {
        const dateA = new Date(a.timestamp);
        const dateB = new Date(b.timestamp);
        return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —á–∞—Å–∞–º
    const eventsByHour = {};
    websiteData.forEach(event => {
        const eventDate = new Date(event.timestamp);
        const hour = eventDate.getHours();

        if (!eventsByHour[hour]) {
            eventsByHour[hour] = [];
        }
        eventsByHour[hour].push(event);
    });

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const hours = Object.keys(eventsByHour).map(Number);
    if (sortOrder === 'desc') {
        hours.sort((a, b) => b - a);
    } else {
        hours.sort((a, b) => a - b);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    hours.forEach((hour, hourIndex) => {
        const events = eventsByHour[hour];

        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –∏ —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        let earliestEvent = null;
        let latestEvent = null;
        let totalDuration = 0;

        events.forEach(event => {
            const eventStart = new Date(event.timestamp);
            if (!earliestEvent || eventStart < new Date(earliestEvent.timestamp)) {
                earliestEvent = event;
            }
            if (!latestEvent || eventStart > new Date(latestEvent.timestamp)) {
                latestEvent = event;
            }
            if (event.duration) {
                totalDuration += event.duration;
            }
        });

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        let timeRangeText = '';
        if (earliestEvent && latestEvent) {
            const startTime = new Date(earliestEvent.timestamp);
            const endTime = new Date(latestEvent.timestamp);

            // –ï—Å–ª–∏ –µ—Å—Ç—å duration —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (latestEvent.duration) {
                endTime.setSeconds(endTime.getSeconds() + latestEvent.duration);
            }

            const formattedStartTime = `${startTime.getHours().toString().padStart(2, '0')}:${startTime.getMinutes().toString().padStart(2, '0')}`;
            const formattedEndTime = `${endTime.getHours().toString().padStart(2, '0')}:${endTime.getMinutes().toString().padStart(2, '0')}`;
            timeRangeText = `${formattedStartTime} - ${formattedEndTime}`;
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã
        const productiveSites = events.filter(e => e.is_productive === true).length;
        const unproductiveSites = events.filter(e => e.is_productive === false).length;
        const neutralSites = events.length - productiveSites - unproductiveSites;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —á–∞—Å–∞
        let hourProductivityClass = '';
        const productivityRatio = events.length > 0 ? productiveSites / events.length : 0;
        if (productivityRatio >= 0.7) {
            hourProductivityClass = 'hour-productive';
        } else if (productivityRatio >= 0.4) {
            hourProductivityClass = 'hour-neutral';
        } else {
            hourProductivityClass = 'hour-unproductive';
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —á–∞—Å–∞
        const hourRow = document.createElement('tr');
        hourRow.className = `hour-header ${hourProductivityClass}`;
        hourRow.style.cursor = 'pointer';

        hourRow.innerHTML = `
            <td colspan="4" class="hour-header-content">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="hour-info">
                        <span class="collapse-icon">
                            <i class="bi bi-chevron-down"></i>
                        </span>
                        <span class="hour-title">
                            <i class="bi bi-globe2 me-2"></i>
                            <strong>${hour.toString().padStart(2, '0')}:00 - ${hour.toString().padStart(2, '0')}:59</strong>
                        </span>
                        ${timeRangeText ? `<span class="time-range-badge">${timeRangeText}</span>` : ''}
                    </div>
                    <div class="hour-stats">
                        <span class="visits-badge">
                            <i class="bi bi-eye me-1"></i>
                            ${events.length} ${events.length === 1 ? '–ø–æ—Å–µ—â–µ–Ω–∏–µ' : events.length < 5 ? '–ø–æ—Å–µ—â–µ–Ω–∏—è' : '–ø–æ—Å–µ—â–µ–Ω–∏–π'}
                        </span>
                        ${productiveSites > 0 ? `<span class="productive-badge"><i class="bi bi-check-circle me-1"></i>${productiveSites}</span>` : ''}
                        ${unproductiveSites > 0 ? `<span class="unproductive-badge"><i class="bi bi-x-circle me-1"></i>${unproductiveSites}</span>` : ''}
                        ${neutralSites > 0 ? `<span class="neutral-badge"><i class="bi bi-circle me-1"></i>${neutralSites}</span>` : ''}
                        ${totalDuration > 0 ? `<span class="duration-badge"><i class="bi bi-clock me-1"></i>${formatDuration(totalDuration)}</span>` : ''}
                    </div>
                </div>
            </td>
        `;

        tbody.appendChild(hourRow);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞
        events.forEach((event, eventIndex) => {
            const eventDate = new Date(event.timestamp);
            const hours = eventDate.getHours().toString().padStart(2, '0');
            const minutes = eventDate.getMinutes().toString().padStart(2, '0');
            const seconds = eventDate.getSeconds().toString().padStart(2, '0');
            const timeStr = `${hours}:${minutes}:${seconds}`;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å duration
            let endTimeStr = '';
            let durationText = '';
            if (event.duration) {
                const endTime = new Date(eventDate.getTime() + (event.duration * 1000));
                const endHours = endTime.getHours().toString().padStart(2, '0');
                const endMinutes = endTime.getMinutes().toString().padStart(2, '0');
                const endSeconds = endTime.getSeconds().toString().padStart(2, '0');
                endTimeStr = `${endHours}:${endMinutes}:${endSeconds}`;
                durationText = formatDuration(event.duration);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            let productivityClass = '';
            let productivityIcon = '';
            if (event.is_productive === true) {
                productivityClass = 'text-success';
                productivityIcon = '<i class="bi bi-check-circle-fill text-success me-2"></i>';
            } else if (event.is_productive === false) {
                productivityClass = 'text-danger';
                productivityIcon = '<i class="bi bi-x-circle-fill text-danger me-2"></i>';
            } else {
                productivityClass = 'text-muted';
                productivityIcon = '<i class="bi bi-circle text-muted me-2"></i>';
            }

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è
            const eventRow = document.createElement('tr');
            eventRow.className = `website-event activity-group-content ${productivityClass}`;
            eventRow.dataset.hourGroup = hour;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —è—á–µ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            let timeCell = `
                <td class="time-cell">
                    <div class="time-display">
                        <span class="start-time">${timeStr}</span>
                        ${endTimeStr ? `<small class="end-time">–¥–æ ${endTimeStr}</small>` : ''}
                        ${durationText ? `<small class="duration-text">${durationText}</small>` : ''}
                    </div>
                </td>
            `;

            // –û–±—Ä–µ–∑–∞–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const maxUrlLength = 60;
            const displayUrl = event.url.length > maxUrlLength
                ? event.url.substring(0, maxUrlLength) + '...'
                : event.url;

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
            let domain = '';
            let favicon = '';
            try {
                const urlObj = new URL(event.url);
                domain = urlObj.hostname;
                favicon = `https://www.google.com/s2/favicons?domain=${domain}&sz=16`;
            } catch (e) {
                domain = event.url.split('/')[0];
            }

            // –ü–æ–ª—É—á–∞–µ–º title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageTitle = event.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const displayTitle = pageTitle.length > 50 ? pageTitle.substring(0, 50) + '...' : pageTitle;

            eventRow.innerHTML = `
                ${timeCell}
                <td class="browser-cell">
                    <div class="browser-info">
                        <i class="bi bi-browser-chrome me-2"></i>
                        ${event.browser_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </div>
                </td>
                <td class="url-cell">
                    <div class="url-info">
                        ${productivityIcon}
                        <div class="url-details">
                            ${favicon ? `<img src="${favicon}" alt="" class="favicon me-2" onerror="this.style.display='none'">` : ''}
                            <div class="url-text">
                                <div class="page-title" title="${pageTitle}">${displayTitle}</div>
                                <div class="url-link" title="${event.url}">
                                    <small class="text-muted">${displayUrl}</small>
                                </div>
                                <div class="domain-text">
                                    <small class="badge bg-light text-dark">${domain}</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="action-cell">
                    <button class="btn btn-sm btn-outline-primary website-action-btn" 
                            onclick="openWebsiteModal({
                                url: '${event.url.replace(/'/g, "\\'")}',
                                browser: '${(event.browser_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace(/'/g, "\\'")}',
                                timestamp: '${event.timestamp}',
                                title: '${pageTitle.replace(/'/g, "\\'")}',
                                duration: ${event.duration || 0},
                                is_productive: ${event.is_productive}
                            })"
                            title="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏">
                        <i class="bi bi-eye"></i>
                    </button>
                </td>
            `;

            tbody.appendChild(eventRow);
        });


        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
        const currentHour = new Date().getHours();
        if (hour !== currentHour) {
            hourRow.classList.add('collapsed');
            hourRow.querySelector('.collapse-icon i').className = 'bi bi-chevron-right';
            const relatedEvents = tbody.querySelectorAll(`tr[data-hour-group="${hour}"]`);
            relatedEvents.forEach(row => {
                row.style.display = 'none';
            });
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function loadActivityTimesheet() {
    const startDate = document.getElementById('activity-start-date').value;
    const endDate = document.getElementById('activity-end-date').value;

    if (!startDate || !endDate) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
        return;
    }

    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);

    try {
        showLoading(true);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const employeeFilter = document.getElementById('employee-filter');
        const deviceFilter = document.getElementById('device-filter');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        const params = new URLSearchParams();
        if (employeeFilter && employeeFilter.value) params.append('employee_id', employeeFilter.value);
        if (deviceFilter && deviceFilter.value) params.append('device_id', deviceFilter.value);
        params.append('start_date', startDate);
        params.append('end_date', endDate);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        document.getElementById('activity-timesheet-table').querySelector('tbody').innerHTML =
            '<tr><td colspan="7" class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</td></tr>';

        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: /api/public/timesheet/activity?${params.toString()}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        let data = [];
        try {
            const response = await fetch(`/api/public/timesheet/activity?${params.toString()}`);

            if (response.ok) {
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–∞—Ä—Å–∏–º JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                const responseText = await response.text();
                console.log(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${responseText.substring(0, 200)}...`);
                data = JSON.parse(responseText);
                console.log('–î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', data);
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: HTTP —Å—Ç–∞—Ç—É—Å ${response.status}`);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
                data = [];
            }
        } catch (fetchError) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', fetchError);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
            data = [];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω–µ—Ç)
        updateActivityTimesheet(data);

        // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å dashboard-timesheet.js –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
        // setTimeout(updateMetricsFromTableData, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã

        showLoading(false);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        showLoading(false);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        document.getElementById('activity-timesheet-table').querySelector('tbody').innerHTML =
            '<tr><td colspan="7" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</td></tr>';

        // –û–±–Ω—É–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞–±–µ–ª—è (–ù–ï —Ç—Ä–æ–≥–∞–µ–º —à–∞–ø–∫—É)
        document.getElementById('timesheet-total-time').textContent = '-';
        document.getElementById('timesheet-productive-time').textContent = '-';
        document.getElementById('timesheet-productivity').textContent = '-';
        document.getElementById('timesheet-break-time').textContent = '-';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function updateActivityTimesheet(data) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!data || data.length === 0) {
        document.getElementById('activity-timesheet-table').querySelector('tbody').innerHTML =
            '<tr><td colspan="7" class="text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</td></tr>';
        return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    const filters = getCurrentFilters();
    console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ç–∞–±–µ–ª—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', filters);

    const filteredData = data.map(day => {
        if (!day.activities || day.activities.length === 0) {
            return day;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–Ω—è
        const filteredActivities = filterDataByEmployee(day.activities, filters.employeeId, filters.deviceId);

        return {
            ...day,
            activities: filteredActivities
        };
    }).filter(day => {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        return day.activities && day.activities.length > 0;
    });

    console.log('–î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredData);

    if (filteredData.length === 0) {
        document.getElementById('activity-timesheet-table').querySelector('tbody').innerHTML =
            `<tr><td colspan="7" class="text-center">${filters.employeeId ? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}</td></tr>`;
        return;
    }

    // –í–ê–ñ–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç dashboard-timesheet.js
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É –ø–æ –¥–Ω—è–º
    const tbody = document.getElementById('activity-timesheet-table').querySelector('tbody');
    tbody.innerHTML = '';

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedDays = [...filteredData].sort((a, b) => {
        return new Date(b.date) - new Date(a.date);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    sortedDays.forEach(day => {
        const tr = document.createElement('tr');

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const dayDate = new Date(day.date);
        const formattedDate = formatDate(dayDate);

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        const dayOfWeek = translateDayOfWeek(dayDate.toLocaleString('en-US', { weekday: 'long' }));

        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        if (dayOfWeek === '–°—É–±–±–æ—Ç–∞' || dayOfWeek === '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ') {
            tr.className = 'table-secondary';
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        let dayTotalDuration = 0;
        if (day.activities && day.activities.length > 0) {
            // –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–Ω—è
            dayTotalDuration = day.activities.reduce((total, activity) => {
                const duration = convertToMinutes(activity.duration || 0);
                return total + duration;
            }, 0);
        }

        const totalDayTime = formatMinutes(dayTotalDuration);

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        let dayProductivity = 0;
        if (day.activities && day.activities.length > 0 && dayTotalDuration > 0) {
            const productiveTime = day.activities.reduce((total, activity) => {
                const duration = convertToMinutes(activity.duration || 0);
                const productivity = activity.productivity || 50; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%
                return total + (duration * productivity / 100);
            }, 0);
            dayProductivity = (productiveTime / dayTotalDuration) * 100;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const productivityClass = getProductivityClass(dayProductivity);
        const productivityHtml = `
            <div class="progress" style="height: 20px;">
                <div class="progress-bar ${productivityClass}" 
                     style="width: ${dayProductivity.toFixed(1)}%;" 
                     role="progressbar" 
                     aria-valuenow="${dayProductivity.toFixed(1)}" 
                     aria-valuemin="0" 
                     aria-valuemax="100">
                    ${dayProductivity.toFixed(1)}%
                </div>
            </div>
        `;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const activitiesByApp = {};
        if (day.activities && day.activities.length > 0) {
            day.activities.forEach(activity => {
                const appName = activity.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                if (!activitiesByApp[appName]) {
                    activitiesByApp[appName] = 0;
                }
                const activityDuration = convertToMinutes(activity.duration || 0);
                activitiesByApp[appName] += activityDuration;
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const topApps = Object.entries(activitiesByApp)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 3)
            .map(([name, duration]) => {
                return `<span class="badge bg-primary me-1 mb-1">${name}: ${formatMinutes(duration)}</span>`;
            }).join('');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏
        tr.innerHTML = `
            <td>${formattedDate}</td>
            <td>${dayOfWeek}</td>
            <td>${totalDayTime}</td>
            <td>${productivityHtml}</td>
            <td>${topApps || '-'}</td>
            <td>-</td>
            <td>
                <button class="btn btn-sm btn-outline-primary view-day-details" data-date="${day.date}">
                    <i class="bi bi-eye"></i>
                </button>
            </td>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        tr.querySelector('.view-day-details').addEventListener('click', function () {
            showDayDetails(this.getAttribute('data-date'));
        });

        tbody.appendChild(tr);
    });

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ dashboard-timesheet.js)');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–Ω—É—Ç—ã
function convertToMinutes(seconds) {
    if (!seconds || isNaN(seconds)) return 0;
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–Ω—É—Ç—ã
    return Math.round(seconds / 60);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function getProductivityClass(score) {
    if (score >= 70) return 'bg-success';
    if (score >= 50) return 'bg-info';
    if (score >= 30) return 'bg-warning';
    return 'bg-danger';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
function translateDayOfWeek(day) {
    const translations = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –¥–µ–Ω—å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if (translations[day]) {
        return translations[day];
    } else {
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${day}`);
        return day || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
function showDayDetails(date) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–Ω—è
    document.querySelector('a[href="#chronology"]').click();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    const chronologyDateInput = document.getElementById('chronology-date');
    if (chronologyDateInput) {
        chronologyDateInput.value = date;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const employeeFilter = document.getElementById('employee-filter');
        const deviceFilter = document.getElementById('device-filter');

        console.log(`–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–Ω—è ${date} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID: ${employeeFilter ? employeeFilter.value : '–≤—Å–µ'}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ID: ${deviceFilter ? deviceFilter.value : '–≤—Å–µ'}`);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        if (typeof loadChronology === 'function') {
            setTimeout(() => {
                loadChronology();
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Excel
function exportActivityTimesheetToExcel() {
    const table = document.getElementById('activity-timesheet-table');
    if (!table) return;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const tbody = table.querySelector('tbody');
        if (!tbody || tbody.children.length === 0 || tbody.children[0].cells.length <= 1) {
            alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent);

        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        let csvContent = headers.join(',') + '\n';

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        Array.from(tbody.children).forEach(row => {
            if (row.cells.length <= 1) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            const rowData = [];
            Array.from(row.cells).forEach((cell, index) => {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–µ–≥–æ–≤
                let text = '';

                if (index === 3) {
                    // –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    const progressBar = cell.querySelector('.progress-bar');
                    text = progressBar ? progressBar.textContent.trim() : '';
                } else if (index === 4 || index === 5) {
                    // –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å –±–µ–π–¥–∂–∞–º–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                    const badges = cell.querySelectorAll('.badge');
                    text = Array.from(badges).map(badge => badge.textContent.trim()).join(', ');
                } else if (index === 6) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    text = '';
                } else {
                    text = cell.textContent.trim();
                }

                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
                text = '"' + text.replace(/"/g, '""') + '"';

                rowData.push(text);
            });

            csvContent += rowData.join(',') + '\n';
        });

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const encodedUri = encodeURI('data:text/csv;charset=utf-8,' + csvContent);
        const link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'activity_timesheet.csv');
        document.body.appendChild(link);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        link.click();

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        document.body.removeChild(link);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–µ–ª—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è
// –£–î–ê–õ–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –¢–ê–ë–ï–õ–Ø:
// - async function loadDetailedTimesheet() - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–µ–ª—è
// - function resetTimesheetMetrics() - —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Ç–∞–±–µ–ª—è
// - function updateTimesheetSummary() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–∞–±–µ–ª—è
//
// –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–µ–ª—è —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ dashboard-timesheet.js


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Ç–∞–±–µ–ª—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º —Ç–∞–±–µ–ª—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
function showError(message) {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ HTTP 404 –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö —Ç–∞–±–µ–ª—è
    if (message && (message.includes('HTTP error') ||
        message.includes('status: 404') ||
        message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è'))) {
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.warn('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', message);
        return;
    }

    console.error(message);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    let errorContainer = document.getElementById('error-container');

    if (!errorContainer) {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        errorContainer = document.createElement('div');
        errorContainer.id = 'error-container';
        errorContainer.className = 'alert alert-danger alert-dismissible fade show fixed-top mx-auto mt-3';
        errorContainer.style.maxWidth = '500px';
        errorContainer.style.zIndex = '9999';
        errorContainer.innerHTML = `
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
            <div class="error-message">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                ${message}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
        document.body.appendChild(errorContainer);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (errorContainer.parentNode) {
                errorContainer.parentNode.removeChild(errorContainer);
            }
        }, 5000);
    } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        errorContainer.querySelector('.error-message').innerHTML = `
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            ${message}
        `;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        clearTimeout(errorContainer.dataset.timeout);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        errorContainer.dataset.timeout = setTimeout(() => {
            if (errorContainer.parentNode) {
                errorContainer.parentNode.removeChild(errorContainer);
            }
        }, 5000);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
const updateTodayBtn = document.getElementById('update-today-btn');
if (updateTodayBtn) {
    updateTodayBtn.addEventListener('click', updateTodayData);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–µ–ª—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
function calculateTotalActivityTime(activities) {
    if (!activities || activities.length === 0) {
        return 0;
    }

    console.log(`üßÆ –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    const periods = activities.map(activity => {
        const duration = activity.duration || 0;
        const startTime = new Date(activity.timestamp || activity.start_time);
        const endTime = new Date(startTime.getTime() + duration * 1000);

        return {
            start: startTime,
            end: endTime,
            duration: duration,
            activity: activity
        };
    }).filter(period => 
        !isNaN(period.start.getTime()) && 
        !isNaN(period.end.getTime()) && 
        period.duration > 0
    );

    if (periods.length === 0) {
        console.log('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
        return 0;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    periods.sort((a, b) => a.start - b.start);

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø–µ—Ä–∏–æ–¥–æ–≤
    const mergedPeriods = [];
    let currentPeriod = null;

    periods.forEach((period, index) => {
        console.log(`–ü–µ—Ä–∏–æ–¥ ${index + 1}: ${period.start.toLocaleTimeString()} - ${period.end.toLocaleTimeString()} (${period.duration}—Å)`);
        
        if (!currentPeriod) {
            // –ü–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥
            currentPeriod = { 
                start: new Date(period.start), 
                end: new Date(period.end),
                originalDuration: period.duration
            };
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å –±—É—Ñ–µ—Ä–æ–º –≤ 10 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 30)
            const bufferTime = 10000; // 10 —Å–µ–∫—É–Ω–¥
            const overlapThreshold = new Date(currentPeriod.end.getTime() + bufferTime);
            
            if (period.start <= overlapThreshold) {
                // –ï—Å—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ - —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                const newEnd = new Date(Math.max(currentPeriod.end.getTime(), period.end.getTime()));
                console.log(`  ‚Ü≥ –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º: ${currentPeriod.start.toLocaleTimeString()} - ${newEnd.toLocaleTimeString()}`);
                currentPeriod.end = newEnd;
                currentPeriod.originalDuration += period.duration;
            } else {
                // –ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                mergedPeriods.push(currentPeriod);
                console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–µ—Ä–∏–æ–¥: ${currentPeriod.start.toLocaleTimeString()} - ${currentPeriod.end.toLocaleTimeString()}`);
                
                currentPeriod = { 
                    start: new Date(period.start), 
                    end: new Date(period.end),
                    originalDuration: period.duration
                };
            }
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    if (currentPeriod) {
        mergedPeriods.push(currentPeriod);
        console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: ${currentPeriod.start.toLocaleTimeString()} - ${currentPeriod.end.toLocaleTimeString()}`);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Å—É–º–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    let totalTime = 0;
    mergedPeriods.forEach((period, index) => {
        const periodDuration = Math.floor((period.end - period.start) / 1000);
        totalTime += periodDuration;
        console.log(`–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ${index + 1}: ${periodDuration}—Å (${Math.floor(periodDuration/60)}–º ${periodDuration%60}—Å)`);
    });

    console.log(`üìä –ò–¢–û–ì–û: ${periods.length} –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ ‚Üí ${mergedPeriods.length} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö ‚Üí ${totalTime}—Å (${Math.floor(totalTime/60)}–º ${totalTime%60}—Å)`);

    return totalTime;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function mergeAllActivities(data) {
    console.log('üîÑ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤');

    const allActivities = [];

    // –°–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    const browserProcesses = [
        'chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe',
        'brave.exe', 'vivaldi.exe', 'safari.exe', 'browser.exe',
        'opera_gx.exe', 'tor.exe', 'arc.exe', 'palemoon.exe'
    ];

    // –≠–¢–ê–ü 1: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ù–ï-–ë–†–ê–£–ó–ï–†–ù–´–ï –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ window_activity
    if (data.activities && Array.isArray(data.activities)) {
        console.log('üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω (–ë–ï–ó –±—Ä–∞—É–∑–µ—Ä–æ–≤)');
        
        data.activities.forEach(activity => {
            const processName = (activity.process_name || activity.app_name || '').toLowerCase();
            const appName = activity.app_name || activity.process_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–æ–º
            const isBrowser = browserProcesses.some(browser => 
                processName.includes(browser.toLowerCase()) ||
                appName.toLowerCase().includes('chrome') ||
                appName.toLowerCase().includes('firefox') ||
                appName.toLowerCase().includes('edge') ||
                appName.toLowerCase().includes('opera') ||
                appName.toLowerCase().includes('safari') ||
                appName.toLowerCase().includes('–±—Ä–∞—É–∑–µ—Ä')
            );

            // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç –¢–û–õ–¨–ö–û –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (!isBrowser) {
                const duration = parseInt(activity.duration || activity.total_time || activity.active_time || 0);
                if (duration > 0) {
                    const startTime = new Date(activity.timestamp || activity.start_time);
                    const endTime = new Date(startTime.getTime() + duration * 1000);

                    allActivities.push({
                        ...activity,
                        type: 'window',
                        start: startTime,
                        end: endTime,
                        duration: duration,
                        application: appName,
                        window_title: activity.window_title || activity.title || '',
                        productivity_score: getProductivityScore(activity)
                    });
                }
            }
        });

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${allActivities.length}`);
    }

    // –≠–¢–ê–ü 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ì–ò–ë–†–ò–î–ù–´–ô –ø–æ–¥—Ö–æ–¥ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    const allBrowserSessions = {};

    // 2.1 –ë—Ä–∞—É–∑–µ—Ä—ã –∏–∑ window_activity
    if (data.activities && Array.isArray(data.activities)) {
        data.activities.forEach(activity => {
            const processName = (activity.process_name || activity.app_name || '').toLowerCase();
            const appName = activity.app_name || activity.process_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            const isBrowser = browserProcesses.some(browser => 
                processName.includes(browser.toLowerCase()) ||
                appName.toLowerCase().includes('chrome') ||
                appName.toLowerCase().includes('firefox') ||
                appName.toLowerCase().includes('edge') ||
                appName.toLowerCase().includes('opera') ||
                appName.toLowerCase().includes('safari')
            );

            if (isBrowser) {
                if (!allBrowserSessions[appName]) {
                    allBrowserSessions[appName] = [];
                }

                const duration = parseInt(activity.duration || activity.total_time || activity.active_time || 0);
                if (duration > 0) {
                    const startTime = new Date(activity.timestamp || activity.start_time);
                    const endTime = new Date(startTime.getTime() + duration * 1000);

                    allBrowserSessions[appName].push({
                        source: 'window_activity',
                        start: startTime,
                        end: endTime,
                        duration: duration,
                        window_title: activity.window_title || '–ë—Ä–∞—É–∑–µ—Ä',
                        productivity_score: 60
                    });
                }
            }
        });
    }

    // 2.2 –î–∞–Ω–Ω—ã–µ –∏–∑ browser_activity
    if (data.browser_activity && Array.isArray(data.browser_activity)) {
        data.browser_activity.forEach(activity => {
            const browserName = activity.browser_name || activity.browser || '–ë—Ä–∞—É–∑–µ—Ä';
            
            if (!allBrowserSessions[browserName]) {
                allBrowserSessions[browserName] = [];
            }

            const duration = parseInt(activity.total_time || activity.duration || 0);
            if (duration > 0) {
                const startTime = new Date(activity.timestamp || activity.start_time);
                const endTime = new Date(startTime.getTime() + duration * 1000);

                allBrowserSessions[browserName].push({
                    source: 'browser_activity',
                    start: startTime,
                    end: endTime,
                    duration: duration,
                    window_title: activity.url || '–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    productivity_score: 60
                });
            }
        });
    }

    // 2.3 –î–∞–Ω–Ω—ã–µ –∏–∑ website_visits (—Ç–æ–ª—å–∫–æ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    // website_visits –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ browser_activity

    // –≠–¢–ê–ü 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
    Object.keys(allBrowserSessions).forEach(browserName => {
        const sessions = allBrowserSessions[browserName];
        
        if (sessions.length === 0) return;

        console.log(`üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä ${browserName}: ${sessions.length} —Å–µ—Å—Å–∏–π`);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        sessions.sort((a, b) => a.start - b.start);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
        const mergedPeriods = [];
        let currentPeriod = null;

        sessions.forEach(session => {
            if (!currentPeriod) {
                currentPeriod = {
                    start: session.start,
                    end: session.end,
                    sessions: [session]
                };
            } else {
                // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Å –±—É—Ñ–µ—Ä–æ–º 30 —Å–µ–∫)
                if (session.start <= new Date(currentPeriod.end.getTime() + 30000)) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
                    currentPeriod.end = new Date(Math.max(currentPeriod.end.getTime(), session.end.getTime()));
                    currentPeriod.sessions.push(session);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                    mergedPeriods.push(currentPeriod);
                    currentPeriod = {
                        start: session.start,
                        end: session.end,
                        sessions: [session]
                    };
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        if (currentPeriod) {
            mergedPeriods.push(currentPeriod);
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        mergedPeriods.forEach(period => {
            const periodDuration = Math.floor((period.end - period.start) / 1000);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            const windowTitles = period.sessions
                .map(s => s.window_title)
                .filter((title, idx, arr) => title && arr.indexOf(title) === idx)
                .slice(0, 3)
                .join(', ');

            const finalWindowTitle = windowTitles + 
                (period.sessions.length > 3 ? ` (–∏ –µ—â–µ ${period.sessions.length - 3})` : '');

            allActivities.push({
                type: 'browser',
                start: period.start,
                end: period.end,
                duration: periodDuration,
                application: browserName,
                app_name: browserName,
                window_title: finalWindowTitle || '–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                productivity_score: 60,
                timestamp: period.start.toISOString()
            });
        });

        const totalBrowserTime = mergedPeriods.reduce((total, p) => total + Math.floor((p.end - p.start) / 1000), 0);
        console.log(`‚úÖ ${browserName}: ${sessions.length} —Å–µ—Å—Å–∏–π ‚Üí ${mergedPeriods.length} –ø–µ—Ä–∏–æ–¥–æ–≤ = ${Math.floor(totalBrowserTime/60)}–º ${totalBrowserTime%60}—Å`);
    });

    console.log(`üéØ –ò–¢–û–ì–û –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ: ${allActivities.length}`);
    console.log(`   - –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${allActivities.filter(a => a.type !== 'browser').length}`);
    console.log(`   - –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ): ${allActivities.filter(a => a.type === 'browser').length}`);

    return allActivities;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–∞
function calculateWebsiteProductivity(url) {
    const productiveDomains = [
        'github.com', 'stackoverflow.com', 'docs.', 'documentation',
        'learn.', 'tutorial', 'course', 'edu', 'office.com', 'google.com/docs'
    ];

    const unproductiveDomains = [
        'youtube.com', 'facebook.com', 'instagram.com', 'twitter.com',
        'vk.com', 'tiktok.com', 'netflix.com', 'twitch.tv'
    ];

    const lowerUrl = url.toLowerCase();

    if (productiveDomains.some(domain => lowerUrl.includes(domain))) {
        return 80;
    }

    if (unproductiveDomains.some(domain => lowerUrl.includes(domain))) {
        return 20;
    }

    return 50; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤
function mergeAllActivitiesWithWebsites(data) {
    console.log('üîÑ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤');

    const allActivities = [];

    // –°–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    const browserProcesses = [
        'chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe',
        'brave.exe', 'vivaldi.exe', 'safari.exe', 'browser.exe',
        'opera_gx.exe', 'tor.exe', 'arc.exe', 'palemoon.exe'
    ];

    // –≠–¢–ê–ü 1: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ù–ï-–ë–†–ê–£–ó–ï–†–ù–´–ï –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ window_activity
    if (data.activities && Array.isArray(data.activities)) {
        console.log('üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω (–ë–ï–ó –±—Ä–∞—É–∑–µ—Ä–æ–≤)');
        
        data.activities.forEach(activity => {
            const processName = (activity.process_name || activity.app_name || '').toLowerCase();
            const appName = activity.app_name || activity.process_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—Ä–∞—É–∑–µ—Ä–æ–º
            const isBrowser = browserProcesses.some(browser => 
                processName.includes(browser.toLowerCase()) ||
                appName.toLowerCase().includes('chrome') ||
                appName.toLowerCase().includes('firefox') ||
                appName.toLowerCase().includes('edge') ||
                appName.toLowerCase().includes('opera') ||
                appName.toLowerCase().includes('safari') ||
                appName.toLowerCase().includes('–±—Ä–∞—É–∑–µ—Ä')
            );

            // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç –¢–û–õ–¨–ö–û –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (!isBrowser) {
                const duration = parseInt(activity.duration || activity.total_time || activity.active_time || 0);
                if (duration > 0) {
                    const startTime = new Date(activity.timestamp || activity.start_time);
                    const endTime = new Date(startTime.getTime() + duration * 1000);

                    allActivities.push({
                        ...activity,
                        type: 'window',
                        start: startTime,
                        end: endTime,
                        duration: duration,
                        application: appName,
                        window_title: activity.window_title || activity.title || '',
                        productivity_score: getProductivityScore(activity)
                    });
                }
            }
        });

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${allActivities.length}`);
    }

    // –≠–¢–ê–ü 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–´–ï –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (data.website_visits && Array.isArray(data.website_visits) && data.website_visits.length > 0) {
        console.log('üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–ß–ù–´–ï –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤:', data.website_visits.length);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        const websiteActivities = [];
        
        data.website_visits.forEach(visit => {
            if (!visit.timestamp) return;
            
            const startTime = new Date(visit.timestamp);
            // –î–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            const duration = parseInt(visit.duration || 60); // 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const endTime = new Date(startTime.getTime() + duration * 1000);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
            const productivity = calculateWebsiteProductivity(visit.url || '');
            
            websiteActivities.push({
                type: 'website',
                start: startTime,
                end: endTime,
                duration: duration,
                application: visit.browser_name || visit.browser || '–ë—Ä–∞—É–∑–µ—Ä',
                window_title: visit.title || visit.url || '–í–µ–±-—Å–∞–π—Ç',
                url: visit.url,
                productivity_score: productivity,
                timestamp: visit.timestamp,
                browser: visit.browser_name || visit.browser
            });
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        websiteActivities.sort((a, b) => a.start - b.start);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ-–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const mergedWebsiteActivities = [];
        let currentWebActivity = null;
        
        websiteActivities.forEach(activity => {
            if (!currentWebActivity) {
                currentWebActivity = { ...activity };
            } else {
                // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30 —Å–µ–∫—É–Ω–¥ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
                const timeDiff = (activity.start - currentWebActivity.end) / 1000;
                
                if (timeDiff <= 30 && activity.browser === currentWebActivity.browser) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    currentWebActivity.end = activity.end;
                    currentWebActivity.duration = Math.floor((currentWebActivity.end - currentWebActivity.start) / 1000);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
                    if (activity.window_title && activity.window_title.length > currentWebActivity.window_title.length) {
                        currentWebActivity.window_title = activity.window_title;
                    }
                    
                    // –£—Å—Ä–µ–¥–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    currentWebActivity.productivity_score = Math.round((currentWebActivity.productivity_score + activity.productivity_score) / 2);
                } else {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    mergedWebsiteActivities.push(currentWebActivity);
                    currentWebActivity = { ...activity };
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (currentWebActivity) {
            mergedWebsiteActivities.push(currentWebActivity);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
        allActivities.push(...mergedWebsiteActivities);
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${websiteActivities.length} ‚Üí ${mergedWebsiteActivities.length} (–ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö)`);
    } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–≤');
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
        if (data.activities && Array.isArray(data.activities)) {
            data.activities.forEach(activity => {
                const processName = (activity.process_name || activity.app_name || '').toLowerCase();
                const appName = activity.app_name || activity.process_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

                const isBrowser = browserProcesses.some(browser => 
                    processName.includes(browser.toLowerCase()) ||
                    appName.toLowerCase().includes('chrome') ||
                    appName.toLowerCase().includes('firefox') ||
                    appName.toLowerCase().includes('edge') ||
                    appName.toLowerCase().includes('opera') ||
                    appName.toLowerCase().includes('safari')
                );

                if (isBrowser) {
                    const duration = parseInt(activity.duration || activity.total_time || activity.active_time || 0);
                    if (duration > 0) {
                        const startTime = new Date(activity.timestamp || activity.start_time);
                        const endTime = new Date(startTime.getTime() + duration * 1000);

                        allActivities.push({
                            ...activity,
                            type: 'browser',
                            start: startTime,
                            end: endTime,
                            duration: duration,
                            application: appName,
                            window_title: activity.window_title || '–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                            productivity_score: 60
                        });
                    }
                }
            });
        }
    }

    console.log(`üéØ –ò–¢–û–ì–û –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ: ${allActivities.length}`);
    console.log(`   - –ù–ï-–±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${allActivities.filter(a => a.type === 'window').length}`);
    console.log(`   - –í–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ—á–Ω—ã–µ): ${allActivities.filter(a => a.type === 'website').length}`);
    console.log(`   - –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±—â–∏–µ): ${allActivities.filter(a => a.type === 'browser').length}`);

    return allActivities;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
function filterDataByEmployee(data, employeeId = null, deviceId = null) {
    if (!data || !Array.isArray(data)) {
        return data;
    }

    let filtered = data;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    if (employeeId) {
        console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: ${employeeId}`);
        filtered = filtered.filter(item => {
            const matches = item.employee_name === employeeId ||
                item.employee_id === employeeId ||
                item.user_name === employeeId ||
                item.user_id === employeeId;

            if (matches) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId}:`, {
                    employee_name: item.employee_name,
                    employee_id: item.employee_id,
                    user_name: item.user_name,
                    user_id: item.user_id,
                    app_name: item.app_name || item.url || item.title
                });
            }

            return matches;
        });
        console.log(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${employeeId}: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    if (deviceId) {
        console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${deviceId}`);
        filtered = filtered.filter(item => {
            const matches = item.device_id === deviceId ||
                item.computer_name === deviceId ||
                item.hostname === deviceId;

            if (matches) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId}:`, {
                    device_id: item.device_id,
                    computer_name: item.computer_name,
                    hostname: item.hostname
                });
            }

            return matches;
        });
        console.log(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É ${deviceId}: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    return filtered;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function getCurrentFilters() {
    const employeeFilter = document.getElementById('employee-filter');
    const deviceFilter = document.getElementById('device-filter');

    return {
        employeeId: employeeFilter && employeeFilter.value ? employeeFilter.value : null,
        deviceId: deviceFilter && deviceFilter.value ? deviceFilter.value : null
    };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ —Å–ø–æ–π–ª–µ—Ä–∞–º–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏

function toggleMajorPeriod(periodIndex) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', periodIndex);

    const header = document.querySelector(`tr.major-period-header[data-major-index="${periodIndex}"]`);
    const icon = header?.querySelector('.period-icon');

    if (!header) {
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', periodIndex);
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã –∏ —Å–æ–±—ã—Ç–∏—è)
    const rows = document.querySelectorAll(`tr[data-parent-major="${periodIndex}"]:not(.major-period-header)`);
    console.log('–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', rows.length);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∏–∫–æ–Ω–∫–µ
    const isCurrentlyCollapsed = icon?.className.includes('chevron-right');
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–≤–µ—Ä–Ω—É—Ç–æ):', isCurrentlyCollapsed);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    rows.forEach(row => {
        row.style.display = isCurrentlyCollapsed ? '' : 'none';
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∫–ª–∞—Å—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if (icon) {
        if (isCurrentlyCollapsed) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–Ω–∏–∑
            icon.className = 'bi bi-chevron-down period-icon me-2';
            header.classList.remove('major-collapsed');
            console.log('–ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–ø—Ä–∞–≤–æ
            icon.className = 'bi bi-chevron-right period-icon me-2';
            header.classList.add('major-collapsed');
            console.log('–ü–µ—Ä–∏–æ–¥ —Å–≤–µ—Ä–Ω—É—Ç');
        }
    }
}

function toggleMinorPeriod(majorIndex, minorIndex) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞:', majorIndex, minorIndex);

    const header = document.querySelector(`tr.minor-period-header[data-minor-index="${majorIndex}-${minorIndex}"]`);
    const icon = header?.querySelector('.period-icon');

    if (!header) {
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', majorIndex, minorIndex);
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–≥–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
    const rows = document.querySelectorAll(`tr.activity-event[data-parent-minor="${majorIndex}-${minorIndex}"]`);
    console.log('–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', rows.length);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∏–∫–æ–Ω–∫–µ
    const isCurrentlyCollapsed = icon?.className.includes('chevron-right');
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞ (—Å–≤–µ—Ä–Ω—É—Ç–æ):', isCurrentlyCollapsed);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    rows.forEach(row => {
        row.style.display = isCurrentlyCollapsed ? '' : 'none';
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∫–ª–∞—Å—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if (icon) {
        if (isCurrentlyCollapsed) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–Ω–∏–∑
            icon.className = 'bi bi-chevron-down period-icon me-2';
            header.classList.remove('minor-collapsed');
            console.log('–ü–æ–¥–ø–µ—Ä–∏–æ–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–ø—Ä–∞–≤–æ
            icon.className = 'bi bi-chevron-right period-icon me-2';
            header.classList.add('minor-collapsed');
            console.log('–ü–æ–¥–ø–µ—Ä–∏–æ–¥ —Å–≤–µ—Ä–Ω—É—Ç');
        }
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫—Ä—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
function toggleAllMajorPeriods(collapse = null) {
    const tbody = document.querySelector('#chronology-table tbody');
    if (!tbody) return;

    const majorHeaders = tbody.querySelectorAll('.major-period-header');

    if (collapse === null) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const firstHeader = majorHeaders[0];
        collapse = firstHeader && !firstHeader.classList.contains('major-collapsed');
    }

    majorHeaders.forEach((header, index) => {
        const periodIndex = header.getAttribute('data-major-index');
        const isCurrentlyCollapsed = header.classList.contains('major-collapsed');

        if (collapse && !isCurrentlyCollapsed) {
            toggleMajorPeriod(periodIndex);
        } else if (!collapse && isCurrentlyCollapsed) {
            toggleMajorPeriod(periodIndex);
        }
    });

    console.log('–í—Å–µ –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:', collapse ? '—Å–≤–µ—Ä–Ω—É—Ç—ã' : '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã');
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–µ—Ä–∏–æ–¥–æ–≤
function toggleAllMinorPeriods(collapse = null) {
    const tbody = document.querySelector('#chronology-table tbody');
    if (!tbody) return;

    const minorHeaders = tbody.querySelectorAll('.minor-period-header');

    if (collapse === null) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
        const firstHeader = minorHeaders[0];
        collapse = firstHeader && !firstHeader.classList.contains('minor-collapsed');
    }

    minorHeaders.forEach(header => {
        const periodKey = header.getAttribute('data-minor-index');
        if (periodKey) {
            const [majorIndex, minorIndex] = periodKey.split('-');
            const isCurrentlyCollapsed = header.classList.contains('minor-collapsed');

            if (collapse && !isCurrentlyCollapsed) {
                toggleMinorPeriod(majorIndex, minorIndex);
            } else if (!collapse && isCurrentlyCollapsed) {
                toggleMinorPeriod(majorIndex, minorIndex);
            }
        }
    });

    console.log('–í—Å–µ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã:', collapse ? '—Å–≤–µ—Ä–Ω—É—Ç—ã' : '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã');
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞–º–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏');

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.addEventListener('click', function (event) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫—Ä—É–ø–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
        if (event.target.closest('.major-period-header')) {
            const header = event.target.closest('.major-period-header');
            const periodIndex = header.getAttribute('data-major-index');
            if (periodIndex !== null) {
                event.preventDefault();
                event.stopPropagation();
                console.log('–ö–ª–∏–∫ –ø–æ –∫—Ä—É–ø–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É:', periodIndex);
                toggleMajorPeriod(periodIndex);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞–º
        else if (event.target.closest('.minor-period-header')) {
            const header = event.target.closest('.minor-period-header');
            const periodKey = header.getAttribute('data-minor-index');
            if (periodKey) {
                const [majorIndex, minorIndex] = periodKey.split('-');
                event.preventDefault();
                event.stopPropagation();
                console.log('–ö–ª–∏–∫ –ø–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—É:', majorIndex, minorIndex);
                toggleMinorPeriod(majorIndex, minorIndex);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —á–∞—Å–æ–≤ (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω)
        else if (event.target.closest('.hour-header')) {
            const header = event.target.closest('.hour-header');
            if (header && !event.target.closest('.btn')) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                event.preventDefault();
                event.stopPropagation();
                console.log('–ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —á–∞—Å–∞');
                
                // –ù–∞—Ö–æ–¥–∏–º —á–∞—Å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                let hour = null;
                let nextElement = header.nextElementSibling;
                while (nextElement && !hour) {
                    if (nextElement.dataset.hourGroup) {
                        hour = nextElement.dataset.hourGroup;
                        break;
                    }
                    nextElement = nextElement.nextElementSibling;
                }
                
                if (hour !== null) {
                    const tbody = header.closest('tbody');
                    const relatedEvents = tbody.querySelectorAll(`tr[data-hour-group="${hour}"]`);
                    const icon = header.querySelector('.collapse-icon i');
                    const isCollapsed = header.classList.contains('collapsed');

                    console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–∞—Å–∞', hour, ':', relatedEvents.length);

                    if (isCollapsed) {
                        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                        header.classList.remove('collapsed');
                        if (icon) icon.className = 'bi bi-chevron-down';
                        relatedEvents.forEach(row => {
                            row.style.display = '';
                        });
                        console.log('–ß–∞—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
                    } else {
                        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                        header.classList.add('collapsed');
                        if (icon) icon.className = 'bi bi-chevron-right';
                        relatedEvents.forEach(row => {
                            row.style.display = 'none';
                        });
                        console.log('–ß–∞—Å —Å–≤–µ—Ä–Ω—É—Ç');
                    }
                }
            }
        }
    });

    console.log('–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ø–æ–π–ª–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤ HTML
window.toggleMajorPeriod = toggleMajorPeriod;
window.toggleMinorPeriod = toggleMinorPeriod;
window.toggleAllMajorPeriods = toggleAllMajorPeriods;
window.toggleAllMinorPeriods = toggleAllMinorPeriods;

function initRegularTimesheet() {
    console.log('üïê initRegularTimesheet –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ');
}



