/**
 * –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –†–ê–ë–û–ß–ï–ì–û –í–†–ï–ú–ï–ù–ò
 * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 * –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
function formatTimeNicely(hours, minutes) {
    // –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    minutes = Math.round(minutes);

    // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã —Ä–∞–≤–Ω—ã 60, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—ã
    if (minutes === 60) {
        hours += 1;
        minutes = 0;
    }

    // –ï—Å–ª–∏ —á–∞—Å–æ–≤ –Ω–µ—Ç (0), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
    if (hours === 0) {
        return `${minutes}–º`;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    return `${hours}—á ${minutes}–º`;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const ACTIVITY_CONSTANTS = {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã–º (–¥–≤–∏–∂–µ–Ω–∏—è + –∫–ª–∏–∫–∏ –∑–∞ –º–∏–Ω—É—Ç—É)
    MIN_MOUSE_ACTIVITY_PER_MINUTE: 5,
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    MAX_INACTIVE_PERIOD: 300, // 5 –º–∏–Ω—É—Ç
    
    // –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    ACTIVITY_WINDOW_SIZE: 60, // 1 –º–∏–Ω—É—Ç–∞
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    PASSIVE_TIME_COEFFICIENT: 0.1, // 10% –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    PASSIVE_TIME_WEIGHT: 0.1, // 10% –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    
    // –°–ø–∏—Å–æ–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ö–õ–Æ–ß–ê–¢–¨ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    BACKGROUND_PROCESSES: [
        'NVIDIA Overlay.exe',
        'NVIDIA GeForce Overlay',
        'TextInputHost.exe',
        'RdClient.Windows.exe',
        'Video.UI.exe', // –ö–∏–Ω–æ –∏ –¢–í (–æ–±—ã—á–Ω–æ –≤ —Ñ–æ–Ω–µ)
        '–ö–∏–Ω–æ –∏ –¢–í',
        'Y.Music.exe', // –ú—É–∑—ã–∫–∞ (–æ–±—ã—á–Ω–æ –≤ —Ñ–æ–Ω–µ)
        'SystemSettings.exe', // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        'GameCenter.exe', // –ò–≥—Ä–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä
        'dwm.exe', // Desktop Window Manager
        'explorer.exe', // –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ (–∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
        'winlogon.exe',
        'csrss.exe',
        'wininit.exe',
        'services.exe',
        'lsass.exe',
        'svchost.exe',
        'RuntimeBroker.exe',
        'ApplicationFrameHost.exe',
        'ShellExperienceHost.exe',
        'StartMenuExperienceHost.exe',
        'SearchUI.exe',
        'Taskmgr.exe', // –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á (–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π)
        'MsMpEng.exe', // Windows Defender
        'SecurityHealthSystray.exe',
        'WinStore.App.exe',
        'Microsoft.Photos.exe', // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤ —Ñ–æ–Ω–µ)
        'Calculator.exe' // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π)
    ],
    
    // –ü—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    CONDITIONAL_ACTIVE_PROCESSES: [
        'msedge.exe',
        'firefox.exe',
        'brave.exe',
        'chrome.exe',
        'Cursor.exe',
        'WorClient.exe',
        'notepad.exe',
        'Code.exe'
    ]
};

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} activities - –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} mouseData - –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
 * @returns {Array} - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function correctActivitiesWithMouseData(activities, mouseData) {
    console.log('üß† –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    console.log('üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        activities: activities.length,
        mouseData: mouseData.length
    });

    if (!mouseData || mouseData.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        return activities;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const mouseActivityMap = createMouseActivityMap(mouseData);
    console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', mouseActivityMap.size, '–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω');

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const correctedActivities = [];
    
    activities.forEach((activity, index) => {
        if (!activity || !activity.duration) {
            return;
        }

        const startTime = activity.start || new Date(activity.timestamp || activity.start_time);
        const duration = parseInt(activity.duration) || 0;
        
        if (isNaN(startTime.getTime()) || duration <= 0) {
            return;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const activityAnalysis = analyzeActivityPeriod(startTime, duration, mouseActivityMap);
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const correctedActivity = {
            ...activity,
            original_duration: duration,
            corrected_duration: activityAnalysis.correctedDuration,
            duration: activityAnalysis.correctedDuration,
            is_real_activity: activityAnalysis.isRealActivity,
            activity_score: activityAnalysis.activityScore,
            active_periods: activityAnalysis.activePeriods,
            passive_periods: activityAnalysis.passivePeriods
        };

        if (correctedActivity.duration > 0) {
            correctedActivities.push(correctedActivity);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        const timeDifference = duration - activityAnalysis.correctedDuration;
        if (timeDifference > 300) { // –ë–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç —Ä–∞–∑–Ω–∏—Ü—ã
            console.log(`üìù –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ #${index}:`, {
                app: activity.app_name || activity.application,
                originalDuration: `${Math.floor(duration/60)}–º ${duration%60}—Å`,
                correctedDuration: `${Math.floor(activityAnalysis.correctedDuration/60)}–º ${activityAnalysis.correctedDuration%60}—Å`,
                timeSaved: `${Math.floor(timeDifference/60)}–º ${timeDifference%60}—Å`,
                activityScore: `${activityAnalysis.activityScore}%`
            });
        }
    });

    console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        originalActivities: activities.length,
        correctedActivities: correctedActivities.length,
        totalOriginalTime: activities.reduce((sum, a) => sum + (parseInt(a.duration) || 0), 0),
        totalCorrectedTime: correctedActivities.reduce((sum, a) => sum + (parseInt(a.duration) || 0), 0)
    });

    return correctedActivities;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º
 * @param {Array} mouseData - –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
 * @returns {Map} - –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º
 */
function createMouseActivityMap(mouseData) {
    const activityMap = new Map();
    
    mouseData.forEach(mouseEntry => {
        if (!mouseEntry.timestamp) return;
        
        const timestamp = new Date(mouseEntry.timestamp);
        if (isNaN(timestamp.getTime())) return;
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        const windowStart = new Date(timestamp);
        windowStart.setSeconds(0, 0);
        const windowKey = windowStart.getTime().toString();
        
        if (!activityMap.has(windowKey)) {
            activityMap.set(windowKey, {
                timestamp: windowStart,
                clicks: 0,
                movements: 0,
                totalActivity: 0
            });
        }
        
        const window = activityMap.get(windowKey);
        window.clicks += parseInt(mouseEntry.mouse_clicks) || 0;
        window.movements += parseInt(mouseEntry.mouse_movements) || 0;
        window.totalActivity = window.clicks + window.movements;
    });
    
    return activityMap;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Date} startTime - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {Map} mouseActivityMap - –ö–∞—Ä—Ç–∞ –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 */
function analyzeActivityPeriod(startTime, duration, mouseActivityMap) {
    const endTime = new Date(startTime.getTime() + duration * 1000);
    
    let totalActiveTime = 0;
    let totalPassiveTime = 0;
    let activePeriods = 0;
    let passivePeriods = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    for (let currentTime = new Date(startTime); currentTime < endTime; currentTime.setMinutes(currentTime.getMinutes() + 1)) {
        const windowStart = new Date(currentTime);
        windowStart.setSeconds(0, 0);
        const windowKey = windowStart.getTime().toString();
        
        const mouseActivity = mouseActivityMap.get(windowKey);
        const activityLevel = mouseActivity ? mouseActivity.totalActivity : 0;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –º–∏–Ω—É—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        const isActiveMinute = activityLevel >= ACTIVITY_CONSTANTS.MIN_MOUSE_ACTIVITY_PER_MINUTE;
        
        const minuteDuration = Math.min(60, Math.floor((endTime - currentTime) / 1000));
        
        if (isActiveMinute) {
            totalActiveTime += minuteDuration;
            activePeriods++;
        } else {
            // –î–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            totalPassiveTime += minuteDuration * ACTIVITY_CONSTANTS.PASSIVE_TIME_COEFFICIENT;
            passivePeriods++;
        }
    }
    
    const correctedDuration = Math.floor(totalActiveTime + totalPassiveTime);
    const activityScore = duration > 0 ? Math.round((totalActiveTime / duration) * 100) : 0;
    const isRealActivity = activityScore >= 20; // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 20% –≤—Ä–µ–º–µ–Ω–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    return {
        correctedDuration,
        isRealActivity,
        activityScore,
        activePeriods,
        passivePeriods,
        originalDuration: duration,
        activeTime: Math.floor(totalActiveTime),
        passiveTime: Math.floor(totalPassiveTime)
    };
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateMainMetrics —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} windowData - –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω (–≤–∫–ª—é—á–∞—è –±—Ä–∞—É–∑–µ—Ä—ã)
 * @param {Array} mouseData - –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ window.lastLoadedData)
 */
function updateMainMetricsWithRealActivity(windowData, mouseData = null) {
    console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¢–û–õ–¨–ö–û —Å WindowActivity');
    
    // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:', {
        totalActivities: windowData ? windowData.length : 0,
        mouseDataProvided: mouseData ? mouseData.length : 0,
        sampleActivities: windowData ? windowData.slice(0, 5) : []
    });
    
    if (windowData && windowData.length > 0) {
        console.log('üîç –ü–ï–†–í–´–ï 5 –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô:');
        windowData.slice(0, 5).forEach((activity, index) => {
            console.log(`   ${index + 1}. ${activity.app_name || activity.application || 'Unknown'}: ${activity.duration}—Å (${Math.floor((activity.duration || 0)/60)}–º ${(activity.duration || 0)%60}—Å)`);
            console.log(`      Timestamp: ${activity.timestamp}`);
            console.log(`      Raw activity:`, activity);
        });
    }
    
    if (!windowData || windowData.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        updateMetrics({ activities: [], mouse_activity: [], website_visits: [] });
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let mouseActivityData = mouseData;
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –º—ã—à–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ window.lastLoadedData
    if (!mouseActivityData) {
        mouseActivityData = window.lastLoadedData?.mouse || [];
        console.log('üñ±Ô∏è –î–∞–Ω–Ω—ã–µ –º—ã—à–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ window.lastLoadedData:', mouseActivityData.length);
    } else {
        console.log('üñ±Ô∏è –î–∞–Ω–Ω—ã–µ –º—ã—à–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é:', mouseActivityData.length);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º—ã—à–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (!mouseActivityData || mouseActivityData.length === 0) {
        if (window.lastAnalyzedRawData?.mouseActivities) {
            mouseActivityData = window.lastAnalyzedRawData.mouseActivities;
            console.log('üñ±Ô∏è –î–∞–Ω–Ω—ã–µ –º—ã—à–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ window.lastAnalyzedRawData:', mouseActivityData.length);
        }
    }
    
    console.log(`üñ±Ô∏è –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏: ${mouseActivityData.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìä –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û WindowActivity: ${windowData.length} –∑–∞–ø–∏—Å–µ–π (–≤–∫–ª—é—á–∞—è –í–°–ï –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)`);
    console.log('üö´ –û–¢–ö–õ–Æ–ß–ï–ù–û: browserData, websiteData - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ windowData');
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–æ
    console.log('üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô:');
    const backgroundActivities = [];
    const validActivities = [];
    
    windowData.forEach(activity => {
        const appName = activity.app_name || activity.application || '';
        const duration = parseInt(activity.duration) || 60;
        
        if (isBackgroundProcess(appName)) {
            backgroundActivities.push({
                app: appName,
                duration: `${Math.floor(duration/60)}–º ${duration%60}—Å`
            });
        } else {
            validActivities.push({
                app: appName,
                duration: `${Math.floor(duration/60)}–º ${duration%60}—Å`
            });
        }
    });
    
    console.log(`üö´ –ë–£–î–£–¢ –ò–°–ö–õ–Æ–ß–ï–ù–´ (${backgroundActivities.length} —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤):`);
    backgroundActivities.forEach(bg => {
        console.log(`   - ${bg.app}: ${bg.duration}`);
    });
    
    console.log(`‚úÖ –ë–£–î–£–¢ –£–ß–¢–ï–ù–´ (${validActivities.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤):`);
    validActivities.forEach(valid => {
        console.log(`   + ${valid.app}: ${valid.duration}`);
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ –ø–æ –º–∏–Ω—É—Ç–∞–º
    const mouseActivityMap = new Map();
    mouseActivityData.forEach(mouse => {
        const timestamp = new Date(mouse.timestamp);
        const minuteKey = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}-${timestamp.getMinutes()}`;
        
        if (!mouseActivityMap.has(minuteKey)) {
            mouseActivityMap.set(minuteKey, { clicks: 0, movements: 0 });
        }
        
        const existing = mouseActivityMap.get(minuteKey);
        existing.clicks += mouse.mouse_clicks || 0;
        existing.movements += mouse.mouse_movements || 0;
    });

    console.log(`üñ±Ô∏è –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${mouseActivityMap.size} –º–∏–Ω—É—Ç`);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¢–û–õ–¨–ö–û –∏–∑ windowData
    const uniqueTimeSlots = new Set();
    const timeSlotDetails = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —Å–ª–æ—Ç–µ
    
    // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –¢–û–õ–¨–ö–û windowData (–≤ –Ω–µ–º —É–∂–µ –µ—Å—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—è –±—Ä–∞—É–∑–µ—Ä—ã)
    windowData.forEach(activity => {
        const appName = activity.app_name || activity.application || '';
        
        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã - –æ–Ω–∏ –ù–ï —Å–æ–∑–¥–∞—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        if (isBackgroundProcess(appName)) {
            console.log(`üö´ –ò–°–ö–õ–Æ–ß–ï–ù —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: ${appName} (–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏)`);
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
        }
        
        const startTime = new Date(activity.timestamp);
        const duration = parseInt(activity.duration) || 60;
        const endTime = new Date(startTime.getTime() + duration * 1000);
        
        console.log(`‚úÖ –í–ö–õ–Æ–ß–ï–ù –≤ —Ä–∞—Å—á–µ—Ç: ${appName} (${Math.floor(duration/60)}–º ${duration%60}—Å = ${duration} —Å–µ–∫—É–Ω–¥)`);
        
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã, –Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ –∫–∞–∂–¥–æ–º
        for (let currentTime = new Date(startTime); currentTime < endTime; currentTime.setMinutes(currentTime.getMinutes() + 1)) {
            const minuteKey = `${currentTime.getFullYear()}-${currentTime.getMonth()}-${currentTime.getDate()}-${currentTime.getHours()}-${currentTime.getMinutes()}`;
            uniqueTimeSlots.add(minuteKey);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç—É –º–∏–Ω—É—Ç—É
            const minuteStart = new Date(currentTime);
            const minuteEnd = new Date(currentTime.getTime() + 60000); // +1 –º–∏–Ω—É—Ç–∞
            const overlapStart = new Date(Math.max(startTime.getTime(), minuteStart.getTime()));
            const overlapEnd = new Date(Math.min(endTime.getTime(), minuteEnd.getTime()));
            const secondsInThisMinute = Math.max(0, Math.floor((overlapEnd - overlapStart) / 1000));
            
            if (!timeSlotDetails.has(minuteKey)) {
                timeSlotDetails.set(minuteKey, {
                    apps: new Set(),
                    maxSeconds: 0, // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
                    hasNonBackground: false,
                    mouseActivity: mouseActivityMap.get(minuteKey) || { clicks: 0, movements: 0 }
                });
            }
            
            const slotInfo = timeSlotDetails.get(minuteKey);
            slotInfo.apps.add(appName);
            // –ë–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–£–ú –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è)
            slotInfo.maxSeconds = Math.max(slotInfo.maxSeconds, secondsInThisMinute);
            slotInfo.hasNonBackground = true; // –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–¥–µ—Å—å —É–∂–µ –Ω–µ-—Ñ–æ–Ω–æ–≤—ã–µ
        }
    });
    
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${uniqueTimeSlots.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¢–û–õ–¨–ö–û –∏–∑ windowData`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
    let totalActiveSeconds = 0;
    let totalPassiveSeconds = 0;
    let realActiveSeconds = 0;
    
    uniqueTimeSlots.forEach(minuteKey => {
        const slotInfo = timeSlotDetails.get(minuteKey);
        const hasMouseActivity = slotInfo.mouseActivity.clicks > 0 || slotInfo.mouseActivity.movements >= ACTIVITY_CONSTANTS.MIN_MOUSE_ACTIVITY_PER_MINUTE;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
        const secondsInSlot = Math.min(60, slotInfo.maxSeconds);
        
        if (hasMouseActivity) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏ - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–µ–∫—É–Ω–¥—ã —Ä–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
            realActiveSeconds += secondsInSlot;
            totalActiveSeconds += secondsInSlot;
        } else if (slotInfo.hasNonBackground) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏, –Ω–æ –µ—Å—Ç—å –Ω–µ-—Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Å—á–∏—Ç–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–º
            totalPassiveSeconds += secondsInSlot;
        }
        
        const apps = Array.from(slotInfo.apps).join(', ');
        console.log(`‚è∞ ${minuteKey}: ${secondsInSlot}—Å–µ–∫ (–ú–ê–ö–°:${slotInfo.maxSeconds}—Å), ${hasMouseActivity ? '–†–ï–ê–õ–¨–ù–û –ê–ö–¢–ò–í–ù–ê–Ø' : '–ü–ê–°–°–ò–í–ù–ê–Ø'} (–º—ã—à—å: ${hasMouseActivity}, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${apps})`);
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ dashboard
    const realActiveTimeMinutes = Math.round(realActiveSeconds / 60);
    const passiveTimeMinutes = Math.round(totalPassiveSeconds / 60);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ú–ê–®–ò–ù–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è (–æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    const machineTimeInfo = calculateMachineTime(windowData);
    const machineTimeMinutes = machineTimeInfo.totalMachineTimeMinutes;
    
    console.log(`‚è∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:`);
    console.log(`   ü§ñ –ú–ê–®–ò–ù–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è (–æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏): ${machineTimeMinutes}–º`);
    console.log(`   ‚úÖ –†–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Å –º—ã—à—å—é): ${realActiveSeconds}—Å–µ–∫ = ${realActiveTimeMinutes}–º`);
    console.log(`   üò¥ –ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ–Ω/—Ç—Ä–µ–π –±–µ–∑ –º—ã—à–∏): ${totalPassiveSeconds}—Å–µ–∫ = ${passiveTimeMinutes}–º`);
    console.log(`   üìä –°—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ+–ø–∞—Å—Å–∏–≤–Ω–æ–µ: ${realActiveTimeMinutes + passiveTimeMinutes}–º`);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –æ–±—â–µ–≥–æ –º–∞—à–∏–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const realActivityPercent = machineTimeMinutes > 0 ? ((realActiveTimeMinutes / machineTimeMinutes) * 100) : 0;
    console.log(`   üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${realActivityPercent.toFixed(1)}% (${realActiveTimeMinutes}–º / ${machineTimeMinutes}–º)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (machineTimeMinutes === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
        updateMetricsToZero();
        return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¢–û–õ–¨–ö–û –∏–∑ windowData)
    const processedActivities = windowData.map(activity => {
        const appName = activity.app_name || activity.application || '';
        const timestamp = new Date(activity.timestamp);
        const minuteKey = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}-${timestamp.getMinutes()}`;
        
        const mouseActivity = mouseActivityMap.get(minuteKey) || { clicks: 0, movements: 0 };
        const hasMouseActivity = mouseActivity.clicks > 0 || mouseActivity.movements >= ACTIVITY_CONSTANTS.MIN_MOUSE_ACTIVITY_PER_MINUTE;
        const isBackground = isBackgroundProcess(appName);
        const weight = getActivityWeight(appName, hasMouseActivity);
        
        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ–π –µ—Å–ª–∏:
        // 1. –ù–µ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ò –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
        // 2. –ò–õ–ò –≤—ã—Å–æ–∫–∏–π –≤–µ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const isRealActivity = (!isBackground && hasMouseActivity) || weight > 0.5;
        
        return {
            ...activity,
            is_real_activity: isRealActivity,
            activity_type: isRealActivity ? 'active' : (isBackground ? 'background' : 'passive'),
            real_activity_score: weight,
            mouse_clicks: mouseActivity.clicks,
            mouse_movements: mouseActivity.movements,
            is_background: isBackground
        };
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const processedData = {
        activities: processedActivities, // –¢–û–õ–¨–ö–û –∏–∑ windowData
        mouse_activity: mouseActivityData, // –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º—ã—à–∏
        website_visits: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        browser_activity: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        real_activity_stats: {
            total_time: machineTimeMinutes, // –ú–ê–®–ò–ù–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            active_time: realActiveTimeMinutes, // –†–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Å –º—ã—à—å—é
            passive_time: passiveTimeMinutes, // –ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–Ω/—Ç—Ä–µ–π –±–µ–∑ –º—ã—à–∏
            activity_ratio: machineTimeMinutes > 0 ? realActiveTimeMinutes / machineTimeMinutes : 0,
            // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è = —Ä–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
            productive_time: realActiveTimeMinutes,
            productivity_score: realActivityPercent
        }
    };

    console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û windowData, –æ—Ç–∫–ª—é—á–µ–Ω—ã browserData –∏ websiteData');
    updateMetrics(processedData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const metrics = {
        totalWorkTime: machineTimeMinutes, // –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è
        totalProductiveTime: realActiveTimeMinutes, // –†–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
        totalBreakTime: passiveTimeMinutes, // –ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
        avgProductivity: Math.round((realActiveTimeMinutes / machineTimeMinutes) * 100), // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞—à–∏–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        activities: processedData.activities || []
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} activities - –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω—É—Ç
 */
function calculateUniqueTimeIntervals(activities) {
    const timeSlots = new Set();
    
    activities.forEach(activity => {
        const startTime = new Date(activity.timestamp);
        const duration = activity.duration || 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
        const endTime = new Date(startTime.getTime() + duration * 1000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Set
        for (let time = new Date(startTime); time < endTime; time.setMinutes(time.getMinutes() + 1)) {
            const minuteKey = `${time.getFullYear()}-${time.getMonth()}-${time.getDate()}-${time.getHours()}-${time.getMinutes()}`;
            timeSlots.add(minuteKey);
        }
    });
    
    return {
        totalMinutes: timeSlots.size,
        uniqueSlots: timeSlots
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
 * @param {Array} activities - –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Map} mouseActivityMap - –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–∞—Å—Å–∏–≤–Ω—ã–º–∏ –º–∏–Ω—É—Ç–∞–º–∏
 */
function calculateTimeIntervalsWithMouseActivity(activities, mouseActivityMap) {
    const timeSlots = new Set();
    const activeSlots = new Set();
    const passiveSlots = new Set();
    
    activities.forEach(activity => {
        const startTime = new Date(activity.timestamp);
        const duration = activity.duration || 60;
        const endTime = new Date(startTime.getTime() + duration * 1000);
        
        for (let time = new Date(startTime); time < endTime; time.setMinutes(time.getMinutes() + 1)) {
            const minuteKey = `${time.getFullYear()}-${time.getMonth()}-${time.getDate()}-${time.getHours()}-${time.getMinutes()}`;
            timeSlots.add(minuteKey);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏ –¥–ª—è —ç—Ç–æ–π –º–∏–Ω—É—Ç—ã
            const mouseActivity = mouseActivityMap.get(minuteKey) || { clicks: 0, movements: 0 };
            const hasMouseActivity = mouseActivity.clicks > 0 || mouseActivity.movements >= ACTIVITY_CONSTANTS.MIN_MOUSE_ACTIVITY_PER_MINUTE;
            
            if (hasMouseActivity) {
                activeSlots.add(minuteKey);
            } else {
                passiveSlots.add(minuteKey);
            }
        }
    });
    
    return {
        totalMinutes: timeSlots.size,
        activeMinutes: activeSlots.size,
        passiveMinutes: passiveSlots.size,
        uniqueSlots: timeSlots
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} correctedActivities - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @returns {Object} - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function calculateRealActivityMetrics(correctedActivities) {
    let totalWorkTime = 0; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    let totalProductiveTime = 0; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    let realActivityTime = 0; // –≤—Ä–µ–º—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    let passiveTime = 0; // –ø–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
    let totalProductivitySum = 0;
    let totalActivities = 0;

    correctedActivities.forEach(activity => {
        const durationMinutes = (activity.corrected_duration || activity.duration) / 60;
        const productivity = activity.productivity_score || getProductivityScore(activity);
        const productiveTime = durationMinutes * (productivity / 100);
        
        totalWorkTime += durationMinutes;
        totalProductiveTime += productiveTime;
        totalProductivitySum += productivity;
        totalActivities++;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏ –ø–∞—Å—Å–∏–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (activity.is_real_activity) {
            realActivityTime += durationMinutes;
        } else {
            passiveTime += durationMinutes;
        }
    });

    const avgProductivity = totalActivities > 0 ? (totalProductivitySum / totalActivities) : 0;
    const realActivityPercent = totalWorkTime > 0 ? (realActivityTime / totalWorkTime) * 100 : 0;

    return {
        totalWorkTime: Math.round(totalWorkTime),
        totalProductiveTime: Math.round(totalProductiveTime),
        realActivityTime: Math.round(realActivityTime),
        passiveTime: Math.round(passiveTime),
        avgProductivity: Math.round(avgProductivity),
        realActivityPercent: Math.round(realActivityPercent),
        totalActivities
    };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {Object} metrics - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function updateMetricsInUI(metrics) {
    // –û–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –û–ë–©–ï–ï –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞)
    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –û–ë–©–ï–ï –≤—Ä–µ–º—è (–∞–∫—Ç–∏–≤–Ω–æ–µ + –ø–∞—Å—Å–∏–≤–Ω–æ–µ)
        const totalTime = metrics.totalWorkTime || (metrics.realActivityTime + metrics.passiveTime) || 0;
        const activeTime = metrics.realActivityTime || 0;
        const hours = Math.floor(totalTime / 60);
        const minutes = Math.round(totalTime % 60);
        totalWorkingTimeElement.textContent = formatTimeNicely(hours, minutes);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = `–û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞`;
        }
    }

    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–û–ï –≤—Ä–µ–º—è)
    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement) {
        const activeTime = metrics.realActivityTime || 0;
        const totalTime = metrics.totalWorkTime || (metrics.realActivityTime + metrics.passiveTime) || 0;
        const productiveHours = Math.floor(activeTime / 60);
        const productiveMinutes = Math.round(activeTime % 60);
        productiveTimeElement.textContent = formatTimeNicely(productiveHours, productiveMinutes);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –æ–±—â–µ–≥–æ
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle && totalTime > 0) {
            const percent = ((activeTime / totalTime) * 100).toFixed(0);
            const totalTimeFormatted = formatTimeNicely(Math.floor(totalTime / 60), totalTime % 60);
            subtitle.textContent = `–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (${percent}% –æ—Ç –æ–±—â–µ–≥–æ ${totalTimeFormatted})`;
        }
    }

    // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement) {
        activityScoreElement.textContent = `${metrics.avgProductivity}%`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = `–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`;
        }
    }

    // –í—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–∞—Å—Å–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è)
    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement) {
        const passiveHours = Math.floor(metrics.passiveTime / 60);
        const passiveMinutes = Math.round(metrics.passiveTime % 60);
        breakTimeElement.textContent = formatTimeNicely(passiveHours, passiveMinutes);

        const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–í—Ä–µ–º—è –ø–∞—Å—Å–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }
}

/**
 * –û–±–Ω—É–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
function updateMetricsToZero() {
    const totalWorkingTimeElement = document.getElementById('total-working-time');
    if (totalWorkingTimeElement) {
        totalWorkingTimeElement.textContent = '0–º';
        const subtitle = totalWorkingTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';
        }
    }

    const productiveTimeElement = document.getElementById('productive-time');
    if (productiveTimeElement) {
        productiveTimeElement.textContent = '0–º';
        const subtitle = productiveTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '0% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
        }
    }

    const activityScoreElement = document.getElementById('activity-score');
    if (activityScoreElement) {
        activityScoreElement.textContent = '0%';
        const subtitle = activityScoreElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }

    const breakTimeElement = document.getElementById('break-time');
    if (breakTimeElement) {
        breakTimeElement.textContent = '0–º';
        const subtitle = breakTimeElement.parentElement.querySelector('.metric-subtitle');
        if (subtitle) {
            subtitle.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
        }
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ–Ω–æ–≤—ã–º
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ–Ω–æ–≤—ã–π
 */
function isBackgroundProcess(appName) {
    if (!appName) return false;
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const appNameLower = appName.toLowerCase();
    
    return ACTIVITY_CONSTANTS.BACKGROUND_PROCESSES.some(bg => {
        const bgLower = bg.toLowerCase();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        return appNameLower === bgLower || 
               appNameLower.includes(bgLower) || 
               bgLower.includes(appNameLower) ||
               // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
               (appNameLower.includes('nvidia') && bgLower.includes('nvidia')) ||
               (appNameLower.includes('video') && bgLower.includes('video')) ||
               (appNameLower.includes('–∫–∏–Ω–æ') && bgLower.includes('–∫–∏–Ω–æ')) ||
               (appNameLower.includes('overlay') && bgLower.includes('overlay'));
    });
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {boolean} hasMouseActivity - –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
 * @returns {number} - –í–µ—Å –æ—Ç 0 –¥–æ 1
 */
function getActivityWeight(appName, hasMouseActivity) {
    if (!appName) return hasMouseActivity ? 1.0 : 0.1;
    
    // –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
    if (isBackgroundProcess(appName)) {
        return 0.05; // 5% –≤–µ—Å–∞
    }
    
    // –£—Å–ª–æ–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º—ã—à–∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const isConditionalActive = ACTIVITY_CONSTANTS.CONDITIONAL_ACTIVE_PROCESSES.some(proc => 
        appName.includes(proc) || proc.includes(appName)
    );
    
    if (isConditionalActive) {
        return hasMouseActivity ? 1.0 : 0.2; // 100% –µ—Å–ª–∏ –µ—Å—Ç—å –º—ã—à—å, 20% –µ—Å–ª–∏ –Ω–µ—Ç
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    return hasMouseActivity ? 1.0 : 0.3; // 100% –µ—Å–ª–∏ –µ—Å—Ç—å –º—ã—à—å, 30% –µ—Å–ª–∏ –Ω–µ—Ç
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º
 * @param {Array} activities - –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Map} mouseActivityMap - –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
 * @returns {Object} - –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function filterAndGroupActivities(activities, mouseActivityMap) {
    const timeWindows = new Map();
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    
    activities.forEach(activity => {
        const appName = activity.app_name || activity.application || '';
        const timestamp = new Date(activity.timestamp);
        const duration = parseInt(activity.duration) || 60;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –º–∏–Ω—É—Ç—ã
        const minuteKey = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}-${timestamp.getMinutes()}`;
        
        if (!timeWindows.has(minuteKey)) {
            timeWindows.set(minuteKey, {
                timestamp: new Date(timestamp.getFullYear(), timestamp.getMonth(), timestamp.getDate(), timestamp.getHours(), timestamp.getMinutes()),
                activities: [],
                mouseActivity: mouseActivityMap.get(minuteKey) || { clicks: 0, movements: 0 },
                totalWeight: 0,
                hasRealActivity: false
            });
        }
        
        const window = timeWindows.get(minuteKey);
        const mouseActivity = window.mouseActivity;
        const hasMouseActivity = mouseActivity.clicks > 0 || mouseActivity.movements >= ACTIVITY_CONSTANTS.MIN_MOUSE_ACTIVITY_PER_MINUTE;
        
        const weight = getActivityWeight(appName, hasMouseActivity);
        const isBackground = isBackgroundProcess(appName);
        
        window.activities.push({
            ...activity,
            weight: weight,
            isBackground: isBackground,
            hasMouseActivity: hasMouseActivity
        });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if (!isBackground) {
            window.totalWeight += weight;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
        if (hasMouseActivity && !isBackground) {
            window.hasRealActivity = true;
        }
        
        console.log(`üì± ${minuteKey}: ${appName} - –≤–µ—Å: ${weight}, —Ñ–æ–Ω: ${isBackground}, –º—ã—à—å: ${hasMouseActivity}`);
    });
    
    return timeWindows;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ú–ê–®–ò–ù–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–µ—Ä–µ—Ä—ã–≤—ã)
 * @param {Array} windowData - –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
function calculateMachineTime(windowData) {
    console.log('ü§ñ [–ú–ê–®–ò–ù–ù–û–ï –í–†–ï–ú–Ø] –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    
    if (!windowData || windowData.length === 0) {
        return {
            totalMachineTimeMinutes: 0,
            firstActivity: null,
            lastActivity: null
        };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-—Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const validActivities = windowData.filter(activity => {
        const appName = activity.app_name || activity.application || '';
        return !isBackgroundProcess(appName);
    });
    
    if (validActivities.length === 0) {
        console.log('‚ö†Ô∏è [–ú–ê–®–ò–ù–ù–û–ï –í–†–ï–ú–Ø] –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
        return {
            totalMachineTimeMinutes: 0,
            firstActivity: null,
            lastActivity: null
        };
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedActivities = validActivities.sort((a, b) => {
        return new Date(a.timestamp) - new Date(b.timestamp);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const firstActivity = sortedActivities[0];
    const lastActivity = sortedActivities[sortedActivities.length - 1];
    
    const firstTime = new Date(firstActivity.timestamp);
    const lastTime = new Date(lastActivity.timestamp);
    const lastDuration = parseInt(lastActivity.duration) || 0;
    const lastEndTime = new Date(lastTime.getTime() + lastDuration * 1000);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ú–ê–®–ò–ù–ù–û–ï –≤—Ä–µ–º—è = –æ—Ç –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const machineTimeMs = lastEndTime - firstTime;
    const machineTimeMinutes = Math.round(machineTimeMs / (1000 * 60));
    
    console.log('ü§ñ [–ú–ê–®–ò–ù–ù–û–ï –í–†–ï–ú–Ø] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:');
    console.log(`   üìÖ –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${firstActivity.app_name} –≤ ${firstTime.toLocaleTimeString()}`);
    console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity.app_name} –≤ ${lastTime.toLocaleTimeString()} - ${lastEndTime.toLocaleTimeString()}`);
    console.log(`   ‚è∞ –ú–ê–®–ò–ù–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${machineTimeMinutes}–º (${Math.floor(machineTimeMinutes/60)}—á ${machineTimeMinutes%60}–º)`);
    
    return {
        totalMachineTimeMinutes: machineTimeMinutes,
        firstActivity: firstActivity,
        lastActivity: lastActivity,
        firstTime: firstTime,
        lastEndTime: lastEndTime
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–û–ï –æ–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 * @param {Array} windowData - –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö
 */
function calculateRealSessionTime(windowData) {
    console.log('‚è∞ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –†–∞—Å—á–µ—Ç –†–ï–ê–õ–¨–ù–û–ì–û –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Å—Å–∏–π');
    
    if (!windowData || windowData.length === 0) {
        return {
            totalSessionTimeMinutes: 0,
            sessions: [],
            sessionCount: 0
        };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-—Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const validActivities = windowData.filter(activity => {
        const appName = activity.app_name || activity.application || '';
        return !isBackgroundProcess(appName);
    });
    
    if (validActivities.length === 0) {
        console.log('‚ö†Ô∏è [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
        return {
            totalSessionTimeMinutes: 0,
            sessions: [],
            sessionCount: 0
        };
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedActivities = validActivities.sort((a, b) => {
        return new Date(a.timestamp) - new Date(b.timestamp);
    });
    
    console.log('üìä [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π:');
    sortedActivities.forEach((activity, index) => {
        const time = new Date(activity.timestamp);
        const duration = parseInt(activity.duration) || 0;
        const endTime = new Date(time.getTime() + duration * 1000);
        console.log(`   ${index + 1}. ${activity.app_name}: ${time.toLocaleTimeString()} - ${endTime.toLocaleTimeString()} (${Math.floor(duration/60)}–º ${duration%60}—Å)`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ—Å—Å–∏–∏ (–ø–µ—Ä–µ—Ä—ã–≤ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç = –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
    const sessions = [];
    let currentSession = null;
    const SESSION_GAP_MINUTES = 15; // –ü–µ—Ä–µ—Ä—ã–≤ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç = –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    
    sortedActivities.forEach(activity => {
        const activityStart = new Date(activity.timestamp);
        const activityDuration = parseInt(activity.duration) || 0;
        const activityEnd = new Date(activityStart.getTime() + activityDuration * 1000);
        
        if (!currentSession) {
            // –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            currentSession = {
                start: activityStart,
                end: activityEnd,
                activities: [activity]
            };
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
            const gapMinutes = (activityStart - currentSession.end) / (1000 * 60);
            
            if (gapMinutes <= SESSION_GAP_MINUTES) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                currentSession.end = new Date(Math.max(currentSession.end.getTime(), activityEnd.getTime()));
                currentSession.activities.push(activity);
            } else {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                sessions.push(currentSession);
                currentSession = {
                    start: activityStart,
                    end: activityEnd,
                    activities: [activity]
                };
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
    if (currentSession) {
        sessions.push(currentSession);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–π
    let totalSessionTimeMinutes = 0;
    
    console.log('üìä [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:');
    sessions.forEach((session, index) => {
        const sessionDurationMs = session.end - session.start;
        const sessionDurationMinutes = Math.round(sessionDurationMs / (1000 * 60));
        totalSessionTimeMinutes += sessionDurationMinutes;
        
        console.log(`   –°–µ—Å—Å–∏—è ${index + 1}: ${session.start.toLocaleTimeString()} - ${session.end.toLocaleTimeString()} = ${sessionDurationMinutes}–º (${session.activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)`);
    });
    
    console.log(`‚è∞ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ò–¢–û–ì–û —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${totalSessionTimeMinutes}–º (${sessions.length} —Å–µ—Å—Å–∏–π)`);
    
    return {
        totalSessionTimeMinutes,
        sessions,
        sessionCount: sessions.length
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
window.correctActivitiesWithMouseData = correctActivitiesWithMouseData;
window.updateMainMetricsWithRealActivity = updateMainMetricsWithRealActivity;
window.calculateRealActivityMetrics = calculateRealActivityMetrics;
window.calculateRealSessionTime = calculateRealSessionTime;
window.calculateMachineTime = calculateMachineTime;

console.log('üß† –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–£–Æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'); 