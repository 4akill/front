// –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å smart-screenshots.js');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
let screenshotsCache = new Map();
let screenshotsLoadingPromises = new Map();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
 */
function initSmartScreenshots() {
    console.log('üñºÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤');
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
    document.addEventListener('dateChanged', () => {
        screenshotsCache.clear();
        screenshotsLoadingPromises.clear();
        console.log('üóëÔ∏è –ö—ç—à —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
    });
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
 * @param {string} date - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @param {string} employeeId - ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
 */
async function loadScreenshotsForDate(date, employeeId = '', deviceId = '') {
    const cacheKey = `${date}-${employeeId}-${deviceId}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (screenshotsCache.has(cacheKey)) {
        console.log(`üìã –°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è ${date} –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞`);
        return screenshotsCache.get(cacheKey);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏ —É–∂–µ
    if (screenshotsLoadingPromises.has(cacheKey)) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è ${date}`);
        return await screenshotsLoadingPromises.get(cacheKey);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingPromise = loadScreenshotsFromAPI(date, employeeId, deviceId);
    screenshotsLoadingPromises.set(cacheKey, loadingPromise);
    
    try {
        const screenshots = await loadingPromise;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        screenshotsCache.set(cacheKey, screenshots);
        console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è ${date} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã: ${screenshots.length} —à—Ç—É–∫`);
        
        return screenshots;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è ${date}:`, error);
        return [];
    } finally {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö—Å—è
        screenshotsLoadingPromises.delete(cacheKey);
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ API
 * @param {string} date - –î–∞—Ç–∞
 * @param {string} employeeId - ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
 */
async function loadScreenshotsFromAPI(date, employeeId, deviceId) {
    const params = new URLSearchParams({
        start_date: date,
        end_date: date
    });
    
    if (employeeId) params.append('employee_id', employeeId);
    if (deviceId) params.append('device_id', deviceId);
    
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ API: /api/public/activity/screenshots?${params.toString()}`);
    
    const response = await fetch(`/api/public/activity/screenshots?${params.toString()}`);
    
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const screenshots = await response.json();
    
    if (!Array.isArray(screenshots)) {
        console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', screenshots);
        return [];
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    return screenshots.map(screenshot => ({
        ...screenshot,
        timestamp: new Date(screenshot.timestamp || screenshot.created_at),
        app_name: screenshot.app_name || screenshot.application || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        window_title: screenshot.window_title || screenshot.title || '',
        is_productive: screenshot.is_productive !== undefined ? screenshot.is_productive : true,
        base64_data: screenshot.base64_data || screenshot.image_data || screenshot.data
    }));
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º
 * @param {Date|string} timestamp - –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Array} screenshots - –ú–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
 * @param {number} maxTimeDiffSeconds - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥)
 * @returns {Promise<Object|null>} - –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ null
 */
async function findScreenshotByTimeAndApp(timestamp, appName, screenshots = null, maxTimeDiffSeconds = 30) {
    const targetTime = new Date(timestamp);
    const dateStr = targetTime.toISOString().split('T')[0];
    
    // –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (!screenshots) {
        screenshots = await loadScreenshotsForDate(dateStr);
    }
    
    if (!screenshots || screenshots.length === 0) {
        console.log(`üì≠ –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (${appName} –≤ ${targetTime.toLocaleTimeString()})`);
        return null;
    }
    
    console.log(`üîç –ò—â–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è ${appName} –≤ ${targetTime.toLocaleTimeString()} —Å—Ä–µ–¥–∏ ${screenshots.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    const appMatchingScreenshots = screenshots.filter(screenshot => {
        return compareAppNames(appName, screenshot.app_name);
    });
    
    if (appMatchingScreenshots.length === 0) {
        console.log(`‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${appName}`);
        return null;
    }
    
    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${appMatchingScreenshots.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${appName}`);
    
    // –ò—â–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    let bestMatch = null;
    let minTimeDiff = Infinity;
    
    appMatchingScreenshots.forEach(screenshot => {
        const screenshotTime = new Date(screenshot.timestamp);
        const timeDiffMs = Math.abs(targetTime - screenshotTime);
        const timeDiffSeconds = timeDiffMs / 1000;
        
        console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ ${screenshotTime.toLocaleTimeString()}: —Ä–∞–∑–Ω–∏—Ü–∞ ${timeDiffSeconds.toFixed(1)}—Å`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é
        if (timeDiffSeconds <= maxTimeDiffSeconds && timeDiffMs < minTimeDiff) {
            bestMatch = screenshot;
            minTimeDiff = timeDiffMs;
            console.log(`‚ú® –ù–æ–≤—ã–π –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: —Ä–∞–∑–Ω–∏—Ü–∞ ${timeDiffSeconds.toFixed(1)}—Å`);
        }
    });
    
    if (bestMatch) {
        const timeDiffSeconds = (minTimeDiff / 1000).toFixed(1);
        console.log(`üéØ –ù–ê–ô–î–ï–ù —Ç–æ—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è ${appName} –≤ ${targetTime.toLocaleTimeString()}: —Ä–∞–∑–Ω–∏—Ü–∞ ${timeDiffSeconds}—Å`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∫—Ä–∞–∂—É" —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        const screenshotTime = new Date(bestMatch.timestamp);
        const isExactMatch = Math.abs(targetTime - screenshotTime) <= (maxTimeDiffSeconds * 1000);
        
        if (!isExactMatch) {
            console.warn(`‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ ${maxTimeDiffSeconds}—Å)`);
            return null;
        }
        
        return bestMatch;
    } else {
        console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è ${appName} –≤ ${targetTime.toLocaleTimeString()}`);
        return null;
    }
}

/**
 * –°–¢–†–û–ì–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
 * @param {string} name1 - –ü–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @param {string} name2 - –í—Ç–æ—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @returns {boolean} - true –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
 */
function compareAppNames(name1, name2) {
    if (!name1 || !name2) return false;
    
    const normalize = (name) => {
        return name.toLowerCase()
            .replace(/\.exe$/, '')
            .replace(/\s+/g, '')
            .replace(/[^\w]/g, '');
    };
    
    const normalized1 = normalize(name1);
    const normalized2 = normalize(name2);
    
    console.log(`üî§ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: "${normalized1}" vs "${normalized2}"`);
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (normalized1 === normalized2) {
        console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π`);
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤ –¥—Ä—É–≥–æ–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è)
    const minLength = Math.min(normalized1.length, normalized2.length);
    const maxLength = Math.max(normalized1.length, normalized2.length);
    
    // –ï—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º, –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
    if (minLength < 3 || maxLength / minLength > 2) {
        console.log(`‚ùå –ù–∞–∑–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –ø–æ –¥–ª–∏–Ω–µ`);
        return false;
    }
    
    if (normalized1.includes(normalized2) || normalized2.includes(normalized1)) {
        console.log(`‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π`);
        return true;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)
    const browserAliases = {
        'chrome': ['googlechrome', 'chromium'],
        'firefox': ['mozilla', 'firefoxesr'],
        'edge': ['msedge', 'microsoftedge'],
        'opera': ['operagx', 'operabrowser']
    };
    
    for (const [main, aliases] of Object.entries(browserAliases)) {
        const name1IsBrowser = normalized1.includes(main) || aliases.some(alias => normalized1.includes(alias));
        const name2IsBrowser = normalized2.includes(main) || aliases.some(alias => normalized2.includes(alias));
        
        if (name1IsBrowser && name2IsBrowser) {
            console.log(`‚úÖ –û–±–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É ${main}`);
            return true;
        }
    }
    
    console.log(`‚ùå –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
    return false;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
 * @param {Date|string} timestamp - –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
 * @returns {Promise<HTMLElement|null>} - –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ null
 */
async function createScreenshotButton(timestamp, appName, containerId = null) {
    console.log(`üîò –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è ${appName} –≤ ${new Date(timestamp).toLocaleTimeString()}`);
    
    const screenshot = await findScreenshotByTimeAndApp(timestamp, appName);
    
    if (!screenshot) {
        console.log(`‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞`);
        return null;
    }
    
    const button = document.createElement('button');
    button.className = 'btn btn-sm btn-outline-primary screenshot-btn';
    button.innerHTML = '<i class="bi bi-camera"></i>';
    
    const screenshotTime = new Date(screenshot.timestamp);
    const activityTime = new Date(timestamp);
    const timeDiff = Math.abs(screenshotTime - activityTime) / 1000;
    
    button.title = `–°–∫—Ä–∏–Ω—à–æ—Ç –≤ ${screenshotTime.toLocaleTimeString()} (¬±${timeDiff.toFixed(1)}—Å)`;
    
    button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        openScreenshotModal(screenshot, timestamp, appName);
    });
    
    if (containerId) {
        const container = document.getElementById(containerId);
        if (container) {
            container.appendChild(button);
        }
    }
    
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞`);
    return button;
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 * @param {Object} screenshot - –û–±—ä–µ–∫—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @param {Date|string} activityTimestamp - –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
 * @param {string} activityAppName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function openScreenshotModal(screenshot, activityTimestamp = null, activityAppName = null) {
    console.log('üñºÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç:', screenshot);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let modal = document.getElementById('screenshot-modal');
    if (!modal) {
        modal = createScreenshotModal();
        document.body.appendChild(modal);
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const img = modal.querySelector('#screenshot-image');
    const title = modal.querySelector('#screenshot-title');
    const info = modal.querySelector('#screenshot-info');
    
    if (img && screenshot.base64_data) {
        img.src = `data:image/png;base64,${screenshot.base64_data}`;
        img.alt = `–°–∫—Ä–∏–Ω—à–æ—Ç ${screenshot.app_name}`;
    }
    
    if (title) {
        title.textContent = `${screenshot.app_name} - ${new Date(screenshot.timestamp).toLocaleString()}`;
    }
    
    if (info) {
        let infoHtml = `
            <strong>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</strong> ${screenshot.app_name}<br>
            <strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞:</strong> ${screenshot.window_title || '–ù–µ —É–∫–∞–∑–∞–Ω'}<br>
            <strong>–í—Ä–µ–º—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:</strong> ${new Date(screenshot.timestamp).toLocaleString()}<br>
            <strong>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${screenshot.is_productive ? '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ'}
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (activityTimestamp && activityAppName) {
            const activityTime = new Date(activityTimestamp);
            const screenshotTime = new Date(screenshot.timestamp);
            const timeDiff = Math.abs(screenshotTime - activityTime) / 1000;
            
            infoHtml += `<hr>`;
            infoHtml += `<strong>–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> ${activityTime.toLocaleString()}<br>`;
            infoHtml += `<strong>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> ${activityAppName}<br>`;
            infoHtml += `<strong>–¢–æ—á–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:</strong> ¬±${timeDiff.toFixed(1)} —Å–µ–∫—É–Ω–¥<br>`;
            
            if (timeDiff <= 10) {
                infoHtml += `<span class="badge bg-success">–¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</span>`;
            } else if (timeDiff <= 30) {
                infoHtml += `<span class="badge bg-warning">–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</span>`;
            } else {
                infoHtml += `<span class="badge bg-danger">–ù–µ—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</span>`;
            }
        }
        
        info.innerHTML = infoHtml;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function createScreenshotModal() {
    const modalHtml = `
        <div class="modal fade" id="screenshot-modal" tabindex="-1" aria-labelledby="screenshot-modal-label" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="screenshot-modal-label">
                            <span id="screenshot-title">–°–∫—Ä–∏–Ω—à–æ—Ç</span>
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
                    </div>
                    <div class="modal-body text-center">
                        <img id="screenshot-image" class="img-fluid rounded shadow" style="max-height: 70vh;" alt="–°–∫—Ä–∏–Ω—à–æ—Ç">
                        <div class="mt-3">
                            <div id="screenshot-info" class="text-start"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = modalHtml;
    return tempDiv.firstElementChild;
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å —Ç–æ—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π
 * @param {string} containerSelector - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
 * @param {string} dateFilter - –î–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
async function addScreenshotButtonsToTimeline(containerSelector = '.chronology-item', dateFilter = null) {
    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∫ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å —Ç–æ—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π');
    
    const items = document.querySelectorAll(containerSelector);
    const currentDate = dateFilter || new Date().toISOString().split('T')[0];
    
    console.log(`üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –¥–∞—Ç—ã ${currentDate}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const screenshots = await loadScreenshotsForDate(currentDate);
    
    if (screenshots.length === 0) {
        console.log('üì≠ –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫');
        return;
    }
    
    console.log(`üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${screenshots.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);
    
    let buttonsAdded = 0;
    let buttonsSkipped = 0;
    
    for (const item of items) {
        const timeElement = item.querySelector('[data-time]');
        const appElement = item.querySelector('[data-app]');
        
        if (!timeElement || !appElement) {
            buttonsSkipped++;
            continue;
        }
        
        const timestamp = timeElement.getAttribute('data-time');
        const appName = appElement.getAttribute('data-app');
        
        if (!timestamp || !appName) {
            buttonsSkipped++;
            continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏
        if (item.querySelector('.screenshot-btn')) {
            buttonsSkipped++;
            continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        const button = await createScreenshotButtonWithScreenshots(timestamp, appName, screenshots);
        if (button) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —ç–ª–µ–º–µ–Ω—Ç
            const actionsContainer = item.querySelector('.actions') || item;
            actionsContainer.appendChild(button);
            buttonsAdded++;
        } else {
            buttonsSkipped++;
        }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${buttonsAdded} –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${buttonsSkipped} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
 * @param {Date|string} timestamp - –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Array} screenshots - –ú–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
 * @returns {Promise<HTMLElement|null>} - –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ null
 */
async function createScreenshotButtonWithScreenshots(timestamp, appName, screenshots) {
    const screenshot = await findScreenshotByTimeAndApp(timestamp, appName, screenshots);
    
    if (!screenshot) {
        return null;
    }
    
    const button = document.createElement('button');
    button.className = 'btn btn-sm btn-outline-primary screenshot-btn';
    button.innerHTML = '<i class="bi bi-camera"></i>';
    
    const screenshotTime = new Date(screenshot.timestamp);
    const activityTime = new Date(timestamp);
    const timeDiff = Math.abs(screenshotTime - activityTime) / 1000;
    
    button.title = `–°–∫—Ä–∏–Ω—à–æ—Ç –≤ ${screenshotTime.toLocaleTimeString()} (¬±${timeDiff.toFixed(1)}—Å)`;
    
    button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        openScreenshotModal(screenshot, timestamp, appName);
    });
    
    return button;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', initSmartScreenshots);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.smartScreenshots = {
    loadScreenshotsForDate,
    findScreenshotByTimeAndApp,
    createScreenshotButton,
    openScreenshotModal,
    addScreenshotButtonsToTimeline,
    compareAppNames
};

console.log('‚úÖ –ú–æ–¥—É–ª—å smart-screenshots.js –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤'); 