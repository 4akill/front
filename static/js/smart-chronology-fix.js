/**
 * SmartChronologyFix v3.0.5
 * –ú–æ–¥—É–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2024
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ window_activity –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º: –£—Ç—Ä–æ (7-12), –î–µ–Ω—å (12-18), –í–µ—á–µ—Ä (18-24)
 * 
 * v3.0.0 - –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: —Ñ–æ–∫—É—Å –Ω–∞ window_activity, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞, –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
 * v3.0.1 - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * v3.0.2 - –î–û–ë–ê–í–õ–ï–ù–ê –∫–Ω–æ–ø–∫–∞ —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
 * v3.0.3 - –ò–°–ü–†–ê–í–õ–ï–ù–ê —á–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
 * v3.0.4 - –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: —á–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
 * v3.0.5 - –ò–°–ü–†–ê–í–õ–ï–ù —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: 11:24 - 17:00 (5—á 36–º)
 */

console.log('[SmartChronologyFix] v3.0.5 –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–æ)
const TIME_SEGMENTS = {
    morning: {
        name: '–£—Ç—Ä–æ',
        start: 7,
        end: 12,
        icon: 'üåÖ',
        color: '#FFE4B5'
    },
    day: {
        name: '–î–µ–Ω—å', 
        start: 12,
        end: 18,
        icon: '‚òÄÔ∏è',
        color: '#87CEEB'
    },
    evening: {
        name: '–í–µ—á–µ—Ä',
        start: 18,
        end: 24,
        icon: 'üåÜ',
        color: '#DDA0DD'
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class WindowActivityAggregator {
    constructor() {
        this.sessionCache = new Map();
        this.debugging = true;
    }

    log(message, data = null) {
        if (this.debugging) {
            console.log(`[ActivityAggregator] ${message}`, data || '');
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    getTimeSegment(timestamp) {
        const date = new Date(timestamp);
        const hour = date.getHours();
        
        if (hour >= 7 && hour < 12) return 'morning';
        if (hour >= 12 && hour < 18) return 'day';
        if (hour >= 18 && hour < 24) return 'evening';
        
        // –ù–æ—á–Ω—ã–µ —á–∞—Å—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
        return null;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ window_activity
    filterWindowActivity(events) {
        const filtered = events.filter(event => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const activityType = event.activity_type || event.type || '';
            const isWindowActivity = activityType === 'window_activity' || 
                                   event.window_title || 
                                   event.app_name;
            
            return isWindowActivity && this.getTimeSegment(event.timestamp);
        });
        
        this.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ window_activity: ${filtered.length} –∏–∑ ${events.length}`);
        return filtered;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π
    groupSimilarEvents(events) {
        if (events.length === 0) return [];
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sorted = [...events].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        const groups = [];
        let currentGroup = [sorted[0]];
        
        for (let i = 1; i < sorted.length; i++) {
            const current = sorted[i];
            const lastInGroup = currentGroup[currentGroup.length - 1];
            
            const timeDiff = (new Date(current.timestamp) - new Date(lastInGroup.timestamp)) / (1000 * 60); // –º–∏–Ω—É—Ç—ã
            const sameApp = (current.app_name || '') === (lastInGroup.app_name || '');
            
            // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç –∏ —Ç–æ –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if (timeDiff <= 5 && sameApp) {
                currentGroup.push(current);
            } else {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                groups.push(this.createEventGroup(currentGroup));
                currentGroup = [current];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        groups.push(this.createEventGroup(currentGroup));
        
        this.log(`–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: ${groups.length} –∏–∑ ${events.length} —Å–æ–±—ã—Ç–∏–π`);
        return groups;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–±—ã—Ç–∏–π
    createEventGroup(events) {
        if (events.length === 0) return null;
        
        const firstEvent = events[0];
        const lastEvent = events[events.length - 1];
        
        const startTime = new Date(firstEvent.timestamp);
        const endTime = new Date(lastEvent.timestamp);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥, —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –¥–∞–µ–º –µ–º—É –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç—É
        let durationMin;
        if (events.length === 1) {
            durationMin = 1; // –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        } else {
            const durationMs = endTime - startTime;
            durationMin = Math.max(1, Math.round(durationMs / (1000 * 60)));
        }
        
        return {
            id: `group_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            app_name: firstEvent.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            window_title: firstEvent.window_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            start_time: startTime,
            end_time: endTime,
            duration_min: durationMin,
            events_count: events.length,
            events: events,
            is_group: events.length > 1
        };
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    aggregateByTimeSegments(windowEvents) {
        this.log('–ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º...');
        
        const segments = {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        Object.keys(TIME_SEGMENTS).forEach(segmentKey => {
            segments[segmentKey] = {
                segment: TIME_SEGMENTS[segmentKey],
                events: [],
                groups: [],
                total_duration_min: 0,
                apps_count: 0,
                time_range: null
            };
        });

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        windowEvents.forEach(event => {
            const segmentKey = this.getTimeSegment(event.timestamp);
            if (segmentKey && segments[segmentKey]) {
                segments[segmentKey].events.push(event);
            }
        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–∂–¥–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ
        Object.keys(segments).forEach(segmentKey => {
            const segment = segments[segmentKey];
            if (segment.events.length > 0) {
                segment.groups = this.groupSimilarEvents(segment.events);
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                // –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
                const sortedEvents = segment.events.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
                const firstEvent = new Date(sortedEvents[0].timestamp);
                const lastEvent = new Date(sortedEvents[sortedEvents.length - 1].timestamp);
                
                const segmentDurationMs = lastEvent - firstEvent;
                segment.total_duration_min = Math.max(1, Math.round(segmentDurationMs / (1000 * 60)));
                segment.time_range = {
                    start: firstEvent,
                    end: lastEvent
                };
                
                const uniqueApps = new Set(segment.groups.map(g => g.app_name));
                segment.apps_count = uniqueApps.size;
                
                this.log(`–°–µ–≥–º–µ–Ω—Ç ${segment.segment.name}:`, {
                    events: segment.events.length,
                    groups: segment.groups.length,
                    duration_calculated: segment.total_duration_min,
                    time_range: `${firstEvent.toLocaleTimeString('ru-RU')} - ${lastEvent.toLocaleTimeString('ru-RU')}`,
                    apps: segment.apps_count
                });
            }
        });

        return segments;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processWindowActivity(allEvents) {
        this.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω...', { total_events: allEvents.length });
        
        // 1. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ window_activity
        const windowEvents = this.filterWindowActivity(allEvents);
        
        if (windowEvents.length === 0) {
            this.log('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π window_activity –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return {
                segments: {},
                summary: {
                    total_events: 0,
                    total_duration_min: 0,
                    time_range: null
                }
            };
        }

        // 2. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
        const segments = this.aggregateByTimeSegments(windowEvents);
        
        // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞
        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –¥–æ —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        const allTimes = windowEvents.map(e => new Date(e.timestamp)).sort((a, b) => a - b);
        const totalDurationMs = allTimes[allTimes.length - 1] - allTimes[0];
        const totalDurationMin = Math.round(totalDurationMs / (1000 * 60));
        
        const summary = {
            total_events: windowEvents.length,
            total_duration_min: totalDurationMin,
            time_range: allTimes.length > 0 ? {
                start: allTimes[0],
                end: allTimes[allTimes.length - 1]
            } : null
        };

        this.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
            total_events: summary.total_events,
            total_duration_calculated: summary.total_duration_min,
            time_span: summary.time_range ? 
                `${summary.time_range.start.toLocaleTimeString('ru-RU')} - ${summary.time_range.end.toLocaleTimeString('ru-RU')}` : 
                '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
        
        return { segments, summary };
    }
}

// –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
class ReadableChronologyBuilder {
    constructor() {
        this.debugging = true;
        this.currentEvents = [];
    }

    log(message, data = null) {
        if (this.debugging) {
            console.log(`[ReadableChronology] ${message}`, data || '');
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    setEvents(events) {
        this.currentEvents = events || [];
        this.log('–°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:', this.currentEvents.length);
    }

    // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–î–ï–õ–ê–ù–ù–ê–Ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    groupByTimeIntervals(events) {
        if (!events || events.length === 0) return [];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedEvents = [...events].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        
        const intervals = [];
        let currentInterval = null;
        const maxGapMinutes = 10; // –†–∞–∑—Ä—ã–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

        sortedEvents.forEach(event => {
            const eventTime = new Date(event.timestamp);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if (!currentInterval || 
                (eventTime - currentInterval.endTime) > (maxGapMinutes * 60 * 1000)) {
                
                if (currentInterval) {
                    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    this.finalizeInterval(currentInterval);
                    intervals.push(currentInterval);
                }
                
                currentInterval = {
                    startTime: eventTime,
                    endTime: eventTime,
                    events: [],
                    applications: new Map() // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
                };
            }

            // –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            currentInterval.endTime = eventTime;
            currentInterval.events.push(event);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –í–ù–£–¢–†–ò –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const appName = event.app_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
            
            if (!currentInterval.applications.has(appName)) {
                currentInterval.applications.set(appName, {
                    events: [],
                    firstTime: eventTime,
                    lastTime: eventTime,
                    totalDuration: 0,
                    significantWindows: new Map() // –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –æ–∫–æ–Ω
                });
            }
            
            const appData = currentInterval.applications.get(appName);
            appData.events.push(event);
            appData.lastTime = eventTime;
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –æ–∫–Ω–∞ (–Ω–µ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ)
            const windowKey = this.getSignificantWindowKey(event);
            if (!appData.significantWindows.has(windowKey)) {
                appData.significantWindows.set(windowKey, {
                    title: event.window_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    events: [],
                    firstTime: eventTime,
                    lastTime: eventTime
                });
            }
            
            const windowData = appData.significantWindows.get(windowKey);
            windowData.events.push(event);
            windowData.lastTime = eventTime;
        });

        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (currentInterval) {
            this.finalizeInterval(currentInterval);
            intervals.push(currentInterval);
        }

        this.log('–°–æ–∑–¥–∞–Ω–æ —á–∏—Ç–∞–µ–º—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:', intervals.length);
        return intervals;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –æ–∫–æ–Ω (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    getSignificantWindowKey(event) {
        const title = event.window_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        
        // –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–∫–Ω–∞
        const cleanTitle = title
            .replace(/\s*‚Äî\s*.*$/, '') // –£–±–∏—Ä–∞–µ–º " ‚Äî Mozilla Firefox" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
            .replace(/\s*-\s*.*$/, '')  // –£–±–∏—Ä–∞–µ–º " - Google Chrome" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
            .replace(/^\[.*?\]\s*/, '') // –£–±–∏—Ä–∞–µ–º "[Administrator]" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
            .trim();
            
        return cleanTitle || title;
    }

    // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    finalizeInterval(interval) {
        interval.applications.forEach((appData, appName) => {
            // –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            if (appData.events.length === 1) {
                appData.totalDuration = 60; // –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            } else {
                const durationMs = appData.lastTime - appData.firstTime;
                appData.totalDuration = Math.max(60, Math.round(durationMs / 1000)); // –í —Å–µ–∫—É–Ω–¥–∞—Ö, –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
            }
            
            // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –æ–∫–Ω–∞
            appData.significantWindows.forEach((windowData, windowKey) => {
                if (windowData.events.length === 1) {
                    windowData.duration = 30; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                } else {
                    const durationMs = windowData.lastTime - windowData.firstTime;
                    windowData.duration = Math.max(10, Math.round(durationMs / 1000)); // –í —Å–µ–∫—É–Ω–¥–∞—Ö
                }
            });
        });
    }

    // –ù–û–í–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    createReadableHTML(intervals) {
        if (!intervals || intervals.length === 0) {
            return `
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</th>
                        <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                        <th>–¢–∏–ø</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 20px; color: #666;">
                            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                        </td>
                    </tr>
                </tbody>
            `;
        }

        let html = `
            <thead>
                <tr>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</th>
                    <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                    <th>–¢–∏–ø</th>
                </tr>
            </thead>
            <tbody>
        `;

        intervals.forEach((interval, index) => {
            const startTime = this.formatTime(interval.startTime);
            const endTime = this.formatTime(interval.endTime);
            const intervalDurationMin = Math.round((interval.endTime - interval.startTime) / (1000 * 60));
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            let timeRange;
            if (intervalDurationMin >= 60) {
                const hours = Math.floor(intervalDurationMin / 60);
                const mins = intervalDurationMin % 60;
                if (mins === 0) {
                    timeRange = `${startTime} - ${endTime} (${hours}—á)`;
                } else {
                    timeRange = `${startTime} - ${endTime} (${hours}—á ${mins}–º)`;
                }
            } else {
                timeRange = `${startTime} - ${endTime} (${intervalDurationMin} –º–∏–Ω)`;
            }

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
            html += `
                <tr style="background-color: #e8f4fd; font-weight: bold;">
                    <td style="padding: 8px;">${timeRange}</td>
                    <td style="padding: 8px;">üìä –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</td>
                    <td style="padding: 8px; text-align: center;">${interval.events.length} —Å–æ–±—ã—Ç–∏–π</td>
                    <td style="padding: 8px; text-align: center;">‚ö°</td>
                </tr>
            `;

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ = –≤—ã—à–µ)
            const sortedApps = Array.from(interval.applications.entries())
                .sort((a, b) => b[1].totalDuration - a[1].totalDuration);

            sortedApps.forEach(([appName, appData]) => {
                const appDurationStr = this.formatDurationFromSeconds(appData.totalDuration);
                
                // –°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                html += `
                    <tr>
                        <td style="padding: 4px 8px 4px 24px; font-size: 14px; border-bottom: 1px solid #f0f0f0;">
                            (${appDurationStr})
                        </td>
                        <td style="padding: 4px 8px; font-size: 14px; font-weight: bold; border-bottom: 1px solid #f0f0f0;">
                            ${appName}
                        </td>
                        <td style="padding: 4px 8px; text-align: center; font-size: 14px; border-bottom: 1px solid #f0f0f0;">
                            ${appData.events.length} —Å–æ–±—ã—Ç–∏–π
                        </td>
                        <td style="padding: 4px 8px; text-align: center; font-size: 14px; border-bottom: 1px solid #f0f0f0;">
                            üñ•Ô∏è
                        </td>
                    </tr>
                `;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –æ–∫–Ω–∞ (–Ω–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥—Ä—è–¥)
                const significantWindows = Array.from(appData.significantWindows.entries())
                    .sort((a, b) => b[1].duration - a[1].duration)
                    .slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –∑–Ω–∞—á–∏–º—ã—Ö –æ–∫–æ–Ω

                significantWindows.forEach(([windowKey, windowData]) => {
                    const windowDurationStr = this.formatDurationFromSeconds(windowData.duration);
                    
                    html += `
                        <tr>
                            <td style="padding: 2px 8px 2px 48px; font-size: 12px; color: #666; border-bottom: 1px solid #f8f8f8;">
                                ${windowDurationStr}
                            </td>
                            <td style="padding: 2px 8px; font-size: 12px; color: #666; border-bottom: 1px solid #f8f8f8;">
                                ${windowData.title}
                            </td>
                            <td style="padding: 2px 8px; text-align: center; font-size: 12px; color: #666; border-bottom: 1px solid #f8f8f8;">
                                ${windowData.events.length} —Ä–∞–∑
                            </td>
                            <td style="padding: 2px 8px; text-align: center; font-size: 12px; color: #666; border-bottom: 1px solid #f8f8f8;">
                                üìÑ
                            </td>
                        </tr>
                    `;
                });

                // –ï—Å–ª–∏ –æ–∫–æ–Ω –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if (appData.significantWindows.size > 5) {
                    const remainingCount = appData.significantWindows.size - 5;
                    html += `
                        <tr>
                            <td style="padding: 2px 8px 2px 48px; font-size: 11px; color: #999; font-style: italic;" colspan="4">
                                ... –µ—â—ë ${remainingCount} –æ–∫–æ–Ω
                            </td>
                        </tr>
                    `;
                }
            });
        });

        html += '</tbody>';
        this.log('HTML –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω (–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)');
        return html;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(date) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å–µ–∫—É–Ω–¥
    formatDurationFromSeconds(seconds) {
        if (seconds < 60) {
            return `${seconds} —Å–µ–∫`;
        } else {
            const minutes = Math.round(seconds / 60);
            if (minutes < 60) {
                return `${minutes} –º–∏–Ω`;
            } else {
                const hours = Math.floor(minutes / 60);
                const mins = minutes % 60;
                if (mins === 0) {
                    return `${hours} —á`;
                } else {
                    return `${hours} —á ${mins} –º–∏–Ω`;
                }
            }
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    buildReadableChronology() {
        this.log('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏...');
        
        if (!this.currentEvents || this.currentEvents.length === 0) {
            this.log('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏');
            return this.createReadableHTML([]);
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ window_activity
        const windowEvents = this.currentEvents.filter(event => {
            const activityType = event.activity_type || event.type || '';
            return activityType === 'window_activity' || event.window_title || event.app_name;
        });

        this.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ window_activity —Å–æ–±—ã—Ç–∏–π:', windowEvents.length);

        if (windowEvents.length === 0) {
            return this.createReadableHTML([]);
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        const intervals = this.groupByTimeIntervals(windowEvents);
        
        // –°–æ–∑–¥–∞–µ–º HTML
        return this.createReadableHTML(intervals);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML
class ActivityRenderer {
    constructor() {
        this.debugging = true;
        this.readableBuilder = new ReadableChronologyBuilder();
    }

    log(message, data = null) {
        if (this.debugging) {
            console.log(`[ActivityRenderer] ${message}`, data || '');
        }
    }

    formatTime(date) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    formatDuration(minutes) {
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        
        if (hours > 0) {
            return `${hours}—á ${mins}–º`;
        } else {
            return `${mins}–º`;
        }
    }

    // –†–µ–Ω–¥–µ—Ä –≥—Ä—É–ø–ø—ã —Å–æ–±—ã—Ç–∏–π
    renderEventGroup(group, segmentKey) {
        const startTime = this.formatTime(group.start_time);
        const endTime = this.formatTime(group.end_time);
        const timeRange = `${startTime} - ${endTime}`;
        const duration = this.formatDuration(group.duration_min);
        
        const groupId = `${segmentKey}_${group.id}`;
        const isGrouped = group.is_group ? ` (${group.events_count} —Å–æ–±—ã—Ç–∏–π)` : '';
        
        return `
            <tr class="activity-group">
                <td style="padding: 4px 8px; width: 120px; font-size: 12px; border-bottom: 1px solid #eee;">
                    ${timeRange}
                </td>
                <td style="padding: 4px 8px; font-size: 12px; border-bottom: 1px solid #eee;">
                    <strong>${group.app_name}</strong>${isGrouped}
                    <br><small style="color: #666;">${group.window_title}</small>
                </td>
                <td style="padding: 4px 8px; width: 80px; text-align: center; font-size: 12px; border-bottom: 1px solid #eee;">
                    ${duration}
                </td>
                <td style="padding: 4px 8px; width: 60px; text-align: center; font-size: 12px; border-bottom: 1px solid #eee;">
                    ${group.is_group ? 'üìÅ' : 'üìÑ'}
                </td>
            </tr>
        `;
    }

    // –†–µ–Ω–¥–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    renderTimeSegment(segmentKey, segmentData) {
        if (segmentData.groups.length === 0) return '';
        
        const segment = segmentData.segment;
        const duration = this.formatDuration(segmentData.total_duration_min);
        const timeRange = segmentData.time_range ? 
            `${this.formatTime(segmentData.time_range.start)}-${this.formatTime(segmentData.time_range.end)}` :
            `${segment.start}:00-${segment.end}:00`;
        
        const headerStyle = `background-color: ${segment.color}; padding: 12px; cursor: pointer; border-radius: 6px; border: 2px solid rgba(0,0,0,0.1);`;
        
        const groupsHtml = segmentData.groups
            .map(group => this.renderEventGroup(group, segmentKey))
            .join('');
        
        return `
            <tr>
                <td colspan="4" style="${headerStyle}" onclick="toggleTimeSegment('${segmentKey}')">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="font-weight: bold; font-size: 16px;">
                            <span id="segment-${segmentKey}-arrow" style="margin-right: 8px;">‚ñº</span>
                            ${segment.icon} ${segment.name}
                            <span style="margin-left: 10px; font-size: 14px;">
                                (${segmentData.groups.length} –≥—Ä—É–ø–ø, ${duration})
                            </span>
                        </div>
                        <div style="font-size: 14px; color: #666;">
                            ${timeRange}
                        </div>
                    </div>
                </td>
            </tr>
            <tr id="segment-${segmentKey}-content" style="display: none;">
                <td colspan="4" style="padding: 0;">
                    <table style="width: 100%; border-collapse: collapse; margin-left: 20px;">
                        ${groupsHtml}
                    </table>
                </td>
            </tr>
        `;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
    renderActivityTable(processedData) {
        this.log('–†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        
        const { segments, summary } = processedData;
        
        if (summary.total_events === 0) {
            return `
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</th>
                        <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                        <th>–¢–∏–ø</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 20px; color: #666;">
                            –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        </td>
                    </tr>
                </tbody>
            `;
        }

        // –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –≤—Ä–µ–º–µ–Ω–µ–º
        const startTime = summary.time_range ? this.formatTime(summary.time_range.start) : '';
        const endTime = summary.time_range ? this.formatTime(summary.time_range.end) : '';
        const totalDuration = this.formatDuration(summary.total_duration_min);
        
        const mainHeaderStyle = `background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; text-align: center; font-weight: bold; font-size: 18px;`;
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        const buttonStyle = `
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%); 
            color: white; 
            border: none; 
            padding: 8px 16px; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            margin-top: 8px;
            transition: background 0.3s ease;
        `;
        
        const segmentOrder = ['morning', 'day', 'evening'];
        const segmentsHtml = segmentOrder
            .map(segmentKey => this.renderTimeSegment(segmentKey, segments[segmentKey]))
            .filter(html => html !== '')
            .join('');

        return `
            <thead>
                <tr>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</th>
                    <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                    <th>–¢–∏–ø</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="4" style="${mainHeaderStyle}">
                        üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–∫–æ–Ω —Å ${startTime} –¥–æ ${endTime} ‚Äî ${totalDuration}
                        <br><small style="font-size: 14px; opacity: 0.9;">
                            ${summary.total_events} —Å–æ–±—ã—Ç–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
                        </small>
                        <br>
                        <button id="readable-chronology-btn" 
                                style="${buttonStyle}"
                                onclick="showReadableChronology()"
                                onmouseover="this.style.background='linear-gradient(135deg, #218838 0%, #1e7e34 100%)'"
                                onmouseout="this.style.background='linear-gradient(135deg, #28a745 0%, #20c997 100%)'">
                            üìã –ß–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è
                        </button>
                    </td>
                </tr>
                ${segmentsHtml}
            </tbody>
        `;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
window.toggleTimeSegment = function(segmentKey) {
    const content = document.getElementById(`segment-${segmentKey}-content`);
    const arrow = document.getElementById(`segment-${segmentKey}-arrow`);
    
    if (content && arrow) {
        if (content.style.display === 'none') {
            content.style.display = '';
            arrow.textContent = '‚ñº';
        } else {
            content.style.display = 'none';
            arrow.textContent = '‚ñ∂';
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
window.showReadableChronology = function() {
    console.log('[SmartChronologyFix] –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏...');
    
    const chronologyTable = document.getElementById('chronology-table');
    if (!chronologyTable) {
        console.error('[SmartChronologyFix] –≠–ª–µ–º–µ–Ω—Ç chronology-table –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä builder'–∞
    if (window.currentReadableBuilder) {
        const readableHTML = window.currentReadableBuilder.buildReadableChronology();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ —á–∏—Ç–∞–µ–º—É—é —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é
        const backButtonStyle = `
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%); 
            color: white; 
            border: none; 
            padding: 8px 16px; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            margin: 10px;
            transition: background 0.3s ease;
        `;
        
        const headerWithButton = readableHTML.replace(
            '<thead>',
            `<thead>
                <tr>
                    <td colspan="4" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 15px; text-align: center; font-weight: bold; font-size: 18px;">
                        üìã –ß–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–æ–Ω
                        <br>
                        <button onclick="restoreOriginalView()" 
                                style="${backButtonStyle}"
                                onmouseover="this.style.background='linear-gradient(135deg, #5a6268 0%, #343a40 100%)'"
                                onmouseout="this.style.background='linear-gradient(135deg, #6c757d 0%, #495057 100%)'">
                            ‚Üê –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
                        </button>
                    </td>
                </tr>
            </thead>`
        );
        
        chronologyTable.innerHTML = headerWithButton;
        console.log('[SmartChronologyFix] –ß–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
    } else {
        console.error('[SmartChronologyFix] Builder –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
window.restoreOriginalView = function() {
    console.log('[SmartChronologyFix] –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É...');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if (window.currentEventsCache) {
        window.updateChronologyTable(window.currentEventsCache);
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
function createNewUpdateChronologyTable() {
    const aggregator = new WindowActivityAggregator();
    const renderer = new ActivityRenderer();
    
    return function(events) {
        console.log('[SmartChronologyFix] v3.0.5 - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        console.log('[SmartChronologyFix] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', events ? events.length : 0);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        window.currentEventsCache = events;
        window.currentReadableBuilder = renderer.readableBuilder;
        renderer.readableBuilder.setEvents(events);
        
        const chronologyTable = document.getElementById('chronology-table');
        if (!chronologyTable) {
            console.error('[SmartChronologyFix] –≠–ª–µ–º–µ–Ω—Ç chronology-table –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (!events || events.length === 0) {
            chronologyTable.innerHTML = renderer.renderActivityTable({
                segments: {},
                summary: { total_events: 0, total_duration_min: 0, time_range: null }
            });
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const processedData = aggregator.processWindowActivity(events);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É
        const tableHtml = renderer.renderActivityTable(processedData);
        chronologyTable.innerHTML = tableHtml;
        
        console.log('[SmartChronologyFix] –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
            segments: Object.keys(processedData.segments).filter(k => processedData.segments[k].groups.length > 0),
            total_groups: Object.values(processedData.segments).reduce((sum, s) => sum + s.groups.length, 0),
            total_duration: processedData.summary.total_duration_min
        });
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
(function() {
    console.log('[SmartChronologyFix] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è v3.0.5...');
    
    function initializeModule() {
        console.log('[SmartChronologyFix] DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if (typeof window.updateChronologyTable === 'function') {
            window.originalUpdateChronologyTable = window.updateChronologyTable;
            console.log('[SmartChronologyFix] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–∞—à—É –Ω–æ–≤—É—é
        window.updateChronologyTable = createNewUpdateChronologyTable();
        console.log('[SmartChronologyFix] –§—É–Ω–∫—Ü–∏—è updateChronologyTable –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
        
        // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        window.testWindowActivity = function() {
            console.log('[SmartChronologyFix] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
            const testEvents = [
                { timestamp: '2024-06-30T11:24:00', activity_type: 'window_activity', app_name: 'Visual Studio Code', window_title: 'main.js' },
                { timestamp: '2024-06-30T11:30:00', activity_type: 'window_activity', app_name: 'Visual Studio Code', window_title: 'index.html' },
                { timestamp: '2024-06-30T14:27:30', activity_type: 'window_activity', app_name: 'notepad++.exe', window_title: 'ANALYSIS_FRONTEND_ARCHITECTURE.md' },
                { timestamp: '2024-06-30T15:01:36', activity_type: 'window_activity', app_name: 'PickerHost.exe', window_title: '–û—Ç–∫—Ä—ã—Ç–∏–µ' },
                { timestamp: '2024-06-30T17:00:00', activity_type: 'window_activity', app_name: 'Google Chrome', window_title: 'Dashboard' }
            ];
            
            console.log('[SmartChronologyFix] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å', testEvents.length, '—Å–æ–±—ã—Ç–∏—è–º–∏ (11:24-17:00)');
            console.log('[SmartChronologyFix] –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~5—á 36–º');
            window.updateChronologyTable(testEvents);
        };
        
        console.log('[SmartChronologyFix] v3.0.5 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        console.log('[SmartChronologyFix] –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
        console.log('  ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        console.log('  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
        console.log('  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        console.log('  üìã –ù–û–í–ê–Ø –∫–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è" —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏');
        console.log('  üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
        console.log('  ‚è∞ –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö');
        console.log('  üéØ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–∏–º—ã—Ö –æ–∫–æ–Ω (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)');
        console.log('  üìä –ß–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Üí –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Üí –æ–∫–Ω–∞');
        console.log('  üïê –ò–°–ü–†–ê–í–õ–ï–ù–û –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: 11:24 - 17:00 (5—á 36–º)');
        console.log('  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: window.testWindowActivity()');
    }
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeModule);
    } else {
        initializeModule();
    }
})();

console.log('[SmartChronologyFix] v3.0.5 –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–∏—Ç–∞–µ–º–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è!'); 