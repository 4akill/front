/**
 * –ú–û–î–£–õ–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê –§–û–ö–£–°–ê –ù–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2025-01-24
 * –í–µ—Ä—Å–∏—è: v1.0
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */

console.log('üìä [DASHBOARD-FOCUS] –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞ v1.0');

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è
 */
const DASHBOARD_FOCUS_CONFIG = {
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    DATE_FILTER: '#date-filter',
    PERIOD_FILTER: '#period-filter',
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –º–µ—Ç—Ä–∏–∫ (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    FOCUS_TOTAL_TIME: '#focus-total-time',
    FOCUS_PRODUCTIVE_TIME: '#focus-productive-time', 
    FOCUS_SCORE: '#focus-score',
    FOCUS_EFFICIENCY: '#focus-efficiency',
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    ALT_TOTAL_TIME: '#total-working-time',
    ALT_PRODUCTIVE_TIME: '#productive-time',
    ALT_SCORE: '#activity-score',
    ALT_EFFICIENCY: '#break-time',
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    DEBUG: true,
    AUTO_ANALYZE_ON_LOAD: true,
    AUTO_ANALYZE_ON_CHANGE: true
};

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
 */
const dashboardFocusState = {
    isInitialized: false,
    isAnalyzing: false,
    lastAnalyzedDate: null,
    lastResults: null
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
function initDashboardFocusAnalyzer() {
    if (dashboardFocusState.isInitialized) {
        console.log('üìä [DASHBOARD-FOCUS] –ú–æ–¥—É–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }
    
    console.log('üìä [DASHBOARD-FOCUS] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ analyzeFocus
    if (typeof analyzeFocus !== 'function') {
        console.warn('‚ö†Ô∏è [DASHBOARD-FOCUS] –§—É–Ω–∫—Ü–∏—è analyzeFocus –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        setTimeout(initDashboardFocusAnalyzer, 1000);
        return;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (DASHBOARD_FOCUS_CONFIG.AUTO_ANALYZE_ON_LOAD) {
        setTimeout(() => {
            autoAnalyzeFocusForToday();
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    }
    
    dashboardFocusState.isInitialized = true;
    console.log('‚úÖ [DASHBOARD-FOCUS] –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    const dateFilter = document.querySelector(DASHBOARD_FOCUS_CONFIG.DATE_FILTER);
    const periodFilter = document.querySelector(DASHBOARD_FOCUS_CONFIG.PERIOD_FILTER);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
    if (dateFilter) {
        dateFilter.addEventListener('change', onDateFilterChange);
        console.log('üìÖ [DASHBOARD-FOCUS] –ü–æ–¥–∫–ª—é—á–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã');
    } else {
        console.warn('‚ö†Ô∏è [DASHBOARD-FOCUS] –≠–ª–µ–º–µ–Ω—Ç date-filter –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    if (periodFilter) {
        periodFilter.addEventListener('change', onPeriodFilterChange);
        console.log('‚è±Ô∏è [DASHBOARD-FOCUS] –ü–æ–¥–∫–ª—é—á–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞');
    } else {
        console.warn('‚ö†Ô∏è [DASHBOARD-FOCUS] –≠–ª–µ–º–µ–Ω—Ç period-filter –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
 */
function onDateFilterChange(event) {
    if (!DASHBOARD_FOCUS_CONFIG.AUTO_ANALYZE_ON_CHANGE) return;
    
    const selectedDate = event.target.value;
    if (!selectedDate) return;
    
    console.log('üìÖ [DASHBOARD-FOCUS] –ò–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞:', selectedDate);
    autoAnalyzeFocusForDate(selectedDate);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
 */
function onPeriodFilterChange(event) {
    if (!DASHBOARD_FOCUS_CONFIG.AUTO_ANALYZE_ON_CHANGE) return;
    
    const selectedPeriod = event.target.value;
    const dateFilter = document.querySelector(DASHBOARD_FOCUS_CONFIG.DATE_FILTER);
    const selectedDate = dateFilter ? dateFilter.value : getTodayDate();
    
    console.log('‚è±Ô∏è [DASHBOARD-FOCUS] –ò–∑–º–µ–Ω–µ–Ω –ø–µ—Ä–∏–æ–¥:', selectedPeriod, '–¥–ª—è –¥–∞—Ç—ã:', selectedDate);
    autoAnalyzeFocusForDate(selectedDate);
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
 */
function autoAnalyzeFocusForToday() {
    const todayDate = getTodayDate();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    const dateFilter = document.querySelector(DASHBOARD_FOCUS_CONFIG.DATE_FILTER);
    if (dateFilter && !dateFilter.value) {
        dateFilter.value = todayDate;
        console.log('üìÖ [DASHBOARD-FOCUS] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:', todayDate);
    }
    
    autoAnalyzeFocusForDate(todayDate);
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */
async function autoAnalyzeFocusForDate(selectedDate) {
    if (!selectedDate) {
        console.warn('‚ö†Ô∏è [DASHBOARD-FOCUS] –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
    }
    
    if (dashboardFocusState.isAnalyzing) {
        console.log('‚è≥ [DASHBOARD-FOCUS] –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    if (dashboardFocusState.lastAnalyzedDate === selectedDate) {
        console.log('üíæ [DASHBOARD-FOCUS] –î–∞—Ç–∞ —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
        return;
    }
    
    try {
        dashboardFocusState.isAnalyzing = true;
        console.log('üß† [DASHBOARD-FOCUS] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞ –¥–ª—è:', selectedDate);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
        showLoadingInMetrics();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await analyzeFocusForDashboard(selectedDate);
        
        dashboardFocusState.lastAnalyzedDate = selectedDate;
        console.log('‚úÖ [DASHBOARD-FOCUS] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå [DASHBOARD-FOCUS] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        
        // üîÑ FALLBACK: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîÑ [DASHBOARD-FOCUS] –ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
        try {
            await loadDataAlternativeMethod(selectedDate);
        } catch (fallbackError) {
            console.error('‚ùå [DASHBOARD-FOCUS] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError);
            showErrorInMetrics(error.message);
        }
    } finally {
        dashboardFocusState.isAnalyzing = false;
    }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
async function loadDataAlternativeMethod(selectedDate) {
    console.log('üîÑ [DASHBOARD-FOCUS] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const storedWindowData = localStorage.getItem('windowActivities');
    const storedMouseData = localStorage.getItem('mouseActivities');
    
    if (storedWindowData || storedMouseData) {
        console.log('üíæ [DASHBOARD-FOCUS] –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
        
        let windowActivities = [];
        let mouseActivities = [];
        
        try {
            if (storedWindowData) {
                windowActivities = JSON.parse(storedWindowData);
                console.log(`üìä [DASHBOARD-FOCUS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${windowActivities.length} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ localStorage`);
            }
            
            if (storedMouseData) {
                mouseActivities = JSON.parse(storedMouseData);
                console.log(`üñ±Ô∏è [DASHBOARD-FOCUS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mouseActivities.length} –∑–∞–ø–∏—Å–µ–π –º—ã—à–∏ –∏–∑ localStorage`);
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            const filteredWindowData = windowActivities.filter(activity => {
                if (!activity.timestamp) return false;
                const activityDate = new Date(activity.timestamp).toISOString().split('T')[0];
                return activityDate === selectedDate;
            });
            
            const filteredMouseData = mouseActivities.filter(activity => {
                if (!activity.timestamp) return false;
                const activityDate = new Date(activity.timestamp).toISOString().split('T')[0];
                return activityDate === selectedDate;
            });
            
            console.log(`üìä [DASHBOARD-FOCUS] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ ${selectedDate}: ${filteredWindowData.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, ${filteredMouseData.length} –º—ã—à–∏`);
            
            if (filteredWindowData.length > 0) {
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º duration –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const processedData = filteredWindowData.map(activity => ({
                    ...activity,
                    duration: activity.duration || 60000 // 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }));
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
                if (typeof updateMainMetricsWithRealActivity === 'function') {
                    console.log('üß† [DASHBOARD-FOCUS] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é');
                    updateMainMetricsWithRealActivity(processedData, filteredMouseData, selectedDate);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ñ–æ–∫—É—Å–∞
                    const focusMetrics = calculateBasicFocusMetrics(processedData, filteredMouseData);
                    updateFocusMetricsOnDashboard({ windowActivities: processedData, mouseActivities: filteredMouseData }, []);
                    
                    console.log('‚úÖ [DASHBOARD-FOCUS] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª!');
                    return;
                }
            }
            
        } catch (parseError) {
            console.error('‚ùå [DASHBOARD-FOCUS] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö localStorage:', parseError);
        }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    if (window.lastLoadedData && window.lastLoadedData.activities) {
        console.log('üíæ [DASHBOARD-FOCUS] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π');
        
        const existingData = window.lastLoadedData.activities.filter(activity => {
            if (!activity.timestamp && !activity.start_time) return false;
            const timeField = activity.timestamp || activity.start_time;
            const activityDate = new Date(timeField).toISOString().split('T')[0];
            return activityDate === selectedDate;
        });
        
        if (existingData.length > 0) {
            console.log(`üìä [DASHBOARD-FOCUS] –ù–∞–π–¥–µ–Ω–æ ${existingData.length} –∑–∞–ø–∏—Å–µ–π –≤ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
            
            const processedData = existingData.map(activity => ({
                ...activity,
                duration: activity.duration || 60000
            }));
            
            if (typeof updateMainMetricsWithRealActivity === 'function') {
                updateMainMetricsWithRealActivity(processedData, [], selectedDate);
                console.log('‚úÖ [DASHBOARD-FOCUS] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return;
            }
        }
    }
    
    throw new Error('–í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
}

/**
 * –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ñ–æ–∫—É—Å–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–ª–∏—è–Ω–∏—è
 */
function calculateBasicFocusMetrics(windowActivities, mouseActivities) {
    const totalActivities = windowActivities.length;
    let totalTime = 0;
    let productiveTime = 0;
    
    windowActivities.forEach(activity => {
        const duration = parseInt(activity.duration) || 60000; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        totalTime += duration;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const appName = activity.app_name || '';
        if (appName.includes('Cursor') || appName.includes('firefox') || appName.includes('edge')) {
            productiveTime += duration;
        }
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
    totalTime = Math.round(totalTime / 1000 / 60);
    productiveTime = Math.round(productiveTime / 1000 / 60);
    
    const efficiency = totalTime > 0 ? Math.round((productiveTime / totalTime) * 100) : 0;
    
    return {
        totalTime,
        productiveTime,
        focusTime: productiveTime,
        focusScore: efficiency,
        efficiency,
        activities: totalActivities,
        mouseActivities: mouseActivities.length,
        mergedPeriods: 0
    };
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
 */
async function analyzeFocusForDashboard(selectedDate) {
    console.log('üéØ [DASHBOARD-FOCUS] –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞:', selectedDate);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        const allData = await loadAllDataForAnalysis(selectedDate);
        
        if (!allData || Object.keys(allData).length === 0) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        }
        
        console.log('üìä [DASHBOARD-FOCUS] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
            windowActivities: allData.windowActivities?.length || 0,
            mouseActivities: allData.mouseActivities?.length || 0,
            resourceData: allData.resourceData?.length || 0,
            browserActivities: allData.browserActivities?.length || 0,
            websiteVisits: allData.websiteVisits?.length || 0
        });
        
        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ duration –≤ –∑–∞–ø–∏—Å—è—Ö
        if (allData.windowActivities && allData.windowActivities.length > 0) {
            const sampleRecords = allData.windowActivities.slice(0, 5);
            console.log('üîç [DASHBOARD-FOCUS] –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', sampleRecords);
            
            const withDuration = allData.windowActivities.filter(r => r.duration && parseInt(r.duration) > 0).length;
            const withoutDuration = allData.windowActivities.length - withDuration;
            
            console.log(`üìä [DASHBOARD-FOCUS] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ duration: ${withDuration} —Å duration, ${withoutDuration} –±–µ–∑ duration`);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç duration, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (withoutDuration > 0) {
                console.warn(`‚ö†Ô∏è [DASHBOARD-FOCUS] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ${withoutDuration} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ duration`);
                allData.windowActivities = allData.windowActivities.map(activity => {
                    if (!activity.duration || parseInt(activity.duration) === 0) {
                        return {
                            ...activity,
                            duration: 60000 // 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                        };
                    }
                    return activity;
                });
                console.log('‚úÖ [DASHBOARD-FOCUS] –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å duration –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const mergedData = performSmartMerging(allData);
        console.log('üîÑ [DASHBOARD-FOCUS] –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', mergedData.length);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        window.lastAnalyzedData = mergedData;
        window.lastAnalyzedRawData = allData;
        
        // üîó –ö–õ–Æ–ß–ï–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
        await updateDashboardMetricsFromFocusAnalyzer(allData);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ñ–æ–∫—É—Å–∞
        updateFocusMetricsOnDashboard(allData, mergedData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        dashboardFocusState.lastResults = {
            allData,
            mergedData,
            timestamp: new Date().toISOString()
        };
        
        console.log('‚úÖ [DASHBOARD-FOCUS] –ê–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå [DASHBOARD-FOCUS] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
 */
function updateFocusMetricsOnDashboard(allData, mergedData) {
    console.log('üìä [DASHBOARD-FOCUS] –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ñ–æ–∫—É—Å–∞
    const focusMetrics = calculateFocusMetrics(allData, mergedData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ)
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_TOTAL_TIME, 
        DASHBOARD_FOCUS_CONFIG.ALT_TOTAL_TIME,
        focusMetrics.totalTime,
        '–û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞'
    );
    
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_PRODUCTIVE_TIME,
        DASHBOARD_FOCUS_CONFIG.ALT_PRODUCTIVE_TIME, 
        focusMetrics.productiveTime,
        '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞'
    );
    
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_SCORE,
        DASHBOARD_FOCUS_CONFIG.ALT_SCORE,
        `${focusMetrics.focusScore}%`,
        '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ñ–æ–∫—É—Å–∞',
        false
    );
    
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_EFFICIENCY,
        DASHBOARD_FOCUS_CONFIG.ALT_EFFICIENCY,
        `${focusMetrics.efficiency}%`,
        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∞',
        false
    );
    
    console.log('‚úÖ [DASHBOARD-FOCUS] –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–æ–∫—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', focusMetrics);
}

/**
 * –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ñ–æ–∫—É—Å–∞
 */
function calculateFocusMetrics(allData, mergedData) {
    // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    const totalActivities = allData.windowActivities?.length || 0;
    const mouseActivities = allData.mouseActivities?.length || 0;
    const mergedPeriods = mergedData?.length || 0;
    
    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    let totalTime = 0;
    let productiveTime = 0;
    let focusTime = 0;
    
    if (mergedData && mergedData.length > 0) {
        mergedData.forEach(period => {
            const duration = period.duration || 0;
            totalTime += duration;
            
            // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
            if (period.mouseActivity && period.mouseActivity > 0) {
                productiveTime += duration;
            }
            
            // –°—á–∏—Ç–∞–µ–º —Ñ–æ–∫—É—Å–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏ –ò —Å–∏—Å—Ç–µ–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if (period.mouseActivity > 0 && (period.cpuUsage > 10 || period.memoryUsage > 0)) {
                focusTime += duration;
            }
        });
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
    totalTime = Math.round(totalTime / 60);
    productiveTime = Math.round(productiveTime / 60);
    focusTime = Math.round(focusTime / 60);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const focusScore = totalTime > 0 ? Math.round((focusTime / totalTime) * 100) : 0;
    const efficiency = totalTime > 0 ? Math.round((productiveTime / totalTime) * 100) : 0;
    
    return {
        totalTime,
        productiveTime,
        focusTime,
        focusScore,
        efficiency,
        activities: totalActivities,
        mouseActivities,
        mergedPeriods
    };
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏
 */
function updateMetricElement(primarySelector, fallbackSelector, value, subtitle, formatAsTime = true) {
    let element = document.querySelector(primarySelector);
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (!element) {
        element = document.querySelector(fallbackSelector);
    }
    
    if (!element) {
        console.warn(`‚ö†Ô∏è [DASHBOARD-FOCUS] –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${primarySelector} || ${fallbackSelector}`);
        return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    let displayValue;
    if (formatAsTime && typeof value === 'number') {
        const hours = Math.floor(value / 60);
        const minutes = Math.round(value % 60);
        displayValue = formatTimeNicely(hours, minutes);
    } else {
        displayValue = value.toString();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    element.textContent = displayValue;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (subtitle) {
        const subtitleElement = element.parentElement?.querySelector('.metric-subtitle');
        if (subtitleElement) {
            subtitleElement.textContent = subtitle;
        }
    }
    
    console.log(`üìä [DASHBOARD-FOCUS] –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${primarySelector || fallbackSelector}: ${displayValue}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
 */
function showLoadingInMetrics() {
    const loadingText = '–ê–Ω–∞–ª–∏–∑...';
    
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_TOTAL_TIME,
        DASHBOARD_FOCUS_CONFIG.ALT_TOTAL_TIME,
        loadingText,
        '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞',
        false
    );
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
 */
function showErrorInMetrics(errorMessage) {
    const errorText = '–û—à–∏–±–∫–∞';
    
    updateMetricElement(
        DASHBOARD_FOCUS_CONFIG.FOCUS_TOTAL_TIME,
        DASHBOARD_FOCUS_CONFIG.ALT_TOTAL_TIME,
        errorText,
        `–û—à–∏–±–∫–∞: ${errorMessage}`,
        false
    );
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 */
function getTodayDate() {
    const today = new Date();
    return today.toISOString().split('T')[0];
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
function formatTimeNicely(hours, minutes) {
    if (typeof window.formatTimeNicely === 'function') {
        return window.formatTimeNicely(hours, minutes);
    }
    
    // Fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    if (hours === 0) {
        return `${minutes}–º`;
    }
    return `${hours}—á ${minutes}–º`;
}

/**
 * –ü—É–±–ª–∏—á–Ω—ã–π API –º–æ–¥—É–ª—è
 */
window.dashboardFocusAnalyzer = {
    init: initDashboardFocusAnalyzer,
    analyzeToday: autoAnalyzeFocusForToday,
    analyzeDate: autoAnalyzeFocusForDate,
    getState: () => ({ ...dashboardFocusState }),
    getConfig: () => ({ ...DASHBOARD_FOCUS_CONFIG })
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìä [DASHBOARD-FOCUS] DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    setTimeout(() => {
        initDashboardFocusAnalyzer();
    }, 1000);
});

console.log('üìä [DASHBOARD-FOCUS] –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ'); 