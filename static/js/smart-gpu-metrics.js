/**
 * Smart GPU Metrics Module
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã (GPU)
 * 
 * @version 1.0.0
 * @author AI Assistant
 * @date 2025-01-21
 * @purpose –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ GPU –≤ –¥–∞—à–±–æ—Ä–¥–µ
 */

console.log('üöÄ [START] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è smart-gpu-metrics.js');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */
class SmartGPUMetrics {
    constructor() {
        console.log('üîß [–ö–û–ù–°–¢–†–£–ö–¢–û–†] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartGPUMetrics');
        this.elements = {};
        this.lastGPUData = [];
        this.initializeElements();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeElements() {
        this.elements = {
            current: document.querySelector('#current-gpu-usage'),
            max: document.querySelector('#max-gpu-usage'),
            avg: document.querySelector('#avg-gpu-usage'),
            progress: document.querySelector('#gpu-progress'),
            peak: document.querySelector('#peak-gpu'),
            peakTime: document.querySelector('#peak-gpu-time'),
            temperature: document.querySelector('#gpu-temperature')
        };
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã GPU:', this.elements);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GPU –º–µ—Ç—Ä–∏–∫
     * @param {Array} gpuData - –¥–∞–Ω–Ω—ã–µ –æ GPU –∏–∑ monitoring_data
     */
    updateGPUMetrics(gpuData) {
        console.log('üìä [–û–ë–ù–û–í–õ–ï–ù–ò–ï] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GPU –º–µ—Ç—Ä–∏–∫');
        console.log('üìä [–î–ê–ù–ù–´–ï] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ GPU:', gpuData);

        if (!gpuData) {
            console.warn('üìä [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –î–∞–Ω–Ω—ã–µ GPU –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
            this.setDefaultValues();
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.lastGPUData = gpuData;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const metrics = this.calculateGPUMetrics(gpuData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateInterface(metrics);

        console.log('üìä [–ó–ê–í–ï–†–®–ï–ù–û] GPU –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    /**
     * –†–∞—Å—á–µ—Ç GPU –º–µ—Ç—Ä–∏–∫
     * @param {Array} gpuData - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö GPU
     * @returns {Object} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    calculateGPUMetrics(gpuData) {
        console.log('üßÆ [–†–ê–°–ß–ï–¢] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç GPU –º–µ—Ç—Ä–∏–∫');
        console.log('üßÆ [–†–ê–°–ß–ï–¢] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', gpuData);
        console.log('üßÆ [–†–ê–°–ß–ï–¢] –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:', gpuData[0]);
        
        if (!gpuData || !Array.isArray(gpuData) || gpuData.length === 0) {
            console.warn('üßÆ [–†–ê–°–ß–ï–¢] –ü—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏');
            return {
                current: 0,
                avg: 0,
                max: 0,
                min: 0,
                isActive: false,
                recordsCount: 0,
                peakTime: '-'
            };
        }

        let totalUsage = 0;
        let validRecords = 0;
        let maxUsage = 0;
        let minUsage = 100;
        let peakTime = '-';
        let maxTimestamp = null;

        console.log('üßÆ [–†–ê–°–ß–ï–¢] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏:', gpuData.length);

        gpuData.forEach((record, index) => {
            console.log(`üßÆ [–†–ê–°–ß–ï–¢] –ó–∞–ø–∏—Å—å ${index}:`, record);
            
            if (record && typeof record === 'object') {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π GPU
                const gpuUsage = record.gpu_usage || record.gpu || record.gpu_percent || 0;

                console.log(`üßÆ [–†–ê–°–ß–ï–¢] –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ GPU: ${gpuUsage}%`);

                if (gpuUsage >= 0) {
                    const usage = Number(gpuUsage) || 0;
                    totalUsage += usage;
                    validRecords++;

                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º
                    if (usage > maxUsage) {
                        maxUsage = usage;
                        maxTimestamp = record.timestamp;
                        peakTime = this.formatTime(maxTimestamp);
                    }
                    if (usage < minUsage) {
                        minUsage = usage;
                    }
                }
            }
        });

        const avgUsage = validRecords > 0 ? (totalUsage / validRecords) : 0;
        const isActive = avgUsage > 0 || maxUsage > 0;

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º –≤ 0
        if (validRecords === 0) {
            minUsage = 0;
        }

        const result = {
            current: avgUsage,
            avg: avgUsage,
            max: maxUsage,
            min: minUsage,
            isActive: isActive,
            recordsCount: validRecords,
            peakTime: peakTime
        };

        console.log('üßÆ [–†–ê–°–ß–ï–¢] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        return result;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     * @param {Object} metrics - –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    updateInterface(metrics) {
        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å GPU –º–µ—Ç—Ä–∏–∫–∞–º–∏:', metrics);
        
        if (!metrics) {
            console.warn('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
        this.updateElement(this.elements.current, Math.round(metrics.current));
        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', `${Math.round(metrics.current)}%`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        this.updateElement(this.elements.max, `${Math.round(metrics.max)}%`);
        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', `${Math.round(metrics.max)}%`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        this.updateElement(this.elements.avg, `${Math.round(metrics.avg)}%`);
        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', `${Math.round(metrics.avg)}%`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        if (this.elements.progress) {
            const usage = metrics.current;
            this.elements.progress.style.width = `${usage}%`;
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
            this.elements.progress.className = 'progress-bar';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
            if (usage > 80) {
                this.elements.progress.classList.add('bg-danger');
            } else if (usage > 60) {
                this.elements.progress.classList.add('bg-warning');
            } else {
                this.elements.progress.classList.add('bg-success');
            }
            
            console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä:', `${usage}%`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        this.updateElement(this.elements.peak, `${Math.round(metrics.max)}%`);
        this.updateElement(this.elements.peakTime, metrics.peakTime);
        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', `${Math.round(metrics.max)}% –≤ ${metrics.peakTime}`);

        console.log('üñ•Ô∏è [–ò–ù–¢–ï–†–§–ï–ô–°] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å GPU –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultValues() {
        console.log('üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è GPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        
        this.updateElement(this.elements.current, '0');
        this.updateElement(this.elements.max, '0%');
        this.updateElement(this.elements.avg, '0%');
        this.updateElement(this.elements.peak, '0%');
        this.updateElement(this.elements.peakTime, '-');
        this.updateElement(this.elements.temperature, '-');
        
        if (this.elements.progress) {
            this.elements.progress.style.width = '0%';
            this.elements.progress.className = 'progress-bar bg-secondary';
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {Element} element - DOM —ç–ª–µ–º–µ–Ω—Ç
     * @param {string} value - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    updateElement(element, value) {
        if (element && element.textContent !== String(value)) {
            element.textContent = value;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} timestamp - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     */
    formatTime(timestamp) {
        if (!timestamp) return '-';
        
        try {
            const date = new Date(timestamp);
            return date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
            return '-';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö GPU
     * @returns {Array} –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ GPU
     */
    getLastGPUData() {
        return this.lastGPUData;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ GPU
     * @returns {boolean} –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ GPU
     */
    isGPUActive() {
        if (!this.lastGPUData || this.lastGPUData.length === 0) {
            return false;
        }

        return this.lastGPUData.some(entry => 
            (entry.gpu_usage && entry.gpu_usage > 0) || 
            (entry.gpu && entry.gpu > 0)
        );
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    initWithTestData() {
        console.log('üß™ [–¢–ï–°–¢] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        
        const testData = [
            {
                gpu_usage: 45.3,
                timestamp: new Date().toISOString()
            },
            {
                gpu_usage: 67.8,
                timestamp: new Date(Date.now() - 60000).toISOString()
            },
            {
                gpu_usage: 23.1,
                timestamp: new Date(Date.now() - 120000).toISOString()
            },
            {
                gpu_usage: 89.5,
                timestamp: new Date(Date.now() - 180000).toISOString()
            }
        ];
        
        console.log('üß™ [–¢–ï–°–¢] –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ GPU:', testData);
        this.updateGPUMetrics(testData);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
console.log('üîß [–°–û–ó–î–ê–ù–ò–ï] –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä smartGPUMetrics');
try {
    window.smartGPUMetrics = new SmartGPUMetrics();
    console.log('‚úÖ [–°–û–ó–î–ê–ù–ò–ï] –≠–∫–∑–µ–º–ø–ª—è—Ä GPU –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
    console.error('‚ùå [–°–û–ó–î–ê–ù–ò–ï] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GPU:', error);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.updateGPUMetrics = function(gpuData) {
    console.log('üîß [–ì–õ–û–ë–ê–õ] –í—ã–∑–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateGPUMetrics —Å –¥–∞–Ω–Ω—ã–º–∏:', gpuData);
    
    if (window.smartGPUMetrics) {
        window.smartGPUMetrics.updateGPUMetrics(gpuData);
    } else {
        console.error('‚ùå [–ì–õ–û–ë–ê–õ] smartGPUMetrics –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
 */
function initGPUModule() {
    console.log('üöÄ [–ò–ù–ò–¢] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPU –º–æ–¥—É–ª—è');
    
    try {
        if (!window.smartGPUMetrics) {
            window.smartGPUMetrics = new SmartGPUMetrics();
        }
        console.log('‚úÖ [–ò–ù–ò–¢] GPU –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå [–ò–ù–ò–¢] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPU –º–æ–¥—É–ª—è:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß [–ò–ù–ò–¢] –ú–æ–¥—É–ª—å GPU –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑:
    // window.smartGPUMetrics.initWithTestData();
});

console.log('‚úÖ [–ó–ê–ì–†–£–ñ–ï–ù] –ú–æ–¥—É–ª—å Smart GPU Metrics –∑–∞–≥—Ä—É–∂–µ–Ω'); 