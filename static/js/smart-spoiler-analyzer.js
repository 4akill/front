/**
 * –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ü–û–ô–õ–ï–†–û–í
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –±–æ–ª—å—à–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
 * –†–∞–∑–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
 * –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–æ–π–ª–µ—Ä–æ–≤
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ–π–ª–µ—Ä–æ–≤
const SMART_SPOILER_CONSTANTS = {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    INACTIVE_THRESHOLD_MINUTES: 5,
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
    MAX_BIG_SPOILERS: 4,
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è
    TIME_PERIODS: {
        MORNING: { start: 6, end: 12, name: '–£—Ç—Ä–æ' },      // 6:00 - 12:00
        DAY: { start: 12, end: 18, name: '–î–µ–Ω—å' },         // 12:00 - 18:00
        EVENING: { start: 18, end: 22, name: '–í–µ—á–µ—Ä' },    // 18:00 - 22:00
        NIGHT: { start: 22, end: 6, name: '–ù–æ—á—å' }         // 22:00 - 6:00
    },
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    ACTIVITY_CRITERIA: {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏ –º—ã—à–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞ 5 –º–∏–Ω—É—Ç)
        MIN_MOUSE_CLICKS: 2,
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞ 5 –º–∏–Ω—É—Ç)
        MIN_MOUSE_MOVEMENTS: 10,
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¶–ü –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (%)
        MIN_CPU_USAGE: 15,
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
        PRIORITY_PROCESSES: [
            'Cursor.exe', 'Code.exe', 'msedge.exe', 'firefox.exe', 
            'chrome.exe', 'brave.exe', 'notepad.exe', 'Telegram.exe'
        ]
    }
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ–π–ª–µ—Ä–æ–≤
 * @param {Array} mergedData - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–∏–æ–¥—ã —Ñ–æ–∫—É—Å–∞)
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
 */
function analyzeSmartSpoilers(mergedData) {
    console.log('üß† –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É–º–Ω—ã—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤ –¥–ª—è', mergedData.length, '–ø–µ—Ä–∏–æ–¥–æ–≤ —Ñ–æ–∫—É—Å–∞');
    
    if (!mergedData || mergedData.length === 0) {
        return [];
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥—ã —Ñ–æ–∫—É—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ–π–ª–µ—Ä–æ–≤
    const activityPeriods = mergedData.map(period => ({
        startTime: new Date(period.startTime),
        endTime: new Date(period.endTime),
        records: [period], // –ö–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ —Ñ–æ–∫—É—Å–∞ - —ç—Ç–æ –æ–¥–Ω–∞ "–∑–∞–ø–∏—Å—å"
        activeRecords: 1,
        mouseClicks: period.mouseActivity?.clicks || 0,
        mouseMovements: period.mouseActivity?.movements || 0,
        avgCpu: period.cpuUsage?.value || 0,
        avgRam: period.ramUsage?.value || 0,
        uniqueApps: new Set([period.appName]),
        realDuration: period.duration,
        focusTime: period.duration,
        uniqueAppsCount: 1,
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        appName: period.appName,
        primaryApp: period.appName,
        duration: period.duration,
        timestamp: period.startTime,
        cpuUsage: period.cpuUsage,
        ramUsage: period.ramUsage,
        mouseActivity: period.mouseActivity,
        status: period.status,
        rawActivities: period.rawActivities || [],
        activitiesCount: period.activitiesCount || 1,
        isBackground: period.isBackground || false
    }));
    
    console.log('üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityPeriods.length);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤ –±–æ–ª—å—à–∏–µ —Å–ø–æ–π–ª–µ—Ä—ã
    const bigSpoilers = createBigSpoilers(activityPeriods, mergedData);
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–æ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤:', bigSpoilers.length);
    
    return bigSpoilers;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} sortedData - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function identifyActivityPeriods(sortedData) {
    const periods = [];
    let currentPeriod = null;
    
    for (let i = 0; i < sortedData.length; i++) {
        const record = sortedData[i];
        const recordTime = new Date(record.timestamp);
        const isActive = isRecordActive(record);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é
        if (currentPeriod) {
            const timeDiff = (recordTime - currentPeriod.endTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            // –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            if (timeDiff > SMART_SPOILER_CONSTANTS.INACTIVE_THRESHOLD_MINUTES) {
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞
                currentPeriod.realDuration = Math.round((currentPeriod.endTime - currentPeriod.startTime) / 1000);
                currentPeriod.focusTime = calculateRealFocusTime(currentPeriod.records);
                periods.push(currentPeriod);
                currentPeriod = null;
            }
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π
        if (isActive) {
            if (!currentPeriod) {
                currentPeriod = {
                    startTime: recordTime,
                    endTime: recordTime,
                    records: [record],
                    activeRecords: 1,
                    mouseClicks: record.mouseActivity.clicks,
                    mouseMovements: record.mouseActivity.movements,
                    avgCpu: record.cpuUsage.value,
                    avgRam: record.ramUsage.value,
                    uniqueApps: new Set([record.appName])
                };
            } else {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                currentPeriod.endTime = recordTime;
                currentPeriod.records.push(record);
                currentPeriod.activeRecords++;
                currentPeriod.mouseClicks += record.mouseActivity.clicks;
                currentPeriod.mouseMovements += record.mouseActivity.movements;
                currentPeriod.avgCpu += record.cpuUsage.value;
                currentPeriod.avgRam += record.ramUsage.value;
                currentPeriod.uniqueApps.add(record.appName);
            }
        } else if (currentPeriod) {
            // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            currentPeriod.endTime = recordTime;
            currentPeriod.records.push(record);
            currentPeriod.uniqueApps.add(record.appName);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentPeriod) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞
        currentPeriod.realDuration = Math.round((currentPeriod.endTime - currentPeriod.startTime) / 1000);
        currentPeriod.focusTime = calculateRealFocusTime(currentPeriod.records);
        periods.push(currentPeriod);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    periods.forEach((period, index) => {
        if (period.activeRecords > 0) {
            period.avgCpu = Math.round(period.avgCpu / period.activeRecords);
            period.avgRam = Math.round(period.avgRam / period.activeRecords);
        }
        period.uniqueAppsCount = period.uniqueApps.size;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const startStr = period.startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const endStr = period.endTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const realDurationStr = formatDuration(period.realDuration);
        const focusTimeStr = formatDuration(period.focusTime);
        console.log(`üìä –ü–µ—Ä–∏–æ–¥ ${index + 1}: ${startStr}-${endStr}, –∑–∞–ø–∏—Å–µ–π: ${period.records.length}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${period.activeRecords}`);
        console.log(`   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${realDurationStr}, –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: ${focusTimeStr} (${Math.round((period.focusTime/period.realDuration)*100)}%)`);
    });
    
    return periods;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
 * @param {Object} record - –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–∏–æ–¥ —Ñ–æ–∫—É—Å–∞)
 * @returns {boolean} - true –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
 */
function isRecordActive(record) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ —Ñ–æ–∫—É—Å–∞ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã, –æ–Ω –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
    if (record.startTime && record.endTime && record.duration) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const appName = record.appName || record.app_name || record.application;
    if (appName && SMART_SPOILER_CONSTANTS.ACTIVITY_CRITERIA.PRIORITY_PROCESSES.includes(appName)) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
    const mouseActivity = record.mouseActivity || {};
    const hasMouseActivity = (mouseActivity.clicks || 0) >= SMART_SPOILER_CONSTANTS.ACTIVITY_CRITERIA.MIN_MOUSE_CLICKS ||
                            (mouseActivity.movements || 0) >= SMART_SPOILER_CONSTANTS.ACTIVITY_CRITERIA.MIN_MOUSE_MOVEMENTS;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¶–ü
    const cpuUsage = record.cpuUsage || {};
    const hasCpuActivity = (cpuUsage.value || 0) >= SMART_SPOILER_CONSTANTS.ACTIVITY_CRITERIA.MIN_CPU_USAGE;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const status = record.status || '';
    const hasActiveStatus = status === '–ê–∫—Ç–∏–≤–µ–Ω' || status === '–†–∞–±–æ—Ç–∞–µ—Ç';
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const isNotBackground = status !== '–§–æ–Ω' && !record.isBackground;
    
    return isNotBackground && (hasMouseActivity || hasCpuActivity || hasActiveStatus);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Å–ø–æ–π–ª–µ—Ä—ã –∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} activityPeriods - –ü–µ—Ä–∏–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} allData - –í—Å–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
 */
function createBigSpoilers(activityPeriods, allData) {
    if (activityPeriods.length === 0) {
        return [];
    }
    
    const bigSpoilers = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ
    const groupedPeriods = groupPeriodsByProximity(activityPeriods);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
    const limitedGroups = limitBigSpoilers(groupedPeriods);
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–æ–π–ª–µ—Ä—ã
    limitedGroups.forEach((group, index) => {
        const spoiler = createBigSpoiler(group, index, allData);
        if (spoiler) {
            bigSpoilers.push(spoiler);
        }
    });
    
    return bigSpoilers;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param {Array} periods - –ü–µ—Ä–∏–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @returns {Array} - –ì—Ä—É–ø–ø—ã –ø–µ—Ä–∏–æ–¥–æ–≤
 */
function groupPeriodsByProximity(periods) {
    const groups = [];
    let currentGroup = null;
    
    for (let period of periods) {
        if (!currentGroup) {
            currentGroup = [period];
        } else {
            const lastPeriod = currentGroup[currentGroup.length - 1];
            const timeDiff = (period.startTime - lastPeriod.endTime) / (1000 * 60 * 60); // –≤ —á–∞—Å–∞—Ö
            
            // –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            if (timeDiff <= 2) {
                currentGroup.push(period);
            } else {
                // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                groups.push(currentGroup);
                currentGroup = [period];
            }
        }
    }
    
    if (currentGroup) {
        groups.push(currentGroup);
    }
    
    return groups;
}

/**
 * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
 * @param {Array} groups - –ì—Ä—É–ø–ø—ã –ø–µ—Ä–∏–æ–¥–æ–≤
 * @returns {Array} - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
 */
function limitBigSpoilers(groups) {
    // –ï—Å–ª–∏ –≥—Ä—É–ø–ø –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∞–º—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ
    while (groups.length > SMART_SPOILER_CONSTANTS.MAX_BIG_SPOILERS) {
        // –ù–∞—Ö–æ–¥–∏–º –¥–≤–µ —Å–∞–º—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let minIndex1 = 0, minIndex2 = 1;
        let minDuration1 = getTotalGroupDuration(groups[0]);
        let minDuration2 = getTotalGroupDuration(groups[1]);
        
        if (minDuration2 < minDuration1) {
            [minIndex1, minIndex2] = [minIndex2, minIndex1];
            [minDuration1, minDuration2] = [minDuration2, minDuration1];
        }
        
        for (let i = 2; i < groups.length; i++) {
            const duration = getTotalGroupDuration(groups[i]);
            if (duration < minDuration1) {
                minIndex2 = minIndex1;
                minDuration2 = minDuration1;
                minIndex1 = i;
                minDuration1 = duration;
            } else if (duration < minDuration2) {
                minIndex2 = i;
                minDuration2 = duration;
            }
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ —Å–∞–º—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –≥—Ä—É–ø–ø—ã
        const merged = [...groups[minIndex1], ...groups[minIndex2]];
        groups.splice(Math.max(minIndex1, minIndex2), 1);
        groups.splice(Math.min(minIndex1, minIndex2), 1);
        groups.push(merged);
    }
    
    return groups;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
 * @param {Array} group - –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
 * @returns {number} - –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 */
function getTotalGroupDuration(group) {
    return group.reduce((sum, period) => sum + (period.duration || period.realDuration || 0), 0);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–æ–π —Å–ø–æ–π–ª–µ—Ä –∏–∑ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–∏–æ–¥–æ–≤
 * @param {Array} group - –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
 * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {Array} allData - –í—Å–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Object} - –ë–æ–ª—å—à–æ–π —Å–ø–æ–π–ª–µ—Ä
 */
function createBigSpoiler(group, index, allData) {
    if (!group || group.length === 0) {
        return null;
    }
    
    const firstPeriod = group[0];
    const lastPeriod = group[group.length - 1];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–ø–æ–π–ª–µ—Ä–∞
    const startTime = new Date(firstPeriod.startTime || firstPeriod.timestamp);
    const endTime = new Date(lastPeriod.endTime || lastPeriod.timestamp);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º
    const totalDuration = Math.round((endTime - startTime) / 1000);
    const totalFocusTime = group.reduce((sum, period) => sum + (period.duration || period.realDuration || 0), 0);
    const totalRecords = group.length; // –ö–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ - —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
    const totalActiveRecords = group.filter(period => isRecordActive(period)).length;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const allApps = new Set();
    const productiveApps = new Set();
    group.forEach(period => {
        const appName = period.appName || period.primaryApp;
        if (appName) {
            allApps.add(appName);
            if (isProductiveApplication(appName)) {
                productiveApps.add(appName);
            }
        }
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const avgCpu = Math.round(group.reduce((sum, period) => sum + (period.cpuUsage?.value || 0), 0) / group.length);
    const avgRam = Math.round(group.reduce((sum, period) => sum + (period.ramUsage?.value || 0), 0) / group.length);
    const totalMouseClicks = group.reduce((sum, period) => sum + (period.mouseActivity?.clicks || 0), 0);
    const totalMouseMovements = group.reduce((sum, period) => sum + (period.mouseActivity?.movements || 0), 0);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodName = determinePeriodName(startTime, endTime);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ–∫—É—Å–∞
    const activityLevel = determineActivityLevel(totalFocusTime, totalDuration, totalMouseClicks, avgCpu);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∞
    const focusEfficiency = totalDuration > 0 ? Math.round((totalFocusTime / totalDuration) * 100) : 0;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const startStr = startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const endStr = endTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const durationStr = formatDuration(totalDuration);
    const focusTimeStr = formatDuration(totalFocusTime);
    console.log(`üéØ –ë–æ–ª—å—à–æ–π —Å–ø–æ–π–ª–µ—Ä ${index + 1}: ${startStr}-${endStr}, –ø–µ—Ä–∏–æ–¥–æ–≤: ${group.length}, –∑–∞–ø–∏—Å–µ–π: ${totalRecords}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${totalActiveRecords}`);
    console.log(`   ‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: ${durationStr}, –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: ${focusTimeStr} (${focusEfficiency}%), –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${productiveApps.size}`);
    
    return {
        id: `big-spoiler-${index}`,
        name: periodName,
        startTime: startTime,
        endTime: endTime,
        duration: totalDuration,
        focusTime: totalFocusTime,
        formattedDuration: formatDuration(totalDuration),
        formattedFocusTime: formatDuration(totalFocusTime),
        focusEfficiency: focusEfficiency,
        totalRecords: totalRecords,
        activeRecords: totalActiveRecords,
        inactiveRecords: totalRecords - totalActiveRecords,
        activityPercentage: Math.round((totalActiveRecords / totalRecords) * 100),
        uniqueApps: Array.from(allApps),
        uniqueAppsCount: allApps.size,
        productiveApps: Array.from(productiveApps),
        productiveAppsCount: productiveApps.size,
        avgCpu: avgCpu,
        avgRam: avgRam,
        mouseClicks: totalMouseClicks,
        mouseMovements: totalMouseMovements,
        activityLevel: activityLevel,
        periods: group,
        isExpanded: false
    };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param {Date} startTime - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
 * @param {Date} endTime - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
 */
function determinePeriodName(startTime, endTime) {
    const startHour = startTime.getHours();
    const endHour = endTime.getHours();
    
    const startTimeStr = startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const endTimeStr = endTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–Ω—è
    let mainPeriod = '';
    
    if (startHour >= 6 && startHour < 12) {
        mainPeriod = '–£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else if (startHour >= 12 && startHour < 18) {
        mainPeriod = '–î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else if (startHour >= 18 && startHour < 22) {
        mainPeriod = '–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else {
        mainPeriod = '–ù–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    }
    
    return `${mainPeriod} (${startTimeStr} - ${endTimeStr})`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {number} focusTime - –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} totalTime - –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} mouseClicks - –ö–ª–∏–∫–∏ –º—ã—à–∏
 * @param {number} avgCpu - –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –¶–ü
 * @returns {string} - –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function determineActivityLevel(focusTime, totalTime, mouseClicks, avgCpu) {
    const focusRatio = focusTime / totalTime;
    const focusMinutes = focusTime / 60;
    
    // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ–æ–∫—É—Å–∞ + –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (focusRatio >= 0.7 && focusMinutes >= 10 && mouseClicks >= 50 && avgCpu >= 30) {
        return '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è';
    }
    // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ö–æ—Ä–æ—à–∏–π —Ñ–æ–∫—É—Å + —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    else if (focusRatio >= 0.5 && focusMinutes >= 5 && mouseClicks >= 20 && avgCpu >= 20) {
        return '–í—ã—Å–æ–∫–∞—è';
    }
    // –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω–∏–π —Ñ–æ–∫—É—Å –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    else if ((focusRatio >= 0.4 && focusMinutes >= 3) || (focusRatio >= 0.6 && focusMinutes >= 1)) {
        return '–°—Ä–µ–¥–Ω—è—è';
    }
    // –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–æ–∫—É—Å –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    else if (focusRatio >= 0.2 && focusMinutes >= 1) {
        return '–ù–∏–∑–∫–∞—è';
    }
    // –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å
    else {
        return '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –±–æ–ª—å—à–∏–º–∏ —Å–ø–æ–π–ª–µ—Ä–∞–º–∏
 * @param {Array} bigSpoilers - –ú–∞—Å—Å–∏–≤ –±–æ–ª—å—à–∏—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
 * @param {Array} originalData - –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function updateTableWithSmartSpoilers(bigSpoilers, originalData) {
    const tbody = document.querySelector('#window-focus-table tbody');
    
    if (!bigSpoilers || bigSpoilers.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="8" class="text-center text-muted">
                    <i class="bi bi-info-circle"></i> 
                    –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = '';
    
    bigSpoilers.forEach((spoiler, spoilerIndex) => {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
        const spoilerHeader = createBigSpoilerHeader(spoiler, spoilerIndex);
        tbody.appendChild(spoilerHeader);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–æ–π–ª–µ—Ä–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        spoiler.periods.forEach((period, periodIndex) => {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            const periodHeader = createPeriodHeader(period, spoilerIndex, periodIndex);
            tbody.appendChild(periodHeader);
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
            const row = createSmartSpoilerRow(period, spoilerIndex, periodIndex, 0);
            tbody.appendChild(row);
        });
    });
    
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${bigSpoilers.length} –±–æ–ª—å—à–∏–º–∏ —Å–ø–æ–π–ª–µ—Ä–∞–º–∏`);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {Object} spoiler - –ë–æ–ª—å—à–æ–π —Å–ø–æ–π–ª–µ—Ä
 * @param {number} spoilerIndex - –ò–Ω–¥–µ–∫—Å —Å–ø–æ–π–ª–µ—Ä–∞
 * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
function createBigSpoilerHeader(spoiler, spoilerIndex) {
    const row = document.createElement('tr');
    row.className = 'table-dark big-spoiler-header';
    row.style.cursor = 'pointer';
    row.dataset.spoilerIndex = spoilerIndex;
    
    const activityBadge = getActivityLevelBadge(spoiler.activityLevel);
    const focusEfficiencyBadge = getFocusEfficiencyBadge(spoiler.focusEfficiency);
    
    row.innerHTML = `
        <td colspan="8" class="big-spoiler-content">
            <div class="d-flex justify-content-between align-items-center py-2">
                <div class="d-flex align-items-center">
                    <i class="bi bi-chevron-right big-spoiler-toggle me-3" id="big-toggle-${spoilerIndex}"></i>
                    <div>
                        <h6 class="mb-1 text-white">
                            <i class="bi bi-calendar-event me-2"></i>
                            ${spoiler.name}
                        </h6>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-light text-dark">
                                <i class="bi bi-clock me-1"></i>${spoiler.formattedDuration}
                            </span>
                            <span class="badge bg-primary">
                                <i class="bi bi-eye me-1"></i>${spoiler.formattedFocusTime} —Ñ–æ–∫—É—Å–∞
                            </span>
                            <span class="badge bg-info">${spoiler.totalRecords} –∑–∞–ø–∏—Å–µ–π</span>
                            ${activityBadge}
                            ${focusEfficiencyBadge}
                        </div>
                    </div>
                </div>
                <div class="big-spoiler-summary d-flex align-items-center gap-3">
                    <div class="text-center">
                        <div class="text-white-50 small">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>
                        <div class="text-white fw-bold">${spoiler.uniqueAppsCount}</div>
                        <div class="text-white-50 x-small">${spoiler.productiveAppsCount} –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    </div>
                    <div class="text-center">
                        <div class="text-white-50 small">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
                        <div class="text-white fw-bold">${spoiler.focusEfficiency}%</div>
                        <div class="text-white-50 x-small">—Ñ–æ–∫—É—Å–∞</div>
                    </div>
                    <div class="text-center">
                        <div class="text-white-50 small">–ú—ã—à—å</div>
                        <div class="text-white fw-bold">${spoiler.mouseClicks}–∫/${spoiler.mouseMovements}–¥</div>
                    </div>
                    <div class="text-center">
                        <div class="text-white-50 small">–¶–ü/–û–ó–£</div>
                        <div class="text-white fw-bold">${spoiler.avgCpu}%/${spoiler.avgRam}%</div>
                    </div>
                </div>
            </div>
        </td>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    row.addEventListener('click', () => toggleBigSpoiler(spoilerIndex));
    
    return row;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {Object} period - –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {number} spoilerIndex - –ò–Ω–¥–µ–∫—Å –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {number} periodIndex - –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞
 * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
 */
function createPeriodHeader(period, spoilerIndex, periodIndex) {
    const row = document.createElement('tr');
    row.className = 'table-secondary period-header';
    row.style.cursor = 'pointer';
    row.style.display = 'none';
    row.dataset.parentSpoiler = spoilerIndex;
    row.dataset.periodIndex = periodIndex;
    
    const startTime = new Date(period.startTime || period.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const endTime = new Date(period.endTime || period.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const duration = formatDuration(period.duration || period.realDuration || 0);
    const focusTime = formatDuration(period.duration || period.focusTime || 0); // –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ duration = focusTime
    const focusEfficiency = (period.duration || period.realDuration) > 0 ? 
        Math.round(((period.duration || period.focusTime || 0) / (period.duration || period.realDuration)) * 100) : 100;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const appName = period.appName || period.primaryApp || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const activitiesCount = period.activitiesCount || period.rawActivities || 1;
    
    row.innerHTML = `
        <td colspan="8" class="period-content">
            <div class="d-flex justify-content-between align-items-center py-1 ps-4">
                <div class="d-flex align-items-center">
                    <i class="bi bi-chevron-right period-toggle me-2" id="period-toggle-${spoilerIndex}-${periodIndex}"></i>
                    <div>
                        <strong class="me-3">
                            <i class="bi bi-clock me-1"></i>
                            ${startTime} - ${endTime}
                        </strong>
                        <span class="badge bg-light text-dark me-2">
                            <i class="bi bi-hourglass me-1"></i>${duration}
                        </span>
                        <span class="badge bg-primary me-2">
                            <i class="bi bi-eye me-1"></i>${focusTime} —Ñ–æ–∫—É—Å–∞
                        </span>
                        <span class="badge bg-info me-2">${activitiesCount} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</span>
                        <span class="badge bg-success">–ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥</span>
                        <span class="badge ${focusEfficiency >= 50 ? 'bg-success' : focusEfficiency >= 30 ? 'bg-warning' : 'bg-secondary'} ms-2">
                            ${focusEfficiency}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        </span>
                    </div>
                </div>
                <div class="period-summary">
                    <small class="text-muted">
                        <i class="bi bi-app me-1"></i>
                        ${appName}
                    </small>
                </div>
            </div>
        </td>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    row.addEventListener('click', (e) => {
        e.stopPropagation();
        togglePeriod(spoilerIndex, periodIndex);
    });
    
    return row;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å–∏ –≤ —É–º–Ω–æ–º —Å–ø–æ–π–ª–µ—Ä–µ
 * @param {Object} record - –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–∏–æ–¥ —Ñ–æ–∫—É—Å–∞)
 * @param {number} spoilerIndex - –ò–Ω–¥–µ–∫—Å –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {number} periodIndex - –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞
 * @param {number} recordIndex - –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏
 * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏
 */
function createSmartSpoilerRow(record, spoilerIndex, periodIndex, recordIndex) {
    const row = document.createElement('tr');
    row.className = record.isBackground ? 'table-light' : '';
    row.style.display = 'none';
    row.dataset.parentSpoiler = spoilerIndex;
    row.dataset.parentPeriod = periodIndex;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ñ–æ–∫—É—Å–∞
    const timeStr = new Date(record.startTime || record.timestamp).toLocaleTimeString('ru-RU');
    const durationStr = formatDuration(record.duration || 0);
    const detailsHtml = createProfessionalPeriodDetails(record);
    const statusClass = getStatusClass(record.status || '–ê–∫—Ç–∏–≤–µ–Ω');
    const mouseActivity = record.mouseActivity || { clicks: 0, movements: 0, activityLevel: '–ù–∏–∑–∫–∞—è' };
    const mouseClass = getMouseActivityClass(mouseActivity.activityLevel);
    const cpuUsage = record.cpuUsage || { value: 0, level: '–ù–∏–∑–∫–∞—è' };
    const cpuClass = getResourceClass(cpuUsage.level);
    const ramUsage = record.ramUsage || { value: 0, level: '–ù–∏–∑–∫–∞—è' };
    const ramClass = getRamResourceClass(ramUsage.level);
    
    row.innerHTML = `
        <td class="font-monospace text-nowrap ps-5">
            <small class="text-muted">${timeStr}</small>
        </td>
        <td>
            <div class="d-flex align-items-center">
                <i class="bi bi-app me-2 text-primary"></i>
                <div>
                    <strong class="d-block">${record.appName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong>
                    ${(record.activitiesCount || record.rawActivities?.length || 0) > 1 ? `<small class="text-muted">${record.activitiesCount || record.rawActivities?.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</small>` : ''}
                </div>
            </div>
        </td>
        <td class="details-cell">
            ${detailsHtml}
        </td>
        <td class="text-nowrap">
            <span class="badge bg-light text-dark">${durationStr}</span>
        </td>
        <td class="text-center">
            <div class="d-flex flex-column align-items-center">
                <span class="badge ${mouseClass} mb-1">
                    ${mouseActivity.clicks}–∫/${mouseActivity.movements}–¥
                </span>
                <small class="text-muted">${mouseActivity.activityLevel}</small>
            </div>
        </td>
        <td class="text-center">
            <div class="d-flex flex-column align-items-center">
                <span class="badge ${cpuClass} mb-1">${cpuUsage.value}%</span>
                <small class="text-muted">${cpuUsage.level}</small>
            </div>
        </td>
        <td class="text-center">
            <div class="d-flex flex-column align-items-center">
                <span class="badge ${ramClass} mb-1">${ramUsage.value}%</span>
                <small class="text-muted">${ramUsage.level}</small>
            </div>
        </td>
        <td class="text-center">
            <span class="badge ${statusClass}">${record.status || '–ê–∫—Ç–∏–≤–µ–Ω'}</span>
        </td>
    `;
    
    return row;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–µ–π–¥–∂ –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @returns {string} - HTML –±–µ–π–¥–∂–∞
 */
function getActivityLevelBadge(level) {
    switch (level) {
        case '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è':
            return '<span class="badge bg-success"><i class="bi bi-lightning-fill me-1"></i>–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è</span>';
        case '–í—ã—Å–æ–∫–∞—è':
            return '<span class="badge bg-primary"><i class="bi bi-activity me-1"></i>–í—ã—Å–æ–∫–∞—è</span>';
        case '–°—Ä–µ–¥–Ω—è—è':
            return '<span class="badge bg-warning"><i class="bi bi-bar-chart me-1"></i>–°—Ä–µ–¥–Ω—è—è</span>';
        case '–ù–∏–∑–∫–∞—è':
            return '<span class="badge bg-secondary"><i class="bi bi-pause-circle me-1"></i>–ù–∏–∑–∫–∞—è</span>';
        default:
            return '<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è</span>';
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–µ–π–¥–∂ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞
 * @param {number} percentage - –ü—Ä–æ—Ü–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞
 * @returns {string} - HTML –±–µ–π–¥–∂–∞
 */
function getFocusEfficiencyBadge(percentage) {
    if (percentage >= 70) {
        return '<span class="badge bg-success"><i class="bi bi-bullseye me-1"></i>–û—Ç–ª–∏—á–Ω—ã–π —Ñ–æ–∫—É—Å</span>';
    } else if (percentage >= 50) {
        return '<span class="badge bg-primary"><i class="bi bi-target me-1"></i>–•–æ—Ä–æ—à–∏–π —Ñ–æ–∫—É—Å</span>';
    } else if (percentage >= 30) {
        return '<span class="badge bg-warning"><i class="bi bi-circle-half me-1"></i>–°—Ä–µ–¥–Ω–∏–π —Ñ–æ–∫—É—Å</span>';
    } else if (percentage >= 15) {
        return '<span class="badge bg-secondary"><i class="bi bi-dash-circle me-1"></i>–°–ª–∞–±—ã–π —Ñ–æ–∫—É—Å</span>';
    } else {
        return '<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>–ù–∏–∑–∫–∏–π —Ñ–æ–∫—É—Å</span>';
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {number} spoilerIndex - –ò–Ω–¥–µ–∫—Å —Å–ø–æ–π–ª–µ—Ä–∞
 */
function toggleBigSpoiler(spoilerIndex) {
    const periods = document.querySelectorAll(`[data-parent-spoiler="${spoilerIndex}"]`);
    const toggleIcon = document.getElementById(`big-toggle-${spoilerIndex}`);
    
    const isVisible = periods.length > 0 && periods[0].style.display !== 'none';
    
    periods.forEach(element => {
        if (element.classList.contains('period-header')) {
            element.style.display = isVisible ? 'none' : '';
        } else {
            // –ó–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä–æ—é—Ç –ø–µ—Ä–∏–æ–¥
            element.style.display = 'none';
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    if (toggleIcon) {
        toggleIcon.className = isVisible ? 'bi bi-chevron-right big-spoiler-toggle me-3' : 'bi bi-chevron-down big-spoiler-toggle me-3';
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
 * @param {number} spoilerIndex - –ò–Ω–¥–µ–∫—Å –±–æ–ª—å—à–æ–≥–æ —Å–ø–æ–π–ª–µ—Ä–∞
 * @param {number} periodIndex - –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞
 */
function togglePeriod(spoilerIndex, periodIndex) {
    const records = document.querySelectorAll(`[data-parent-spoiler="${spoilerIndex}"][data-parent-period="${periodIndex}"]`);
    const toggleIcon = document.getElementById(`period-toggle-${spoilerIndex}-${periodIndex}`);
    
    const isVisible = records.length > 0 && records[0].style.display !== 'none';
    
    records.forEach(record => {
        record.style.display = isVisible ? 'none' : '';
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    if (toggleIcon) {
        toggleIcon.className = isVisible ? 'bi bi-chevron-right period-toggle me-2' : 'bi bi-chevron-down period-toggle me-2';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} seconds - –°–µ–∫—É–Ω–¥—ã
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function formatDuration(seconds) {
    if (seconds < 60) {
        return `${seconds}—Å`;
    } else if (seconds < 3600) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return remainingSeconds > 0 ? `${minutes}–º ${remainingSeconds}—Å` : `${minutes}–º`;
    } else {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return `${hours}—á ${minutes}–º`;
    }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
 * @param {Array} records - –ó–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
 * @returns {number} - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 */
function calculateRealFocusTime(records) {
    if (!records || records.length === 0) return 0;
    if (records.length === 1) {
        // –î–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        return Math.min(records[0].duration, 300); // –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
    }
    
    let totalFocusTime = 0;
    let lastActiveTime = null;
    let lastActiveApp = null;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedRecords = [...records].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    
    for (let i = 0; i < sortedRecords.length; i++) {
        const record = sortedRecords[i];
        const recordTime = new Date(record.timestamp);
        const isActive = isRecordActive(record);
        const isProductiveApp = isProductiveApplication(record.appName);
        
        if (isActive && isProductiveApp) {
            if (lastActiveTime && lastActiveApp) {
                // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                const timeDiff = (recordTime - lastActiveTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
                if (lastActiveApp !== record.appName) {
                    // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                    const focusSegment = calculateFocusSegment(timeDiff, lastActiveApp, record.appName);
                    totalFocusTime += focusSegment;
                } else {
                    // –¢–∞ –∂–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ - —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                    const focusSegment = Math.min(timeDiff, 180); // –º–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                    totalFocusTime += focusSegment;
                }
            }
            
            lastActiveTime = recordTime;
            lastActiveApp = record.appName;
        } else if (isActive && !isProductiveApp) {
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–ª–∏ —Ñ–æ–Ω–æ–≤—ã–µ - —É—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ
            if (lastActiveTime) {
                const timeDiff = (recordTime - lastActiveTime) / 1000;
                const focusSegment = Math.min(timeDiff * 0.3, 60); // 30% –≤—Ä–µ–º–µ–Ω–∏, –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
                totalFocusTime += focusSegment;
            }
            lastActiveTime = recordTime;
            lastActiveApp = record.appName;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å —É—á–µ—Ç–æ–º –µ—ë —Ç–∏–ø–∞
    if (lastActiveTime && sortedRecords.length > 0) {
        const lastRecord = sortedRecords[sortedRecords.length - 1];
        if (isRecordActive(lastRecord)) {
            const lastSegment = isProductiveApplication(lastRecord.appName) ? 
                Math.min(lastRecord.duration, 120) : // –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ - –¥–æ 2 –º–∏–Ω—É—Ç
                Math.min(lastRecord.duration * 0.5, 30); // –æ—Å—Ç–∞–ª—å–Ω—ã–µ - 50%, –¥–æ 30 —Å–µ–∫—É–Ω–¥
            totalFocusTime += lastSegment;
        }
    }
    
    return Math.round(totalFocusTime);
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ–∫—É—Å–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 * @param {number} timeDiff - –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} fromApp - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @param {string} toApp - –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @returns {number} - –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
 */
function calculateFocusSegment(timeDiff, fromApp, toApp) {
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (5 –º–∏–Ω—É—Ç)
    const maxSegmentTime = 300;
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–æ–∫—É—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
    let focusCoefficient = 1.0;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
    if (isProductiveApplication(fromApp) && isProductiveApplication(toApp)) {
        if (isRelatedApplications(fromApp, toApp)) {
            // –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–¥ -> –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            focusCoefficient = 0.9;
        } else {
            // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç—ã
            focusCoefficient = 0.8;
        }
    }
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ
    else if (isProductiveApplication(fromApp) && !isProductiveApplication(toApp)) {
        focusCoefficient = 0.6;
    }
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ
    else if (!isProductiveApplication(fromApp) && isProductiveApplication(toApp)) {
        focusCoefficient = 0.7;
    }
    // –ú–µ–∂–¥—É —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
    else {
        focusCoefficient = 0.4;
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞
    let segmentTime = Math.min(timeDiff, maxSegmentTime);
    
    // –î–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥) - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å
    if (timeDiff < 10) {
        segmentTime = timeDiff * 0.2;
    }
    // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (10 —Å–µ–∫—É–Ω–¥ - 2 –º–∏–Ω—É—Ç—ã) - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    else if (timeDiff <= 120) {
        segmentTime = timeDiff * focusCoefficient;
    }
    // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç) - —É–±—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    else {
        const baseTime = 120 * focusCoefficient; // –ø–µ—Ä–≤—ã–µ 2 –º–∏–Ω—É—Ç—ã
        const extraTime = (timeDiff - 120) * focusCoefficient * 0.7; // –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
        segmentTime = baseTime + extraTime;
    }
    
    return Math.round(segmentTime);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º
 * @param {string} appName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ
 */
function isProductiveApplication(appName) {
    const productiveApps = [
        // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        'Cursor.exe', 'Code.exe', 'Visual Studio.exe', 'IntelliJ IDEA.exe', 'PyCharm.exe',
        'Sublime Text.exe', 'Atom.exe', 'WebStorm.exe', 'PhpStorm.exe',
        
        // –û—Ñ–∏—Å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        'WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'AcroRd32.exe', 'Acrobat.exe',
        'notepad.exe', 'notepad++.exe', 'WordPad.exe',
        
        // –î–∏–∑–∞–π–Ω –∏ –≥—Ä–∞—Ñ–∏–∫–∞
        'Photoshop.exe', 'Illustrator.exe', 'Figma.exe', 'Sketch.exe', 'Canva.exe',
        'GIMP.exe', 'Inkscape.exe', 'Blender.exe',
        
        // –ë—Ä–∞—É–∑–µ—Ä—ã (—á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ)
        'msedge.exe', 'chrome.exe', 'firefox.exe', 'brave.exe', 'opera.exe',
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è (—Ä–∞–±–æ—á–∞—è)
        'Teams.exe', 'Slack.exe', 'Discord.exe', 'Zoom.exe', 'Skype.exe',
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        'cmd.exe', 'powershell.exe', 'WindowsTerminal.exe', 'Git Bash.exe'
    ];
    
    return productiveApps.some(app => appName.toLowerCase().includes(app.toLowerCase()));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω—ã –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
 * @param {string} app1 - –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @param {string} app2 - –í—Ç–æ—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–≤—è–∑–∞–Ω—ã
 */
function isRelatedApplications(app1, app2) {
    const relatedGroups = [
        // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        ['Cursor.exe', 'Code.exe', 'Visual Studio.exe', 'msedge.exe', 'chrome.exe', 'firefox.exe'],
        
        // –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        ['WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'notepad.exe', 'AcroRd32.exe'],
        
        // –î–∏–∑–∞–π–Ω
        ['Photoshop.exe', 'Illustrator.exe', 'Figma.exe', 'Sketch.exe'],
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
        ['Teams.exe', 'Slack.exe', 'Discord.exe', 'Telegram.exe', 'WhatsApp.exe']
    ];
    
    return relatedGroups.some(group => 
        group.some(app => app1.toLowerCase().includes(app.toLowerCase())) &&
        group.some(app => app2.toLowerCase().includes(app.toLowerCase()))
    );
}

console.log('üß† –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω!'); 