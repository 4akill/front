/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –§–û–ö–£–°–ê –í–ù–ò–ú–ê–ù–ò–Ø
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2025-01-22
 * –í–µ—Ä—Å–∏—è: 1.0
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û—Ü–µ–Ω–∫–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞
 * 
 * –û—Ç–ª–∏—á–∏–µ –æ—Ç –º–∞—à–∏–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
 * - –ú–∞—à–∏–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: CPU, GPU, RAM, –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏, –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
 * - –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å: –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, —Ä–∏—Ç–º, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
const HUMAN_FOCUS_CONSTANTS = {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    ANALYSIS_WINDOW_SECONDS: 60,        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ (1 –º–∏–Ω—É—Ç–∞)
    MICRO_WINDOW_SECONDS: 5,            // –ú–∏–∫—Ä–æ–æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    MACRO_WINDOW_SECONDS: 300,          // –ú–∞–∫—Ä–æ–æ–∫–Ω–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (5 –º–∏–Ω—É—Ç)
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    THRESHOLDS: {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è "–∂–∏–≤—ã–º"
        MIN_MOUSE_MOVEMENTS: 3,         // –¥–≤–∏–∂–µ–Ω–∏–π –∑–∞ –º–∏–∫—Ä–æ–æ–∫–Ω–æ
        MIN_KEYBOARD_EVENTS: 1,         // —Å–æ–±—ã—Ç–∏–π –∑–∞ –º–∏–∫—Ä–æ–æ–∫–Ω–æ
        MIN_CPU_DELTA: 5,               // –∏–∑–º–µ–Ω–µ–Ω–∏–µ CPU –∑–∞ –º–∏–∫—Ä–æ–æ–∫–Ω–æ (%)
        
        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        FOCUS_CONSISTENCY_THRESHOLD: 0.7,   // —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π
        FOCUS_RHYTHM_THRESHOLD: 0.6,        // —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        FOCUS_CONTINUITY_THRESHOLD: 0.8,    // –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å
        
        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        ENGAGEMENT_THRESHOLD: 0.5,          // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
        HIGH_ENGAGEMENT_THRESHOLD: 0.8,     // –≤—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞
        MAX_FOCUS_WITHOUT_WINDOW: 0.5       // 50% –º–∞–∫—Å–∏–º—É–º
    },
    
    // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    WEIGHTS: {
        MOUSE_MOVEMENT: 0.25,           // –î–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        MOUSE_CLICKS: 0.20,             // –ö–ª–∏–∫–∏ –º—ã—à–∏
        KEYBOARD_EVENTS: 0.30,          // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        CPU_ACTIVITY: 0.15,             // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å CPU
        GPU_ACTIVITY: 0.05,             // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å GPU (–º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ)
        RAM_CHANGES: 0.05,              // –ò–∑–º–µ–Ω–µ–Ω–∏—è RAM
        WINDOW_FOCUS: 0.40,             // –§–æ–∫—É—Å –æ–∫–Ω–∞ (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π)
        VISIBILITY_EVENTS: 0.35         // –°–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    },
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    FALSE_POSITIVE_PATTERNS: {
        // –§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ (–≤—ã—Å–æ–∫–∏–π GPU, –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        BACKGROUND_VIDEO: {
            gpu_threshold: 30,
            mouse_threshold: 2,
            keyboard_threshold: 0
        },
        
        // Idle —Å–∫—Ä–∏–ø—Ç—ã (—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è CPU –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        IDLE_SCRIPTS: {
            cpu_regularity: 0.9,       // –æ—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            user_activity: 0.1         // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        AUTO_UPDATES: {
            ram_growth_rate: 10,        // MB/—Å–µ–∫
            cpu_spike_duration: 30      // —Å–µ–∫—É–Ω–¥
        }
    },
    
    // –¢–∏–ø—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    APP_CONTEXTS: {
        DEVELOPMENT: {
            apps: ['Cursor.exe', 'Code.exe', 'IntelliJ IDEA.exe', 'Visual Studio.exe'],
            focus_patterns: {
                typing_bursts: true,        // –≤—Å–ø–ª–µ—Å–∫–∏ –ø–µ—á–∞—Ç–∏
                mouse_precision: true,      // —Ç–æ—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
                cpu_compilation: true       // –≤—Å–ø–ª–µ—Å–∫–∏ CPU –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
            }
        },
        
        BROWSING: {
            apps: ['msedge.exe', 'chrome.exe', 'firefox.exe', 'brave.exe'],
            focus_patterns: {
                scrolling: true,            // —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
                click_navigation: true,     // –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∏–∫–∞–º–∏
                reading_pauses: true        // –ø–∞—É–∑—ã –¥–ª—è —á—Ç–µ–Ω–∏—è
            }
        },
        
        COMMUNICATION: {
            apps: ['Telegram.exe', 'WhatsApp.exe', 'Teams.exe', 'Slack.exe'],
            focus_patterns: {
                message_bursts: true,       // –≤—Å–ø–ª–µ—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                notification_response: true, // —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                typing_indicators: true     // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—á–∞—Ç–∏
            }
        },
        
        OFFICE_WORK: {
            apps: ['WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE'],
            focus_patterns: {
                document_editing: true,     // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                formatting_activity: true,  // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                save_frequency: true        // —á–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
            }
        }
    }
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Array} focusWindow.mouseEvents - –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
 * @param {Array} focusWindow.keyEvents - –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã  
 * @param {Array} focusWindow.cpuLoad - –ó–∞–≥—Ä—É–∑–∫–∞ CPU
 * @param {Array} focusWindow.gpuLoad - –ó–∞–≥—Ä—É–∑–∫–∞ GPU
 * @param {Array} focusWindow.ramUsage - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
 * @param {Array} focusWindow.visibilityEvents - –°–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞
 * @param {Object} focusWindow.windowContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–∫–Ω–∞ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫)
 * @returns {Object} - –û—Ü–µ–Ω–∫–∞ —Ñ–æ–∫—É—Å–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 */
function computeHumanFocusScore(focusWindow) {
    console.log('üß† –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è');
    console.log('üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        mouseEvents: focusWindow.mouseEvents?.length || 0,
        keyEvents: focusWindow.keyEvents?.length || 0,
        cpuLoad: focusWindow.cpuLoad?.length || 0,
        gpuLoad: focusWindow.gpuLoad?.length || 0,
        ramUsage: focusWindow.ramUsage?.length || 0,
        visibilityEvents: focusWindow.visibilityEvents?.length || 0,
        windowContext: focusWindow.windowContext
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateFocusWindow(focusWindow)) {
        return createEmptyFocusResult('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    // –£–†–û–í–ï–ù–¨ 1: –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    const rawBehaviorAnalysis = analyzeRawBehavior(focusWindow);
    console.log('üìä –£—Ä–æ–≤–µ–Ω—å 1 - –°—ã—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:', rawBehaviorAnalysis);
    
    // –£–†–û–í–ï–ù–¨ 2: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Ä–∏—Ç–º–∞
    const correlationAnalysis = analyzeCorrelationAndRhythm(focusWindow, rawBehaviorAnalysis);
    console.log('üìä –£—Ä–æ–≤–µ–Ω—å 2 - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ —Ä–∏—Ç–º:', correlationAnalysis);
    
    // –£–†–û–í–ï–ù–¨ 3: –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –æ–∫–Ω–∞
    const visibilityAnalysis = analyzeVisibilityConsistency(focusWindow, correlationAnalysis);
    console.log('üìä –£—Ä–æ–≤–µ–Ω—å 3 - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é:', visibilityAnalysis);
    
    // –£–†–û–í–ï–ù–¨ 4: –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const systemConfirmation = analyzeSystemConfirmation(focusWindow, visibilityAnalysis);
    console.log('üìä –£—Ä–æ–≤–µ–Ω—å 4 - –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', systemConfirmation);
    
    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const falsePositiveDetection = detectFalsePositives(focusWindow, systemConfirmation);
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', falsePositiveDetection);
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–æ–∫—É—Å–∞
    const finalScore = calculateFinalFocusScore(
        rawBehaviorAnalysis,
        correlationAnalysis, 
        visibilityAnalysis,
        systemConfirmation,
        falsePositiveDetection
    );
    
    const result = {
        score: Math.round(finalScore.score),
        tag: getFocusTag(finalScore.score),
        confidence: finalScore.confidence,
        breakdown: {
            rawBehavior: rawBehaviorAnalysis,
            correlation: correlationAnalysis,
            visibility: visibilityAnalysis,
            systemConfirmation: systemConfirmation,
            falsePositiveAdjustment: falsePositiveDetection
        },
        insights: generateFocusInsights(finalScore, focusWindow),
        recommendations: generateRecommendations(finalScore, focusWindow)
    };
    
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞:', result);
    return result;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {boolean} - true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
 */
function validateFocusWindow(focusWindow) {
    if (!focusWindow || typeof focusWindow !== 'object') {
        console.warn('‚ö†Ô∏è –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    const hasMouseData = focusWindow.mouseEvents && focusWindow.mouseEvents.length > 0;
    const hasKeyData = focusWindow.keyEvents && focusWindow.keyEvents.length > 0;
    const hasCpuData = focusWindow.cpuLoad && focusWindow.cpuLoad.length > 0;
    const hasVisibilityData = focusWindow.visibilityEvents && focusWindow.visibilityEvents.length > 0;
    
    if (!hasMouseData && !hasKeyData && !hasCpuData && !hasVisibilityData) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ');
        return false;
    }
    
    return true;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–∫—É—Å–∞
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @returns {Object} - –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
function createEmptyFocusResult(reason) {
    return {
        score: 0,
        tag: 'no_data',
        confidence: 0,
        breakdown: {
            rawBehavior: { score: 0, details: {} },
            correlation: { score: 0, details: {} },
            visibility: { score: 0, details: {} },
            systemConfirmation: { score: 0, details: {} },
            falsePositiveAdjustment: { score: 0, details: {} }
        },
        insights: [`–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: ${reason}`],
        recommendations: ['–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ']
    };
}

/**
 * –£–†–û–í–ï–ù–¨ 1: –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (–¥–≤–∏–∂–µ–Ω–∏—è, –Ω–∞–∂–∞—Ç–∏—è)
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 */
function analyzeRawBehavior(focusWindow) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
    
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
    const mouseAnalysis = analyzeMouseBehavior(mouseEvents);
    
    // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const keyboardAnalysis = analyzeKeyboardBehavior(keyEvents);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    const rawScore = (
        mouseAnalysis.score * HUMAN_FOCUS_CONSTANTS.WEIGHTS.MOUSE_MOVEMENT +
        keyboardAnalysis.score * HUMAN_FOCUS_CONSTANTS.WEIGHTS.KEYBOARD_EVENTS
    ) / (HUMAN_FOCUS_CONSTANTS.WEIGHTS.MOUSE_MOVEMENT + HUMAN_FOCUS_CONSTANTS.WEIGHTS.KEYBOARD_EVENTS);
    
    return {
        score: rawScore,
        details: {
            mouse: mouseAnalysis,
            keyboard: keyboardAnalysis
        },
        isActive: rawScore > 0.2,
        intensity: getRawBehaviorIntensity(rawScore)
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏
 * @param {Array} mouseEvents - –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –º—ã—à–∏
 */
function analyzeMouseBehavior(mouseEvents) {
    if (!mouseEvents || mouseEvents.length === 0) {
        return { score: 0, movements: 0, clicks: 0, patterns: [] };
    }
    
    let totalMovements = 0;
    let totalClicks = 0;
    const patterns = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    mouseEvents.forEach(event => {
        totalMovements += event.mouse_movements || 0;
        totalClicks += event.mouse_clicks || 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏
    if (totalMovements > 50 && totalClicks < 5) {
        patterns.push('scrolling'); // –°–∫—Ä–æ–ª–ª–∏–Ω–≥
    }
    if (totalClicks > 10) {
        patterns.push('clicking'); // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏
    }
    if (totalMovements > 20 && totalClicks > 5) {
        patterns.push('navigation'); // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É (0-1)
    const movementScore = Math.min(totalMovements / 100, 1);
    const clickScore = Math.min(totalClicks / 20, 1);
    const combinedScore = (movementScore * 0.6 + clickScore * 0.4);
    
    return {
        score: combinedScore,
        movements: totalMovements,
        clicks: totalClicks,
        patterns: patterns,
        intensity: combinedScore > 0.7 ? 'high' : combinedScore > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 * @param {Array} keyEvents - –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function analyzeKeyboardBehavior(keyEvents) {
    if (!keyEvents || keyEvents.length === 0) {
        return { score: 0, events: 0, patterns: [] };
    }
    
    let totalEvents = 0;
    const patterns = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyEvents.forEach(event => {
        totalEvents += event.keyboard_events || 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (totalEvents > 50) {
        patterns.push('typing'); // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–µ—á–∞—Ç—å
    }
    if (totalEvents > 10 && totalEvents < 30) {
        patterns.push('shortcuts'); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É (0-1)
    const keyboardScore = Math.min(totalEvents / 100, 1);
    
    return {
        score: keyboardScore,
        events: totalEvents,
        patterns: patterns,
        intensity: keyboardScore > 0.7 ? 'high' : keyboardScore > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @param {number} score - –û—Ü–µ–Ω–∫–∞ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @returns {string} - –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
 */
function getRawBehaviorIntensity(score) {
    if (score > 0.8) return 'very_high';
    if (score > 0.6) return 'high';
    if (score > 0.4) return 'medium';
    if (score > 0.2) return 'low';
    return 'very_low';
}

/**
 * –£–†–û–í–ï–ù–¨ 2: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Ä–∏—Ç–º–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} rawBehaviorAnalysis - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Ä–∏—Ç–º–∞
 */
function analyzeCorrelationAndRhythm(focusWindow, rawBehaviorAnalysis) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Ä–∏—Ç–º–∞...');
    
    // –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const densityAnalysis = analyzeDensity(focusWindow);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏
    const rhythmAnalysis = analyzeRhythm(focusWindow);
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    const continuityAnalysis = analyzeContinuity(focusWindow);
    
    // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
    const correlationAnalysis = analyzeChannelCorrelation(focusWindow);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    const correlationScore = (
        densityAnalysis.score * 0.25 +
        rhythmAnalysis.score * 0.25 +
        continuityAnalysis.score * 0.25 +
        correlationAnalysis.score * 0.25
    );
    
    return {
        score: correlationScore,
        details: {
            density: densityAnalysis,
            rhythm: rhythmAnalysis,
            continuity: continuityAnalysis,
            correlation: correlationAnalysis
        },
        consistency: correlationScore > HUMAN_FOCUS_CONSTANTS.THRESHOLDS.FOCUS_CONSISTENCY_THRESHOLD
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
 */
function analyzeDensity(focusWindow) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–º–∏–∫—Ä–æ–æ–∫–Ω–∞)
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    let activeIntervals = 0;
    let totalActivity = 0;
    
    intervals.forEach(interval => {
        const mouseActivity = getActivityInInterval(mouseEvents, interval);
        const keyActivity = getActivityInInterval(keyEvents, interval);
        
        const intervalActivity = mouseActivity + keyActivity;
        if (intervalActivity > 0) {
            activeIntervals++;
            totalActivity += intervalActivity;
        }
    });
    
    const densityScore = intervals.length > 0 ? activeIntervals / intervals.length : 0;
    const averageActivity = activeIntervals > 0 ? totalActivity / activeIntervals : 0;
    
    return {
        score: densityScore,
        activeIntervals: activeIntervals,
        totalIntervals: intervals.length,
        averageActivity: averageActivity,
        level: densityScore > 0.7 ? 'high' : densityScore > 0.4 ? 'medium' : 'low'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Ç–º–∞
 */
function analyzeRhythm(focusWindow) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    const activityLevels = intervals.map(interval => {
        const mouseActivity = getActivityInInterval(mouseEvents, interval);
        const keyActivity = getActivityInInterval(keyEvents, interval);
        return mouseActivity + keyActivity;
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞—Ü–∏—é
    const mean = activityLevels.reduce((sum, level) => sum + level, 0) / activityLevels.length;
    const variance = activityLevels.reduce((sum, level) => sum + Math.pow(level - mean, 2), 0) / activityLevels.length;
    const standardDeviation = Math.sqrt(variance);
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏)
    const coefficientOfVariation = mean > 0 ? standardDeviation / mean : 1;
    const rhythmScore = Math.max(0, 1 - coefficientOfVariation);
    
    return {
        score: rhythmScore,
        mean: mean,
        variance: variance,
        standardDeviation: standardDeviation,
        coefficientOfVariation: coefficientOfVariation,
        level: rhythmScore > 0.7 ? 'rhythmic' : rhythmScore > 0.4 ? 'moderate' : 'chaotic'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
 */
function analyzeContinuity(focusWindow) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    let continuousSegments = 0;
    let currentSegmentLength = 0;
    let maxSegmentLength = 0;
    let totalActiveTime = 0;
    
    intervals.forEach(interval => {
        const mouseActivity = getActivityInInterval(mouseEvents, interval);
        const keyActivity = getActivityInInterval(keyEvents, interval);
        const hasActivity = (mouseActivity + keyActivity) > 0;
        
        if (hasActivity) {
            currentSegmentLength++;
            totalActiveTime += HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS;
        } else {
            if (currentSegmentLength > 0) {
                continuousSegments++;
                maxSegmentLength = Math.max(maxSegmentLength, currentSegmentLength);
                currentSegmentLength = 0;
            }
        }
    });
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
    if (currentSegmentLength > 0) {
        continuousSegments++;
        maxSegmentLength = Math.max(maxSegmentLength, currentSegmentLength);
    }
    
    const totalTime = intervals.length * HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS;
    const continuityScore = totalTime > 0 ? totalActiveTime / totalTime : 0;
    
    return {
        score: continuityScore,
        continuousSegments: continuousSegments,
        maxSegmentLength: maxSegmentLength,
        totalActiveTime: totalActiveTime,
        totalTime: totalTime,
        level: continuityScore > 0.8 ? 'continuous' : continuityScore > 0.5 ? 'moderate' : 'fragmented'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 */
function analyzeChannelCorrelation(focusWindow) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    const cpuLoad = focusWindow.cpuLoad || [];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    const mouseActivity = intervals.map(interval => getActivityInInterval(mouseEvents, interval));
    const keyActivity = intervals.map(interval => getActivityInInterval(keyEvents, interval));
    const cpuActivity = intervals.map(interval => getActivityInInterval(cpuLoad, interval));
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    const mouseKeyCorrelation = calculateCorrelation(mouseActivity, keyActivity);
    const mouseCpuCorrelation = calculateCorrelation(mouseActivity, cpuActivity);
    const keyCpuCorrelation = calculateCorrelation(keyActivity, cpuActivity);
    
    // –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    const averageCorrelation = (mouseKeyCorrelation + mouseCpuCorrelation + keyCpuCorrelation) / 3;
    
    return {
        score: Math.max(0, averageCorrelation), // –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        mouseKeyCorrelation: mouseKeyCorrelation,
        mouseCpuCorrelation: mouseCpuCorrelation,
        keyCpuCorrelation: keyCpuCorrelation,
        averageCorrelation: averageCorrelation,
        level: averageCorrelation > 0.7 ? 'high' : averageCorrelation > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –£–†–û–í–ï–ù–¨ 3: –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –æ–∫–Ω–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} correlationAnalysis - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é
 */
function analyzeVisibilityConsistency(focusWindow, correlationAnalysis) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –æ–∫–Ω–∞...');
    
    const visibilityEvents = focusWindow.visibilityEvents || [];
    const windowContext = focusWindow.windowContext || {};
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const visibilityAnalysis = analyzeVisibilityEvents(visibilityEvents);
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–∫–Ω–∞
    const contextAnalysis = analyzeWindowContext(windowContext);
    
    // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ñ–æ–∫—É—Å–æ–º –æ–∫–Ω–∞
    const consistencyAnalysis = analyzeActivityConsistency(focusWindow, visibilityAnalysis);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    let visibilityScore = (
        visibilityAnalysis.score * 0.4 +
        contextAnalysis.score * 0.3 +
        consistencyAnalysis.score * 0.3
    );
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å = 50%
    if (!visibilityAnalysis.isWindowActive) {
        visibilityScore = Math.min(visibilityScore, HUMAN_FOCUS_CONSTANTS.THRESHOLDS.MAX_FOCUS_WITHOUT_WINDOW);
    }
    
    return {
        score: visibilityScore,
        details: {
            visibility: visibilityAnalysis,
            context: contextAnalysis,
            consistency: consistencyAnalysis
        },
        isWindowActive: visibilityAnalysis.isWindowActive,
        windowFocusTime: visibilityAnalysis.focusTime
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞
 * @param {Array} visibilityEvents - –°–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 */
function analyzeVisibilityEvents(visibilityEvents) {
    if (!visibilityEvents || visibilityEvents.length === 0) {
        return {
            score: 0,
            isWindowActive: false,
            focusTime: 0,
            blurTime: 0,
            switchCount: 0
        };
    }
    
    let focusTime = 0;
    let blurTime = 0;
    let switchCount = 0;
    let isCurrentlyActive = false;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    for (let i = 0; i < visibilityEvents.length; i++) {
        const event = visibilityEvents[i];
        const nextEvent = visibilityEvents[i + 1];
        
        if (event.type === 'focus') {
            isCurrentlyActive = true;
            switchCount++;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if (nextEvent) {
                const duration = new Date(nextEvent.timestamp) - new Date(event.timestamp);
                focusTime += duration;
            }
        } else if (event.type === 'blur') {
            isCurrentlyActive = false;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–∑–º—ã—Ç–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if (nextEvent) {
                const duration = new Date(nextEvent.timestamp) - new Date(event.timestamp);
                blurTime += duration;
            }
        }
    }
    
    const totalTime = focusTime + blurTime;
    const focusRatio = totalTime > 0 ? focusTime / totalTime : 0;
    
    return {
        score: focusRatio,
        isWindowActive: isCurrentlyActive,
        focusTime: focusTime,
        blurTime: blurTime,
        switchCount: switchCount,
        focusRatio: focusRatio,
        level: focusRatio > 0.8 ? 'focused' : focusRatio > 0.5 ? 'moderate' : 'distracted'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–∫–Ω–∞
 * @param {Object} windowContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–∫–Ω–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function analyzeWindowContext(windowContext) {
    if (!windowContext || !windowContext.application) {
        return {
            score: 0.5, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            appType: 'unknown',
            isProductive: false,
            focusPatterns: []
        };
    }
    
    const appName = windowContext.application;
    const windowTitle = windowContext.title || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let appType = 'unknown';
    let focusPatterns = [];
    let isProductive = false;
    
    for (const [type, config] of Object.entries(HUMAN_FOCUS_CONSTANTS.APP_CONTEXTS)) {
        if (config.apps.some(app => appName.includes(app))) {
            appType = type.toLowerCase();
            focusPatterns = Object.keys(config.focus_patterns);
            isProductive = ['development', 'office_work'].includes(type.toLowerCase());
            break;
        }
    }
    
    // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let contextScore = 0.5; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    if (isProductive) {
        contextScore = 0.8; // –í—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    } else if (appType === 'browsing') {
        contextScore = 0.6; // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –±—Ä–∞—É–∑–∏–Ω–≥–∞
    } else if (appType === 'communication') {
        contextScore = 0.7; // –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    }
    
    return {
        score: contextScore,
        appType: appType,
        isProductive: isProductive,
        focusPatterns: focusPatterns,
        application: appName,
        title: windowTitle
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ñ–æ–∫—É—Å–æ–º –æ–∫–Ω–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} visibilityAnalysis - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
 */
function analyzeActivityConsistency(focusWindow, visibilityAnalysis) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    const visibilityEvents = focusWindow.visibilityEvents || [];
    
    if (visibilityEvents.length === 0) {
        return {
            score: 0.5, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            consistentPeriods: 0,
            inconsistentPeriods: 0
        };
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    let consistentPeriods = 0;
    let inconsistentPeriods = 0;
    
    intervals.forEach(interval => {
        const mouseActivity = getActivityInInterval(mouseEvents, interval);
        const keyActivity = getActivityInInterval(keyEvents, interval);
        const hasUserActivity = (mouseActivity + keyActivity) > 0;
        
        const isWindowFocused = isWindowFocusedInInterval(visibilityEvents, interval);
        
        // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å—Ç—å –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ
        if ((hasUserActivity && isWindowFocused) || (!hasUserActivity && !isWindowFocused)) {
            consistentPeriods++;
        } else {
            inconsistentPeriods++;
        }
    });
    
    const totalPeriods = consistentPeriods + inconsistentPeriods;
    const consistencyScore = totalPeriods > 0 ? consistentPeriods / totalPeriods : 0;
    
    return {
        score: consistencyScore,
        consistentPeriods: consistentPeriods,
        inconsistentPeriods: inconsistentPeriods,
        totalPeriods: totalPeriods,
        level: consistencyScore > 0.8 ? 'consistent' : consistencyScore > 0.5 ? 'moderate' : 'inconsistent'
    };
}

/**
 * –£–†–û–í–ï–ù–¨ 4: –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} visibilityAnalysis - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
function analyzeSystemConfirmation(focusWindow, visibilityAnalysis) {
    console.log('üîç –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...');
    
    const cpuLoad = focusWindow.cpuLoad || [];
    const gpuLoad = focusWindow.gpuLoad || [];
    const ramUsage = focusWindow.ramUsage || [];
    
    // –ê–Ω–∞–ª–∏–∑ –ø—É–ª—å—Å–∞—Ü–∏–π CPU/GPU
    const cpuPulsations = analyzePulsations(cpuLoad, 'cpu');
    const gpuPulsations = analyzePulsations(gpuLoad, 'gpu');
    
    // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π RAM
    const ramChanges = analyzeRamChanges(ramUsage);
    
    // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const systemCorrelation = analyzeSystemUserCorrelation(focusWindow);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const systemScore = (
        cpuPulsations.score * 0.3 +
        gpuPulsations.score * 0.2 +
        ramChanges.score * 0.2 +
        systemCorrelation.score * 0.3
    );
    
    return {
        score: systemScore,
        details: {
            cpuPulsations: cpuPulsations,
            gpuPulsations: gpuPulsations,
            ramChanges: ramChanges,
            systemCorrelation: systemCorrelation
        },
        systemActivity: systemScore > 0.6 ? 'high' : systemScore > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø—É–ª—å—Å–∞—Ü–∏–π CPU/GPU
 * @param {Array} loadData - –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} type - –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ ('cpu' –∏–ª–∏ 'gpu')
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—É–ª—å—Å–∞—Ü–∏–π
 */
function analyzePulsations(loadData, type) {
    if (!loadData || loadData.length === 0) {
        return {
            score: 0,
            pulsations: 0,
            averageLoad: 0,
            variance: 0
        };
    }
    
    const loads = loadData.map(item => {
        if (type === 'cpu') {
            return item.cpu || item.cpu_percent || 0;
        } else {
            return item.gpu || item.gpu_percent || 0;
        }
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ –≤–∞—Ä–∏–∞—Ü–∏—é
    const averageLoad = loads.reduce((sum, load) => sum + load, 0) / loads.length;
    const variance = loads.reduce((sum, load) => sum + Math.pow(load - averageLoad, 2), 0) / loads.length;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    let pulsations = 0;
    const threshold = type === 'cpu' ? 10 : 5; // –ü–æ—Ä–æ–≥ –¥–ª—è CPU –∏ GPU
    
    for (let i = 1; i < loads.length; i++) {
        if (Math.abs(loads[i] - loads[i-1]) > threshold) {
            pulsations++;
        }
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É
    const pulsationScore = Math.min(pulsations / (loads.length * 0.3), 1); // 30% –ø—É–ª—å—Å–∞—Ü–∏–π = –º–∞–∫—Å–∏–º—É–º
    const varianceScore = Math.min(variance / 100, 1); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é
    
    const combinedScore = (pulsationScore * 0.6 + varianceScore * 0.4);
    
    return {
        score: combinedScore,
        pulsations: pulsations,
        averageLoad: averageLoad,
        variance: variance,
        level: combinedScore > 0.7 ? 'high' : combinedScore > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π RAM
 * @param {Array} ramUsage - –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π RAM
 */
function analyzeRamChanges(ramUsage) {
    if (!ramUsage || ramUsage.length === 0) {
        return {
            score: 0,
            changes: 0,
            trend: 'stable',
            growthRate: 0
        };
    }
    
    const ramValues = ramUsage.map(item => item.ram || item.memory || item.ram_percent || 0);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    let changes = 0;
    let totalGrowth = 0;
    
    for (let i = 1; i < ramValues.length; i++) {
        const change = ramValues[i] - ramValues[i-1];
        if (Math.abs(change) > 1) { // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1%
            changes++;
        }
        totalGrowth += change;
    }
    
    const growthRate = ramValues.length > 1 ? totalGrowth / (ramValues.length - 1) : 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    let trend = 'stable';
    if (growthRate > 0.5) trend = 'growing';
    else if (growthRate < -0.5) trend = 'declining';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É
    const changeScore = Math.min(changes / (ramValues.length * 0.2), 1);
    
    return {
        score: changeScore,
        changes: changes,
        trend: trend,
        growthRate: growthRate,
        level: changeScore > 0.6 ? 'dynamic' : changeScore > 0.3 ? 'moderate' : 'stable'
    };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 */
function analyzeSystemUserCorrelation(focusWindow) {
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    const cpuLoad = focusWindow.cpuLoad || [];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const intervals = createTimeIntervals(focusWindow, HUMAN_FOCUS_CONSTANTS.MICRO_WINDOW_SECONDS);
    
    const userActivity = intervals.map(interval => {
        const mouseActivity = getActivityInInterval(mouseEvents, interval);
        const keyActivity = getActivityInInterval(keyEvents, interval);
        return mouseActivity + keyActivity;
    });
    
    const cpuActivity = intervals.map(interval => {
        return getActivityInInterval(cpuLoad, interval);
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
    const correlation = calculateCorrelation(userActivity, cpuActivity);
    
    return {
        score: Math.max(0, correlation), // –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlation: correlation,
        level: correlation > 0.7 ? 'high' : correlation > 0.3 ? 'medium' : 'low'
    };
}

/**
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} systemConfirmation - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
function detectFalsePositives(focusWindow, systemConfirmation) {
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
    
    const detectedPatterns = [];
    let adjustmentFactor = 1.0; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (1.0 = –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
    const backgroundVideoCheck = checkBackgroundVideo(focusWindow);
    if (backgroundVideoCheck.detected) {
        detectedPatterns.push('background_video');
        adjustmentFactor *= 0.3; // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ 70%
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ idle —Å–∫—Ä–∏–ø—Ç—ã
    const idleScriptsCheck = checkIdleScripts(focusWindow);
    if (idleScriptsCheck.detected) {
        detectedPatterns.push('idle_scripts');
        adjustmentFactor *= 0.5; // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ 50%
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const autoUpdatesCheck = checkAutoUpdates(focusWindow);
    if (autoUpdatesCheck.detected) {
        detectedPatterns.push('auto_updates');
        adjustmentFactor *= 0.4; // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ 60%
    }
    
    return {
        score: adjustmentFactor,
        detectedPatterns: detectedPatterns,
        details: {
            backgroundVideo: backgroundVideoCheck,
            idleScripts: idleScriptsCheck,
            autoUpdates: autoUpdatesCheck
        },
        adjustmentFactor: adjustmentFactor
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkBackgroundVideo(focusWindow) {
    const gpuLoad = focusWindow.gpuLoad || [];
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    if (gpuLoad.length === 0) {
        return { detected: false, confidence: 0 };
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgGpu = gpuLoad.reduce((sum, item) => sum + (item.gpu || 0), 0) / gpuLoad.length;
    const totalMouse = mouseEvents.reduce((sum, item) => sum + (item.mouse_movements || 0), 0);
    const totalKeys = keyEvents.reduce((sum, item) => sum + (item.keyboard_events || 0), 0);
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω: –≤—ã—Å–æ–∫–∏–π GPU, –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pattern = HUMAN_FOCUS_CONSTANTS.FALSE_POSITIVE_PATTERNS.BACKGROUND_VIDEO;
    
    const detected = (
        avgGpu > pattern.gpu_threshold &&
        totalMouse < pattern.mouse_threshold &&
        totalKeys < pattern.keyboard_threshold
    );
    
    const confidence = detected ? 0.8 : 0;
    
    return {
        detected: detected,
        confidence: confidence,
        avgGpu: avgGpu,
        totalMouse: totalMouse,
        totalKeys: totalKeys
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ idle —Å–∫—Ä–∏–ø—Ç—ã
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkIdleScripts(focusWindow) {
    const cpuLoad = focusWindow.cpuLoad || [];
    const mouseEvents = focusWindow.mouseEvents || [];
    const keyEvents = focusWindow.keyEvents || [];
    
    if (cpuLoad.length < 5) {
        return { detected: false, confidence: 0 };
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å CPU –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const cpuValues = cpuLoad.map(item => item.cpu || 0);
    const mean = cpuValues.reduce((sum, val) => sum + val, 0) / cpuValues.length;
    const variance = cpuValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / cpuValues.length;
    const coefficientOfVariation = mean > 0 ? Math.sqrt(variance) / mean : 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const totalMouse = mouseEvents.reduce((sum, item) => sum + (item.mouse_movements || 0), 0);
    const totalKeys = keyEvents.reduce((sum, item) => sum + (item.keyboard_events || 0), 0);
    const userActivity = (totalMouse + totalKeys) / Math.max(cpuLoad.length, 1);
    
    const pattern = HUMAN_FOCUS_CONSTANTS.FALSE_POSITIVE_PATTERNS.IDLE_SCRIPTS;
    
    const detected = (
        coefficientOfVariation < (1 - pattern.cpu_regularity) && // –û—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        userActivity < pattern.user_activity
    );
    
    const confidence = detected ? 0.7 : 0;
    
    return {
        detected: detected,
        confidence: confidence,
        cpuRegularity: 1 - coefficientOfVariation,
        userActivity: userActivity
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkAutoUpdates(focusWindow) {
    const ramUsage = focusWindow.ramUsage || [];
    const cpuLoad = focusWindow.cpuLoad || [];
    
    if (ramUsage.length < 3 || cpuLoad.length < 3) {
        return { detected: false, confidence: 0 };
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—Å—Ç RAM
    const ramValues = ramUsage.map(item => item.ram || 0);
    let ramGrowth = 0;
    for (let i = 1; i < ramValues.length; i++) {
        ramGrowth += Math.max(0, ramValues[i] - ramValues[i-1]);
    }
    const ramGrowthRate = ramGrowth / (ramValues.length - 1);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ CPU
    const cpuValues = cpuLoad.map(item => item.cpu || 0);
    const maxCpu = Math.max(...cpuValues);
    const avgCpu = cpuValues.reduce((sum, val) => sum + val, 0) / cpuValues.length;
    
    const pattern = HUMAN_FOCUS_CONSTANTS.FALSE_POSITIVE_PATTERNS.AUTO_UPDATES;
    
    const detected = (
        ramGrowthRate > pattern.ram_growth_rate ||
        (maxCpu > avgCpu * 2 && maxCpu > 50) // –í—Å–ø–ª–µ—Å–∫ CPU
    );
    
    const confidence = detected ? 0.6 : 0;
    
    return {
        detected: detected,
        confidence: confidence,
        ramGrowthRate: ramGrowthRate,
        maxCpu: maxCpu,
        avgCpu: avgCpu
    };
}

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–æ–∫—É—Å–∞
 * @param {Object} rawBehaviorAnalysis - –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @param {Object} correlationAnalysis - –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 * @param {Object} visibilityAnalysis - –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @param {Object} systemConfirmation - –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 * @param {Object} falsePositiveDetection - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * @returns {Object} - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ñ–æ–∫—É—Å–∞
 */
function calculateFinalFocusScore(
    rawBehaviorAnalysis,
    correlationAnalysis,
    visibilityAnalysis,
    systemConfirmation,
    falsePositiveDetection
) {
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–æ–∫—É—Å–∞...');
    
    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É—Ä–æ–≤–Ω–µ–π
    const baseScore = (
        rawBehaviorAnalysis.score * 0.25 +
        correlationAnalysis.score * 0.25 +
        visibilityAnalysis.score * 0.30 +
        systemConfirmation.score * 0.20
    );
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const adjustedScore = baseScore * falsePositiveDetection.adjustmentFactor;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
    const finalScore = Math.max(0, Math.min(100, adjustedScore * 100));
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
    const confidence = calculateConfidence(
        rawBehaviorAnalysis,
        correlationAnalysis,
        visibilityAnalysis,
        systemConfirmation
    );
    
    return {
        score: finalScore,
        confidence: confidence,
        baseScore: baseScore,
        adjustedScore: adjustedScore,
        components: {
            rawBehavior: rawBehaviorAnalysis.score,
            correlation: correlationAnalysis.score,
            visibility: visibilityAnalysis.score,
            systemConfirmation: systemConfirmation.score,
            falsePositiveAdjustment: falsePositiveDetection.adjustmentFactor
        }
    };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
 * @param {Object} rawBehaviorAnalysis - –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @param {Object} correlationAnalysis - –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 * @param {Object} visibilityAnalysis - –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @param {Object} systemConfirmation - –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 * @returns {number} - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
 */
function calculateConfidence(rawBehaviorAnalysis, correlationAnalysis, visibilityAnalysis, systemConfirmation) {
    // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    const scores = [
        rawBehaviorAnalysis.score,
        correlationAnalysis.score,
        visibilityAnalysis.score,
        systemConfirmation.score
    ];
    
    const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length;
    const standardDeviation = Math.sqrt(variance);
    
    // –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–±—Ä–æ—Å, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const consistency = Math.max(0, 1 - standardDeviation);
    
    // –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const dataCompleteness = (
        (rawBehaviorAnalysis.details.mouse.movements > 0 ? 0.25 : 0) +
        (rawBehaviorAnalysis.details.keyboard.events > 0 ? 0.25 : 0) +
        (visibilityAnalysis.details.visibility.focusTime > 0 ? 0.25 : 0) +
        (systemConfirmation.details.cpuPulsations.pulsations > 0 ? 0.25 : 0)
    );
    
    return Math.min(1, consistency * 0.7 + dataCompleteness * 0.3);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–≥ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
 * @param {number} score - –û—Ü–µ–Ω–∫–∞ —Ñ–æ–∫—É—Å–∞ (0-100)
 * @returns {string} - –¢–µ–≥ —Ñ–æ–∫—É—Å–∞
 */
function getFocusTag(score) {
    if (score >= 80) return 'high';
    if (score >= 60) return 'moderate';
    if (score >= 40) return 'low';
    if (score >= 20) return 'very_low';
    return 'no_focus';
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –æ —Ñ–æ–∫—É—Å–µ
 * @param {Object} finalScore - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∏–Ω—Å–∞–π—Ç–æ–≤
 */
function generateFocusInsights(finalScore, focusWindow) {
    const insights = [];
    const score = finalScore.score;
    const components = finalScore.components;
    
    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    if (score >= 80) {
        insights.push('üéØ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–æ–∫—É—Å–∞ - –æ—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∑–∞–¥–∞—á–µ');
    } else if (score >= 60) {
        insights.push('‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å - —Ö–æ—Ä–æ—à–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç—É');
    } else if (score >= 40) {
        insights.push('‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Ñ–æ–∫—É—Å - –≤–æ–∑–º–æ–∂–Ω—ã –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è');
    } else {
        insights.push('‚ùå –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ñ–æ–∫—É—Å - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (components.rawBehavior < 0.3) {
        insights.push('üñ±Ô∏è –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
    }
    
    if (components.correlation < 0.4) {
        insights.push('üîó –°–ª–∞–±–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
    if (components.visibility < 0.5) {
        insights.push('üëÅÔ∏è –û–∫–Ω–æ —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ñ–æ–∫—É—Å–∞');
    }
    
    if (components.systemConfirmation < 0.3) {
        insights.push('üíª –ù–∏–∑–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    }
    
    if (components.falsePositiveAdjustment < 0.8) {
        insights.push('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
    return insights;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–æ–∫—É—Å–∞
 * @param {Object} finalScore - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
function generateRecommendations(finalScore, focusWindow) {
    const recommendations = [];
    const score = finalScore.score;
    const components = finalScore.components;
    
    if (score < 60) {
        recommendations.push('üì± –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        recommendations.push('‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏');
    }
    
    if (components.visibility < 0.5) {
        recommendations.push('üñ•Ô∏è –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–º –æ–∫–Ω–µ –∑–∞ —Ä–∞–∑');
        recommendations.push('üìê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á');
    }
    
    if (components.correlation < 0.4) {
        recommendations.push('üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
        recommendations.push('‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
    if (components.rawBehavior < 0.3) {
        recommendations.push('üèÉ –î–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        recommendations.push('üí™ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º');
    }
    
    return recommendations;
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} focusWindow - –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 * @param {number} intervalSeconds - –†–∞–∑–º–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
 */
function createTimeIntervals(focusWindow, intervalSeconds) {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const allTimestamps = [];
    
    ['mouseEvents', 'keyEvents', 'cpuLoad', 'gpuLoad', 'ramUsage', 'visibilityEvents'].forEach(key => {
        const data = focusWindow[key] || [];
        data.forEach(item => {
            if (item.timestamp) {
                allTimestamps.push(new Date(item.timestamp));
            }
        });
    });
    
    if (allTimestamps.length === 0) {
        return [];
    }
    
    const startTime = new Date(Math.min(...allTimestamps));
    const endTime = new Date(Math.max(...allTimestamps));
    
    const intervals = [];
    let currentTime = new Date(startTime);
    
    while (currentTime < endTime) {
        const intervalEnd = new Date(currentTime.getTime() + intervalSeconds * 1000);
        intervals.push({
            start: new Date(currentTime),
            end: intervalEnd > endTime ? endTime : intervalEnd
        });
        currentTime = intervalEnd;
    }
    
    return intervals;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
 * @param {Array} events - –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
 * @param {Object} interval - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
 * @returns {number} - –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function getActivityInInterval(events, interval) {
    if (!events || events.length === 0) return 0;
    
    let activity = 0;
    
    events.forEach(event => {
        const eventTime = new Date(event.timestamp);
        if (eventTime >= interval.start && eventTime <= interval.end) {
            // –°—É–º–º–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity += event.mouse_movements || 0;
            activity += event.mouse_clicks || 0;
            activity += event.keyboard_events || 0;
            activity += event.cpu || event.cpu_percent || 0;
            activity += event.gpu || event.gpu_percent || 0;
            activity += Math.abs(event.ram || event.memory || event.ram_percent || 0);
        }
    });
    
    return activity;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
 * @param {Array} visibilityEvents - –°–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * @param {Object} interval - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
 * @returns {boolean} - true –µ—Å–ª–∏ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ
 */
function isWindowFocusedInInterval(visibilityEvents, interval) {
    if (!visibilityEvents || visibilityEvents.length === 0) return false;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    let lastEvent = null;
    
    for (const event of visibilityEvents) {
        const eventTime = new Date(event.timestamp);
        if (eventTime <= interval.start) {
            lastEvent = event;
        } else {
            break;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–∫–Ω–æ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ
    if (!lastEvent) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    return lastEvent.type === 'focus';
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞—Å—Å–∏–≤–∞–º–∏
 * @param {Array} x - –ü–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤
 * @param {Array} y - –í—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤
 * @returns {number} - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (-1 –¥–æ 1)
 */
function calculateCorrelation(x, y) {
    if (!x || !y || x.length !== y.length || x.length === 0) {
        return 0;
    }
    
    const n = x.length;
    const sumX = x.reduce((sum, val) => sum + val, 0);
    const sumY = y.reduce((sum, val) => sum + val, 0);
    const sumXY = x.reduce((sum, val, i) => sum + val * y[i], 0);
    const sumX2 = x.reduce((sum, val) => sum + val * val, 0);
    const sumY2 = y.reduce((sum, val) => sum + val * val, 0);
    
    const numerator = n * sumXY - sumX * sumY;
    const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));
    
    return denominator === 0 ? 0 : numerator / denominator;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
window.computeHumanFocusScore = computeHumanFocusScore;

console.log('üß† –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('üìä –î–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: computeHumanFocusScore(focusWindow)');
console.log('üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'); 