/**
 * üî¨ –ú–æ–¥—É–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2024-12-19
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ GPU, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

class SmartAnalyticsDashboard {
    constructor() {
        this.apiBase = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
        this.isInitialized = false;
        this.updateInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.currentDeviceId = null;
        this.autoUpdateInterval = null;
        this.lastNetworkData = null;
        this.charts = {};
        
        console.log('üî¨ SmartAnalyticsDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async initialize() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
            const resourcesTab = document.querySelector('[data-bs-target="#resources"]');
            if (!resourcesTab) {
                console.log('‚ö†Ô∏è –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
                return;
            }

            await this.createAnalyticsUI();
            this.addAnalyticsStyles();
            await this.loadAnalyticsData();
            this.startAutoUpdate();
            console.log('‚úÖ –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async createAnalyticsUI() {
        const resourcesTab = document.querySelector('#resources-content');
        if (!resourcesTab) {
            console.warn('‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫
        const analyticsHTML = `
            <div class="analytics-dashboard" style="margin-top: 20px;">
                <h3>üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                
                <!-- GPU –º–µ—Ç—Ä–∏–∫–∏ -->
                <div class="metric-card gpu-metrics">
                    <h4>üéÆ GPU –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</h4>
                    <div class="gpu-stats">
                        <div class="stat-item">
                            <span class="label">–¢–µ–∫—É—â–µ–µ:</span>
                            <span class="value" id="gpu-current">0%</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–°—Ä–µ–¥–Ω–µ–µ:</span>
                            <span class="value" id="gpu-average">0%</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–ú–∞–∫—Å–∏–º—É–º:</span>
                            <span class="value" id="gpu-max">0%</span>
                        </div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="gpu-progress" style="width: 0%"></div>
                    </div>
                </div>

                <!-- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -->
                <div class="metric-card keyboard-metrics">
                    <h4>‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
                    <div class="keyboard-stats">
                        <div class="stat-item">
                            <span class="label">–°–æ–±—ã—Ç–∏—è –∑–∞ —á–∞—Å:</span>
                            <span class="value" id="keyboard-events-hour">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:</span>
                            <span class="value" id="keyboard-total">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</span>
                            <span class="value" id="keyboard-intensity">–ù–∏–∑–∫–∞—è</span>
                        </div>
                    </div>
                    <div class="activity-indicator">
                        <div class="indicator-dot" id="keyboard-indicator"></div>
                        <span id="keyboard-status">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>
                    </div>
                </div>

                <!-- –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -->
                <div class="metric-card network-metrics">
                    <h4>üåê –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
                    <div class="network-stats">
                        <div class="stat-item">
                            <span class="label">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</span>
                            <span class="value" id="network-sent">0 MB</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–ü–æ–ª—É—á–µ–Ω–æ:</span>
                            <span class="value" id="network-received">0 MB</span>
                        </div>
                        <div class="stat-item">
                            <span class="label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                            <span class="value" id="network-speed">0 Mbps</span>
                        </div>
                    </div>
                    <div class="network-chart" id="network-chart"></div>
                </div>

                <!-- –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ -->
                <div class="metric-card summary-analytics">
                    <h4>üìà –°–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h4>
                    <div class="summary-stats">
                        <div class="health-indicator">
                            <span class="label">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</span>
                            <span class="value" id="system-health">üü¢ –û—Ç–ª–∏—á–Ω–æ</span>
                        </div>
                        <div class="performance-score">
                            <span class="label">–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</span>
                            <span class="value" id="performance-score">85/100</span>
                        </div>
                        <div class="last-update">
                            <span class="label">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                            <span class="value" id="analytics-last-update">–ù–∏–∫–æ–≥–¥–∞</span>
                        </div>
                    </div>
                </div>
            </div>
        `;

        resourcesTab.insertAdjacentHTML('beforeend', analyticsHTML);
        this.addAnalyticsStyles();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    addAnalyticsStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .analytics-dashboard {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }

            .metric-card {
                background: #fff;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 16px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                transition: box-shadow 0.3s ease;
            }

            .metric-card:hover {
                box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            }

            .metric-card h4 {
                margin: 0 0 12px 0;
                color: #333;
                font-size: 16px;
                font-weight: 600;
            }

            .stat-item {
                display: flex;
                justify-content: space-between;
                margin-bottom: 8px;
                padding: 4px 0;
            }

            .stat-item .label {
                color: #666;
                font-size: 14px;
            }

            .stat-item .value {
                font-weight: 600;
                color: #333;
            }

            .progress-bar {
                width: 100%;
                height: 8px;
                background: #f0f0f0;
                border-radius: 4px;
                overflow: hidden;
                margin-top: 12px;
            }

            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #4CAF50, #8BC34A);
                transition: width 0.3s ease;
                border-radius: 4px;
            }

            .progress-fill.warning {
                background: linear-gradient(90deg, #FF9800, #FFC107);
            }

            .progress-fill.critical {
                background: linear-gradient(90deg, #F44336, #FF5722);
            }

            .activity-indicator {
                display: flex;
                align-items: center;
                margin-top: 12px;
                gap: 8px;
            }

            .indicator-dot {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #ccc;
                transition: background 0.3s ease;
            }

            .indicator-dot.active {
                background: #4CAF50;
                box-shadow: 0 0 8px rgba(76, 175, 80, 0.5);
            }

            .indicator-dot.moderate {
                background: #FF9800;
                box-shadow: 0 0 8px rgba(255, 152, 0, 0.5);
            }

            .indicator-dot.high {
                background: #F44336;
                box-shadow: 0 0 8px rgba(244, 67, 54, 0.5);
            }

            .indicator-dot.critical {
                background: #8B0000;
                box-shadow: 0 0 12px rgba(139, 0, 0, 0.7);
                animation: pulse 1.5s infinite;
            }

            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.1); }
                100% { transform: scale(1); }
            }

            .network-chart {
                height: 60px;
                background: #f8f9fa;
                border-radius: 4px;
                margin-top: 12px;
                position: relative;
                overflow: hidden;
            }

            .health-indicator, .performance-score, .last-update {
                margin-bottom: 8px;
                padding: 8px;
                background: #f8f9fa;
                border-radius: 4px;
            }

            .summary-stats .value {
                font-weight: 700;
            }

            @media (max-width: 768px) {
                .analytics-dashboard {
                    grid-template-columns: 1fr;
                }
            }

            .intensity-fill {
                width: 100%;
                height: 100%;
                border-radius: 6px;
                transition: all 0.3s ease;
            }

            .intensity-fill.active {
                background: linear-gradient(90deg, #4CAF50 0%, #4CAF50 25%);
            }

            .intensity-fill.moderate {
                background: linear-gradient(90deg, #FF9800 0%, #FF9800 50%);
            }

            .intensity-fill.high {
                background: linear-gradient(90deg, #F44336 0%, #F44336 75%);
            }

            .intensity-fill.critical {
                background: linear-gradient(90deg, #8B0000 0%, #8B0000 100%);
                animation: pulse 1.5s infinite;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async loadAnalyticsData() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
            const monitoringData = await this.fetchAnalyticsData('/api/public/monitoring/data');

            // –û—Ç–ª–∞–¥–∫–∞: —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
            console.log('üîç –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', monitoringData);
            if (monitoringData && monitoringData.length > 0) {
                console.log('üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', monitoringData[0]);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if (monitoringData && monitoringData.length > 0) {
                const systemMetrics = this.processMonitoringData(monitoringData);
                console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', systemMetrics);
                this.updateSystemMetrics(systemMetrics);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            const userInteraction = {
                total_keyboard_events: 0,
                avg_keyboard_activity_per_hour: 0,
                peak_keyboard_activity: 0,
                peak_keyboard_time: '-'
            };
            this.updateUserInteraction(userInteraction);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            await this.loadNetworkActivity();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
            const analyticsData = {
                system_metrics: monitoringData && monitoringData.length > 0 ? this.processMonitoringData(monitoringData) : null,
                user_interaction: userInteraction,
                network_data: this.lastNetworkData
            };
            this.updateMainDashboardCards(analyticsData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            if (analyticsData.system_metrics) this.updateGPUChart(analyticsData.system_metrics);
            if (analyticsData.user_interaction) this.updateKeyboardChart(analyticsData.user_interaction);
            if (this.lastNetworkData) this.updateNetworkChart(this.lastNetworkData);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    processMonitoringData(monitoringData) {
        if (!monitoringData || monitoringData.length === 0) return null;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const cpuValues = monitoringData.map(item => item.cpu || 0);
        const memoryValues = monitoringData.map(item => item.memory || 0);
        const diskValues = monitoringData.map(item => item.disk || 0);

        return {
            avg_cpu_usage: cpuValues.reduce((sum, val) => sum + val, 0) / cpuValues.length,
            avg_memory_usage: memoryValues.reduce((sum, val) => sum + val, 0) / memoryValues.length,
            avg_disk_usage: diskValues.reduce((sum, val) => sum + val, 0) / diskValues.length,
            avg_gpu_usage: 0, // GPU –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ monitoring/data
            max_cpu_usage: Math.max(...cpuValues),
            max_memory_usage: Math.max(...memoryValues),
            max_disk_usage: Math.max(...diskValues),
            max_gpu_usage: 0
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    processKeyboardData(keyboardData) {
        if (!keyboardData || keyboardData.length === 0) return null;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        const totalEvents = keyboardData.length;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        const timestamps = keyboardData.map(item => new Date(item.timestamp));
        const minTime = Math.min(...timestamps);
        const maxTime = Math.max(...timestamps);
        const timeRangeMs = maxTime - minTime;
        const timeRangeHours = timeRangeMs / (1000 * 60 * 60);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å - –µ—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        let eventsPerHour = 0;
        
        if (timeRangeHours > 0) {
            eventsPerHour = totalEvents / timeRangeHours;
        } else {
            // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É * 60
            eventsPerHour = totalEvents * 60; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É
        }

        return {
            total_keyboard_events: totalEvents,
            avg_keyboard_activity_per_hour: Math.round(eventsPerHour),
            peak_keyboard_activity: Math.round(eventsPerHour), // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            peak_keyboard_time: keyboardData.length > 0 ? new Date(keyboardData[0].timestamp).toLocaleTimeString() : '-'
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º—ã—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    processMouseData(mouseData) {
        if (!mouseData || mouseData.length === 0) return null;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—à–∏
        const totalClicks = mouseData.reduce((sum, item) => sum + (item.mouse_clicks || 0), 0);
        const totalMovements = mouseData.reduce((sum, item) => sum + (item.mouse_movements || 0), 0);
        const totalSessions = mouseData.length;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        const timestamps = mouseData.map(item => new Date(item.timestamp));
        const minTime = Math.min(...timestamps);
        const maxTime = Math.max(...timestamps);
        const timeRangeMs = maxTime - minTime;
        const timeRangeHours = timeRangeMs / (1000 * 60 * 60);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        let clicksPerHour = 0;
        let movementsPerHour = 0;
        
        if (timeRangeHours > 0) {
            clicksPerHour = totalClicks / timeRangeHours;
            movementsPerHour = totalMovements / timeRangeHours;
        } else {
            // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É
            clicksPerHour = totalClicks * 60; // –ó–∞ —á–∞—Å = –∑–∞ –º–∏–Ω—É—Ç—É * 60
            movementsPerHour = totalMovements * 60;
        }

        const totalActivityPerHour = clicksPerHour + movementsPerHour;

        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
        return {
            total_keyboard_events: totalClicks + totalMovements, // –û–±—â–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            avg_keyboard_activity_per_hour: Math.round(totalActivityPerHour), // –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Å
            peak_keyboard_activity: Math.round(Math.max(clicksPerHour, movementsPerHour)), // –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            peak_keyboard_time: mouseData.length > 0 ? new Date(mouseData[0].timestamp).toLocaleTimeString() : '-',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º—ã—à–∏
            total_mouse_clicks: totalClicks,
            total_mouse_movements: totalMovements,
            total_mouse_sessions: totalSessions,
            avg_clicks_per_hour: Math.round(clicksPerHour),
            avg_movements_per_hour: Math.round(movementsPerHour)
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã (–≤–∫–ª—é—á–∞—è GPU)
     */
    updateSystemMetrics(data) {
        if (!data) return;

        // GPU –º–µ—Ç—Ä–∏–∫–∏
        const gpuCurrent = document.getElementById('gpu-current');
        const gpuAverage = document.getElementById('gpu-average');
        const gpuMax = document.getElementById('gpu-max');
        const gpuProgress = document.getElementById('gpu-progress');

        if (gpuCurrent) gpuCurrent.textContent = `${data.avg_gpu_usage?.toFixed(1) || 0}%`;
        if (gpuAverage) gpuAverage.textContent = `${data.avg_gpu_usage?.toFixed(1) || 0}%`;
        if (gpuMax) gpuMax.textContent = `${data.max_gpu_usage?.toFixed(1) || 0}%`;
        
        if (gpuProgress) {
            const usage = data.avg_gpu_usage || 0;
            gpuProgress.style.width = `${usage}%`;
            gpuProgress.className = 'progress-fill';
            
            if (usage > 80) {
                gpuProgress.classList.add('critical');
            } else if (usage > 60) {
                gpuProgress.classList.add('warning');
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞/–º—ã—à—å)
     */
    updateUserInteraction(data) {
        if (!data) return;

        const keyboardEventsHour = document.getElementById('keyboard-events-hour');
        const keyboardTotal = document.getElementById('total-keyboard-events');
        const keyboardIntensity = document.getElementById('keyboard-intensity-text');
        const keyboardIndicator = document.getElementById('keyboard-intensity-bar');
        const keyboardEventsPerMin = document.getElementById('keyboard-events-per-minute');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞
        const eventsPerHour = data.avg_keyboard_activity_per_hour || 0;
        const eventsPerMin = Math.round(eventsPerHour / 60);
        const totalEvents = data.total_keyboard_events || 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—É
        if (keyboardEventsPerMin) {
            keyboardEventsPerMin.textContent = eventsPerMin;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —á–∞—Å - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (keyboardEventsHour) {
            keyboardEventsHour.textContent = Math.round(eventsPerHour);
        }
        
        if (keyboardTotal) {
            keyboardTotal.textContent = totalEvents;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π –≤ –º–∏–Ω—É—Ç—É
        let intensityText = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        let intensityClass = '';

        if (eventsPerMin > 50) {
            intensityText = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            intensityClass = 'critical';
        } else if (eventsPerMin > 20) {
            intensityText = '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            intensityClass = 'high';
        } else if (eventsPerMin > 10) {
            intensityText = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            intensityClass = 'moderate';
        } else if (eventsPerMin > 2) {
            intensityText = '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            intensityClass = 'active';
        }

        if (keyboardIntensity) {
            keyboardIntensity.textContent = intensityText;
        }
        
        if (keyboardIndicator) {
            keyboardIndicator.className = `intensity-fill ${intensityClass}`;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async loadNetworkActivity() {
        try {
            console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
            console.log('üîß API Base:', this.apiBase);
            console.log('üîß Current Device ID:', this.currentDeviceId);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            const networkData = await this.fetchAnalyticsData('/api/public/activity/network');
            console.log('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', networkData);
            
            if (networkData && networkData.length > 0) {
                this.lastNetworkData = networkData;
                this.updateNetworkMetrics(networkData);
                console.log('‚úÖ –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', networkData.length, '–∑–∞–ø–∏—Å–µ–π');
                console.log('üìä –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', networkData[0]);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                this.lastNetworkData = [];
                this.updateNetworkMetrics([]);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
            this.lastNetworkData = [];
            this.updateNetworkMetrics([]);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫)
     */
    updateNetworkMetrics(data) {
        if (!data || !Array.isArray(data) || data.length === 0) return;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        const lastRecord = data[data.length - 1];
        let totalSent = lastRecord.bytes_sent || 0;
        let totalReceived = lastRecord.bytes_received || 0;
        let recentSpeed = 0;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∑–∞–ø–∏—Å–∏)
        if (data.length >= 2) {
            const first = data[0];
            const last = data[data.length - 1];
            
            const timeDiff = (new Date(last.timestamp) - new Date(first.timestamp)) / 1000; // —Å–µ–∫—É–Ω–¥—ã
            
            if (timeDiff > 0) {
                // –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
                const sentDiff = Math.max(0, last.bytes_sent - first.bytes_sent);
                const receivedDiff = Math.max(0, last.bytes_received - first.bytes_received);
                
                // –°–∫–æ—Ä–æ—Å—Ç—å –≤ Mbps
                const totalBytesDiff = sentDiff + receivedDiff;
                if (totalBytesDiff > 0) {
                    recentSpeed = (totalBytesDiff * 8) / (timeDiff * 1024 * 1024); // Mbps
                }
            }
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (!isFinite(recentSpeed) || recentSpeed < 0) {
            recentSpeed = 0;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ (10 Gbps)
        if (recentSpeed > 10000) {
            recentSpeed = 0; // –í–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
        }

        const networkSent = document.getElementById('network-sent');
        const networkReceived = document.getElementById('network-received');
        const networkSpeed = document.getElementById('network-speed');

        if (networkSent) {
            networkSent.textContent = this.formatBytes(totalSent);
        }
        
        if (networkReceived) {
            networkReceived.textContent = this.formatBytes(totalReceived);
        }
        
        if (networkSpeed) {
            networkSpeed.textContent = this.formatNetworkSpeed(recentSpeed);
        }

        console.log('üìä –°–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
            totalSent: this.formatBytes(totalSent),
            totalReceived: this.formatBytes(totalReceived),
            speed: this.formatNetworkSpeed(recentSpeed)
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    formatNetworkSpeed(speedMbps) {
        if (speedMbps === 0) return '0 bps';
        
        if (speedMbps < 0.001) {
            return `${(speedMbps * 1024 * 1024).toFixed(0)} bps`;
        } else if (speedMbps < 1) {
            return `${(speedMbps * 1024).toFixed(1)} Kbps`;
        } else if (speedMbps < 1000) {
            return `${speedMbps.toFixed(1)} Mbps`;
        } else {
            return `${(speedMbps / 1024).toFixed(2)} Gbps`;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
     */
    async fetchAnalyticsData(endpoint) {
        try {
            const url = `${this.apiBase}${endpoint}${this.currentDeviceId ? `?device_id=${this.currentDeviceId}` : ''}`;
            console.log('üîó –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫:', url);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
            const token = localStorage.getItem('auth_token') || localStorage.getItem('token');
            console.log('üîë –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', token ? '–Ω–∞–π–¥–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            
            const headers = {
                'Content-Type': 'application/json'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }
            
            console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers);
            
            const response = await fetch(url, {
                headers: headers
            });
            
            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', Array.isArray(data) ? data.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
            return data;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}:`, error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ device_id
     */
    getCurrentDeviceId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å device_id –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
        const deviceSelect = document.querySelector('#device-filter');
        if (deviceSelect && deviceSelect.value) {
            return deviceSelect.value;
        }
        
        // –ò–ª–∏ –∏–∑ localStorage
        return localStorage.getItem('currentDeviceId') || null;
    }

    /**
     * –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    startAutoUpdate() {
        setInterval(async () => {
            if (this.isInitialized) {
                await this.loadAnalyticsData();
            }
        }, this.updateInterval);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ device_id
     */
    setDeviceId(deviceId) {
        this.currentDeviceId = deviceId;
        if (this.isInitialized) {
            this.loadAnalyticsData();
        }
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    updateMainDashboardCards(analyticsData) {
        if (!analyticsData) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º GPU –∫–∞—Ä—Ç–æ—á–∫—É
        this.updateGPUCard(analyticsData.system_metrics);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        this.updateNetworkCard(analyticsData.network_data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        this.updateKeyboardCard(analyticsData.user_interaction);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ GPU
     */
    updateGPUCard(systemMetrics) {
        if (!systemMetrics) return;

        const currentGPU = document.getElementById('current-gpu-usage');
        const maxGPU = document.getElementById('max-gpu-usage');
        const avgGPU = document.getElementById('avg-gpu-usage');
        const gpuProgress = document.getElementById('gpu-progress');
        const peakGPU = document.getElementById('peak-gpu');
        const peakGPUTime = document.getElementById('peak-gpu-time');

        if (currentGPU) {
            currentGPU.textContent = Math.round(systemMetrics.avg_gpu_usage || 0);
        }
        
        if (maxGPU) {
            maxGPU.textContent = `${Math.round(systemMetrics.max_gpu_usage || 0)}%`;
        }
        
        if (avgGPU) {
            avgGPU.textContent = `${Math.round(systemMetrics.avg_gpu_usage || 0)}%`;
        }
        
        if (gpuProgress) {
            const usage = systemMetrics.avg_gpu_usage || 0;
            gpuProgress.style.width = `${usage}%`;
        }

        if (peakGPU) {
            peakGPU.textContent = `${Math.round(systemMetrics.max_gpu_usage || 0)}%`;
        }

        if (peakGPUTime) {
            peakGPUTime.textContent = systemMetrics.peak_gpu_time || '-';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateNetworkCard(networkData) {
        if (!networkData || !Array.isArray(networkData) || networkData.length === 0) return;

        const currentSpeed = document.getElementById('current-network-speed');
        const networkUpload = document.getElementById('network-upload');
        const networkDownload = document.getElementById('network-download');
        const networkIndicator = document.getElementById('network-indicator');
        const networkStatus = document.getElementById('network-status-text');
        const peakSpeed = document.getElementById('peak-network-speed');
        const totalTraffic = document.getElementById('total-network-traffic');
        const networkRatio = document.getElementById('network-ratio');

        let periodTrafficSent = 0;
        let periodTrafficReceived = 0;
        let recentSpeed = 0;
        let maxSpeed = 0;

        // –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å—å—é)
        if (networkData.length >= 2) {
            const first = networkData[0];
            const last = networkData[networkData.length - 1];
            
            const timeDiff = (new Date(last.timestamp) - new Date(first.timestamp)) / 1000; // —Å–µ–∫—É–Ω–¥—ã
            
            if (timeDiff > 0) {
                const sentDiff = Math.max(0, last.bytes_sent - first.bytes_sent);
                const receivedDiff = Math.max(0, last.bytes_received - first.bytes_received);
                
                periodTrafficSent = sentDiff;
                periodTrafficReceived = receivedDiff;
                
                const totalBytesDiff = sentDiff + receivedDiff;
                if (totalBytesDiff > 0) {
                    recentSpeed = (totalBytesDiff * 8) / (timeDiff * 1024 * 1024); // Mbps
                }
            }
        } else {
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, –±–µ—Ä–µ–º –µ–µ –∫–∞–∫ –µ—Å—Ç—å
            const lastRecord = networkData[networkData.length - 1];
            periodTrafficSent = lastRecord.bytes_sent || 0;
            periodTrafficReceived = lastRecord.bytes_received || 0;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (!isFinite(recentSpeed) || recentSpeed < 0 || recentSpeed > 10000) {
            recentSpeed = 0;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
        if (currentSpeed) {
            currentSpeed.textContent = this.formatNetworkSpeed(recentSpeed).replace(' ', '').replace('bps', '').replace('Kbps', 'K').replace('Mbps', 'M').replace('Gbps', 'G');
        }

        if (networkUpload) {
            networkUpload.textContent = this.formatBytes(periodTrafficSent);
        }

        if (networkDownload) {
            networkDownload.textContent = this.formatBytes(periodTrafficReceived);
        }

        if (networkIndicator && networkStatus) {
            if (recentSpeed > 10) {
                networkIndicator.style.background = '#28a745';
                networkStatus.textContent = '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            } else if (recentSpeed > 1) {
                networkIndicator.style.background = '#ffc107';
                networkStatus.textContent = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            } else if (recentSpeed > 0.1) {
                networkIndicator.style.background = '#17a2b8';
                networkStatus.textContent = '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            } else {
                networkIndicator.style.background = '#dc3545';
                networkStatus.textContent = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
            }
        }

        if (peakSpeed) {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
            maxSpeed = recentSpeed;
            if (networkData.length > 2) {
                for (let i = 1; i < networkData.length; i++) {
                    const current = networkData[i];
                    const previous = networkData[i - 1];
                    const timeDiff = (new Date(current.timestamp) - new Date(previous.timestamp)) / 1000;
                    
                    if (timeDiff > 0) {
                        const sentDiff = Math.max(0, current.bytes_sent - previous.bytes_sent);
                        const receivedDiff = Math.max(0, current.bytes_received - previous.bytes_received);
                        const totalDiff = sentDiff + receivedDiff;
                        
                        if (totalDiff > 0) {
                            const speed = (totalDiff * 8) / (timeDiff * 1024 * 1024); // Mbps
                            if (isFinite(speed) && speed > maxSpeed && speed <= 10000) {
                                maxSpeed = speed;
                            }
                        }
                    }
                }
            }
            peakSpeed.textContent = this.formatNetworkSpeed(maxSpeed);
        }

        if (totalTraffic) {
            const total = (periodTrafficSent + periodTrafficReceived);
            totalTraffic.textContent = this.formatBytes(total);
        }

        if (networkRatio && periodTrafficReceived > 0 && periodTrafficSent > 0) {
            const ratio = periodTrafficSent / periodTrafficReceived;
            networkRatio.textContent = `${ratio.toFixed(1)}:1`;
        } else if (networkRatio) {
            networkRatio.textContent = '-';
        }

        console.log('üåê –°–µ—Ç–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
            speed: this.formatNetworkSpeed(recentSpeed),
            upload: this.formatBytes(periodTrafficSent),
            download: this.formatBytes(periodTrafficReceived),
            peak: this.formatNetworkSpeed(maxSpeed)
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateKeyboardCard(userInteraction) {
        if (!userInteraction) return;

        const eventsPerMinute = document.getElementById('keyboard-events-per-minute');
        const totalEvents = document.getElementById('total-keyboard-events');
        const eventsHour = document.getElementById('keyboard-events-hour');
        const intensityBar = document.getElementById('keyboard-intensity-bar');
        const intensityText = document.getElementById('keyboard-intensity-text');
        const peakActivity = document.getElementById('peak-keyboard-activity');
        const peakTime = document.getElementById('peak-keyboard-time');
        const avgActivity = document.getElementById('avg-keyboard-activity');
        const intensityLevel = document.getElementById('keyboard-intensity-level');

        const eventsPerMin = Math.round((userInteraction.avg_keyboard_activity_per_hour || 0) / 60);
        const totalKeyboardEvents = userInteraction.total_keyboard_events || 0;
        const hourlyEvents = Math.round(userInteraction.avg_keyboard_activity_per_hour || 0);

        if (eventsPerMinute) {
            eventsPerMinute.textContent = eventsPerMin;
        }

        if (totalEvents) {
            totalEvents.textContent = totalKeyboardEvents;
        }

        if (eventsHour) {
            eventsHour.textContent = hourlyEvents;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        let intensity = 0;
        let intensityTextValue = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        let levelText = '–ù–∏–∑–∫–∏–π';

        if (hourlyEvents > 300) {
            intensity = 100;
            intensityTextValue = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è';
            levelText = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π';
        } else if (hourlyEvents > 200) {
            intensity = 80;
            intensityTextValue = '–í—ã—Å–æ–∫–∞—è';
            levelText = '–í—ã—Å–æ–∫–∏–π';
        } else if (hourlyEvents > 100) {
            intensity = 60;
            intensityTextValue = '–°—Ä–µ–¥–Ω—è—è';
            levelText = '–°—Ä–µ–¥–Ω–∏–π';
        } else if (hourlyEvents > 50) {
            intensity = 30;
            intensityTextValue = '–ù–∏–∑–∫–∞—è';
            levelText = '–ù–∏–∑–∫–∏–π';
        }

        if (intensityBar) {
            intensityBar.style.width = `${intensity}%`;
        }

        if (intensityText) {
            intensityText.textContent = intensityTextValue;
        }

        if (peakActivity) {
            peakActivity.textContent = `${Math.round(userInteraction.peak_keyboard_activity || 0)} —Å–æ–±/–º–∏–Ω`;
        }

        if (peakTime) {
            peakTime.textContent = userInteraction.peak_keyboard_time || '-';
        }

        if (avgActivity) {
            avgActivity.textContent = `${eventsPerMin} —Å–æ–±/–º–∏–Ω`;
        }

        if (intensityLevel) {
            intensityLevel.textContent = levelText;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    initializeCharts() {
        this.initGPUChart();
        this.initNetworkChart();
        this.initKeyboardChart();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ GPU
     */
    initGPUChart() {
        const chartContainer = document.getElementById('gpu-chart');
        if (!chartContainer) return;

        // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å Canvas
        const canvas = document.createElement('canvas');
        canvas.width = 300;
        canvas.height = 100;
        canvas.style.width = '100%';
        canvas.style.height = '100px';
        chartContainer.appendChild(canvas);

        this.gpuChart = {
            canvas: canvas,
            ctx: canvas.getContext('2d'),
            data: []
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Ç–∏
     */
    initNetworkChart() {
        const chartContainer = document.getElementById('network-chart');
        if (!chartContainer) return;

        const canvas = document.createElement('canvas');
        canvas.width = 300;
        canvas.height = 100;
        canvas.style.width = '100%';
        canvas.style.height = '100px';
        chartContainer.appendChild(canvas);

        this.networkChart = {
            canvas: canvas,
            ctx: canvas.getContext('2d'),
            data: []
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    initKeyboardChart() {
        const chartContainer = document.getElementById('keyboard-chart');
        if (!chartContainer) return;

        const canvas = document.createElement('canvas');
        canvas.width = 300;
        canvas.height = 100;
        canvas.style.width = '100%';
        canvas.style.height = '100px';
        chartContainer.appendChild(canvas);

        this.keyboardChart = {
            canvas: canvas,
            ctx: canvas.getContext('2d'),
            data: []
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ GPU
     */
    updateGPUChart(data) {
        if (!this.gpuChart || !data) return;

        const ctx = this.gpuChart.ctx;
        const canvas = this.gpuChart.canvas;
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.gpuChart.data.push(data.avg_gpu_usage || 0);
        if (this.gpuChart.data.length > 20) {
            this.gpuChart.data.shift();
        }

        // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.drawLineChart(ctx, this.gpuChart.data, '#007bff', canvas.width, canvas.height);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Ç–∏
     */
    updateNetworkChart(data) {
        if (!this.networkChart || !data || !Array.isArray(data)) return;

        const ctx = this.networkChart.ctx;
        const canvas = this.networkChart.canvas;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        let speed = 0;
        if (data.length >= 2) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            const prev = data[data.length - 2];
            const current = data[data.length - 1];
            
            const timeDiff = (new Date(current.timestamp) - new Date(prev.timestamp)) / 1000; // —Å–µ–∫—É–Ω–¥—ã
            
            if (timeDiff > 0) {
                const bytesDiff = (current.bytes_sent - prev.bytes_sent) + (current.bytes_received - prev.bytes_received);
                
                if (bytesDiff > 0) {
                    speed = (bytesDiff * 8) / (timeDiff * 1024 * 1024); // Mbps
                    speed = Math.max(0, speed);
                }
            }
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (!isFinite(speed) || speed > 1000) {
            speed = 0;
        }

        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.networkChart.data.push(speed);
        if (this.networkChart.data.length > 20) {
            this.networkChart.data.shift();
        }

        // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.drawLineChart(ctx, this.networkChart.data, '#28a745', canvas.width, canvas.height);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    updateKeyboardChart(data) {
        if (!this.keyboardChart || !data) return;

        const ctx = this.keyboardChart.ctx;
        const canvas = this.keyboardChart.canvas;
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—É)
        const eventsPerMin = (data.avg_keyboard_activity_per_hour || 0) / 60;
        this.keyboardChart.data.push(eventsPerMin);
        if (this.keyboardChart.data.length > 20) {
            this.keyboardChart.data.shift();
        }

        // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.drawLineChart(ctx, this.keyboardChart.data, '#ffc107', canvas.width, canvas.height);
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    drawLineChart(ctx, data, color, width, height) {
        if (!data || data.length === 0) return;

        const padding = 10;
        const graphWidth = width - padding * 2;
        const graphHeight = height - padding * 2;
        
        const maxValue = Math.max(...data, 1);
        const step = graphWidth / (data.length - 1 || 1);

        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.beginPath();

        data.forEach((value, index) => {
            const x = padding + index * step;
            const y = padding + graphHeight - (value / maxValue) * graphHeight;
            
            if (index === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        });

        ctx.stroke();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        ctx.fillStyle = color;
        data.forEach((value, index) => {
            const x = padding + index * step;
            const y = padding + graphHeight - (value / maxValue) * graphHeight;
            
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, 2 * Math.PI);
            ctx.fill();
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.smartAnalytics = new SmartAnalyticsDashboard();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
    setTimeout(() => {
        window.smartAnalytics.initialize();
    }, 2000);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SmartAnalyticsDashboard;
} 